

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 22 13:22:43 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4520 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	smallconst
    87  000600                     __psmallconst:
    88                           	opt stack 0
    89  000600  00                 	db	0
    90  000601                     __powers_:
    91                           	opt stack 0
    92  000601  0000               	dw	0
    93  000603  3F80               	dw	16256
    94  000605  0000               	dw	0
    95  000607  4120               	dw	16672
    96  000609  0000               	dw	0
    97  00060B  42C8               	dw	17096
    98  00060D  0000               	dw	0
    99  00060F  447A               	dw	17530
   100  000611  4000               	dw	16384
   101  000613  461C               	dw	17948
   102  000615  5000               	dw	20480
   103  000617  47C3               	dw	18371
   104  000619  2400               	dw	9216
   105  00061B  4974               	dw	18804
   106  00061D  9680               	dw	38528
   107  00061F  4B18               	dw	19224
   108  000621  BC20               	dw	48160
   109  000623  4CBE               	dw	19646
   110  000625  6B28               	dw	27432
   111  000627  4E6E               	dw	20078
   112  000629  02F9               	dw	761
   113  00062B  5015               	dw	20501
   114  00062D  78EC               	dw	30956
   115  00062F  60AD               	dw	24749
   116  000631  F2CA               	dw	62154
   117  000633  7149               	dw	29001
   118  000635                     __end_of__powers_:
   119                           	opt stack 0
   120  000635                     __npowers_:
   121                           	opt stack 0
   122  000635  0000               	dw	0
   123  000637  3F80               	dw	16256
   124  000639  CCCD               	dw	52429
   125  00063B  3DCC               	dw	15820
   126  00063D  D70A               	dw	55050
   127  00063F  3C23               	dw	15395
   128  000641  126F               	dw	4719
   129  000643  3A83               	dw	14979
   130  000645  B717               	dw	46871
   131  000647  38D1               	dw	14545
   132  000649  C5AC               	dw	50604
   133  00064B  3727               	dw	14119
   134  00064D  37BD               	dw	14269
   135  00064F  3586               	dw	13702
   136  000651  BF95               	dw	49045
   137  000653  33D6               	dw	13270
   138  000655  CC77               	dw	52343
   139  000657  322B               	dw	12843
   140  000659  705F               	dw	28767
   141  00065B  3089               	dw	12425
   142  00065D  E6FF               	dw	59135
   143  00065F  2EDB               	dw	11995
   144  000661  E508               	dw	58632
   145  000663  1E3C               	dw	7740
   146  000665  4260               	dw	16992
   147  000667  0DA2               	dw	3490
   148  000669                     __end_of__npowers_:
   149                           	opt stack 0
   150  000669                     _dpowers:
   151                           	opt stack 0
   152  000669  0001               	dw	1
   153  00066B  0000               	dw	0
   154  00066D  000A               	dw	10
   155  00066F  0000               	dw	0
   156  000671  0064               	dw	100
   157  000673  0000               	dw	0
   158  000675  03E8               	dw	1000
   159  000677  0000               	dw	0
   160  000679  2710               	dw	10000
   161  00067B  0000               	dw	0
   162  00067D  86A0               	dw	34464
   163  00067F  0001               	dw	1
   164  000681  4240               	dw	16960
   165  000683  000F               	dw	15
   166  000685  9680               	dw	38528
   167  000687  0098               	dw	152
   168  000689  E100               	dw	57600
   169  00068B  05F5               	dw	1525
   170  00068D  CA00               	dw	51712
   171  00068F  3B9A               	dw	15258
   172  000691                     __end_of_dpowers:
   173                           	opt stack 0
   174  0000                     _TRISA	set	3986
   175  0000                     _TRISCbits	set	3988
   176  0000                     _RC2	set	31762
   177  0000                     _TMR3	set	4018
   178  0000                     _ADCON0bits	set	4034
   179  0000                     _ADRESL	set	4035
   180  0000                     _ADRESH	set	4036
   181  0000                     _ADCON2bits	set	4032
   182  0000                     _ADCON1	set	4033
   183  0000                     _CCP1CON	set	4029
   184  0000                     _RCONbits	set	4048
   185  0000                     _RCREG	set	4014
   186  0000                     _TXREG	set	4013
   187  0000                     _IPR1bits	set	3999
   188  0000                     _PIE1bits	set	3997
   189  0000                     _PIR1bits	set	3998
   190  0000                     _RCSTAbits	set	4011
   191  0000                     _SPBRG	set	4015
   192  0000                     _BAUDCONbits	set	4024
   193  0000                     _TXSTAbits	set	4012
   194  0000                     _ADFM	set	32263
   195  0000                     _CREN	set	32092
   196  0000                     _RCIF	set	31989
   197  0000                     _IRCF0	set	32412
   198  0000                     _IRCF1	set	32413
   199  0000                     _IRCF2	set	32414
   200  0000                     _INTCONbits	set	4082
   201  000691                     STR_1:
   202  000691  48                 	db	72	;'H'
   203  000692  65                 	db	101	;'e'
   204  000693  6C                 	db	108	;'l'
   205  000694  6C                 	db	108	;'l'
   206  000695  6F                 	db	111	;'o'
   207  000696  20                 	db	32
   208  000697  77                 	db	119	;'w'
   209  000698  6F                 	db	111	;'o'
   210  000699  72                 	db	114	;'r'
   211  00069A  6C                 	db	108	;'l'
   212  00069B  64                 	db	100	;'d'
   213  00069C  0A                 	db	10
   214  00069D  00                 	db	0
   215  00069E                     STR_2:
   216  00069E  25                 	db	37
   217  00069F  66                 	db	102	;'f'
   218  0006A0  00                 	db	0
   219                           
   220                           ; #config settings
   221  0006A1  00                 	db	0	; dummy byte at the end
   222  0000                     
   223                           	psect	cinit
   224  00260C                     __pcinit:
   225                           	opt stack 0
   226  00260C                     start_initialization:
   227                           	opt stack 0
   228  00260C                     __initialization:
   229                           	opt stack 0
   230                           
   231                           ; Clear objects allocated to BANK0 (2 bytes)
   232  00260C  0100               	movlb	0
   233  00260E  6BF9               	clrf	(__pbssBANK0+1)& (0+255),b
   234  002610  6BF8               	clrf	__pbssBANK0& (0+255),b
   235                           
   236                           ; Clear objects allocated to COMRAM (12 bytes)
   237  002612  EE00  F046         	lfsr	0,__pbssCOMRAM
   238  002616  0E0C               	movlw	12
   239  002618                     clear_0:
   240  002618  6AEE               	clrf	postinc0,c
   241  00261A  06E8               	decf	wreg,f,c
   242  00261C  E1FD               	bnz	clear_0
   243  00261E                     end_of_initialization:
   244                           	opt stack 0
   245  00261E                     __end_of__initialization:
   246                           	opt stack 0
   247  00261E  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   248  002620  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   249  002622  0E00               	movlw	low (__Lmediumconst shr (0+16))
   250  002624  6EF8               	movwf	tblptru,c
   251  002626  0100               	movlb	0
   252  002628  EF2D  F012         	goto	_main	;jump to C main() function
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssCOMRAM
   258  000046                     __pbssCOMRAM:
   259                           	opt stack 0
   260  000046                     _lenStr:
   261                           	opt stack 0
   262  000046                     	ds	2
   263  000048                     _mystring:
   264                           	opt stack 0
   265  000048                     	ds	10
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	bssBANK0
   271  0000F8                     __pbssBANK0:
   272                           	opt stack 0
   273  0000F8                     _digital:
   274                           	opt stack 0
   275  0000F8                     	ds	2
   276                           tblptru	equ	0xFF8
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	cstackBANK0
   281  000080                     __pcstackBANK0:
   282                           	opt stack 0
   283  000080                     ??___flmul:
   284                           
   285                           ; 1 bytes @ 0x0
   286  000080                     	ds	4
   287  000084                     ___flmul@sign:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x4
   291  000084                     	ds	1
   292  000085                     ___flmul@aexp:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x5
   296  000085                     	ds	1
   297  000086                     ___flmul@grs:
   298                           	opt stack 0
   299                           
   300                           ; 4 bytes @ 0x6
   301  000086                     	ds	4
   302  00008A                     ___flmul@bexp:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0xA
   306  00008A                     	ds	1
   307  00008B                     ___flmul@prod:
   308                           	opt stack 0
   309                           
   310                           ; 4 bytes @ 0xB
   311  00008B                     	ds	4
   312  00008F                     ___flmul@temp:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0xF
   316  00008F                     	ds	2
   317  000091                     ?_fround:
   318                           	opt stack 0
   319  000091                     ?_scale:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0x11
   323  000091                     	ds	4
   324  000095                     _fround$1396:
   325                           	opt stack 0
   326  000095                     _scale$1397:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0x15
   330  000095                     	ds	4
   331  000099                     scale@scl:
   332                           	opt stack 0
   333  000099                     _fround$1395:
   334                           	opt stack 0
   335                           
   336                           ; 4 bytes @ 0x19
   337  000099                     	ds	1
   338  00009A                     ?___fltol:
   339                           	opt stack 0
   340  00009A                     ___fltol@f1:
   341                           	opt stack 0
   342                           
   343                           ; 4 bytes @ 0x1A
   344  00009A                     	ds	3
   345  00009D                     fround@prec:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x1D
   349  00009D                     	ds	1
   350  00009E                     ??___fltol:
   351  00009E                     ?___fladd:
   352                           	opt stack 0
   353  00009E                     ___fladd@b:
   354                           	opt stack 0
   355                           
   356                           ; 4 bytes @ 0x1E
   357  00009E                     	ds	4
   358  0000A2                     ___fladd@a:
   359                           	opt stack 0
   360                           
   361                           ; 4 bytes @ 0x22
   362  0000A2                     	ds	4
   363  0000A6                     ??___fladd:
   364                           
   365                           ; 1 bytes @ 0x26
   366  0000A6                     	ds	8
   367  0000AE                     ___fladd@signs:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x2E
   371  0000AE                     	ds	1
   372  0000AF                     ___fladd@aexp:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x2F
   376  0000AF                     	ds	1
   377  0000B0                     ___fladd@bexp:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x30
   381  0000B0                     	ds	1
   382  0000B1                     ___fladd@grs:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x31
   386  0000B1                     	ds	1
   387  0000B2                     ?___flsub:
   388                           	opt stack 0
   389  0000B2                     ___flsub@b:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x32
   393  0000B2                     	ds	4
   394  0000B6                     ___flsub@a:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x36
   398  0000B6                     	ds	4
   399  0000BA                     ?_sprintf:
   400                           	opt stack 0
   401  0000BA                     sprintf@sp:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x3A
   405  0000BA                     	ds	2
   406  0000BC                     sprintf@f:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x3C
   410  0000BC                     	ds	6
   411  0000C2                     ??_sprintf:
   412                           
   413                           ; 1 bytes @ 0x42
   414  0000C2                     	ds	2
   415  0000C4                     _sprintf$1398:
   416                           	opt stack 0
   417                           
   418                           ; 4 bytes @ 0x44
   419  0000C4                     	ds	4
   420  0000C8                     sprintf@ap:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x48
   424  0000C8                     	ds	2
   425  0000CA                     sprintf@flag:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x4A
   429  0000CA                     	ds	2
   430  0000CC                     sprintf@prec:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x4C
   434  0000CC                     	ds	2
   435  0000CE                     sprintf@val:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0x4E
   439  0000CE                     	ds	4
   440  0000D2                     sprintf@exp:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x52
   444  0000D2                     	ds	2
   445  0000D4                     sprintf@tmpval:
   446                           	opt stack 0
   447                           
   448                           ; 4 bytes @ 0x54
   449  0000D4                     	ds	4
   450  0000D8                     sprintf@fval:
   451                           	opt stack 0
   452                           
   453                           ; 4 bytes @ 0x58
   454  0000D8                     	ds	4
   455  0000DC                     sprintf@c:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x5C
   459  0000DC                     	ds	1
   460  0000DD                     Mode2@res:
   461                           	opt stack 0
   462                           
   463                           ; 20 bytes @ 0x5D
   464  0000DD                     	ds	20
   465  0000F1                     Mode2@voltage:
   466                           	opt stack 0
   467                           
   468                           ; 4 bytes @ 0x71
   469  0000F1                     	ds	4
   470  0000F5                     
   471                           ; 1 bytes @ 0x75
   472  0000F5                     	ds	1
   473  0000F6                     main@input:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x76
   477  0000F6                     	ds	2
   478                           tblptru	equ	0xFF8
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           
   482                           	psect	cstackCOMRAM
   483  000001                     __pcstackCOMRAM:
   484                           	opt stack 0
   485  000001                     ??_Hi_ISR:
   486  000001                     
   487                           ; 1 bytes @ 0x0
   488  000001                     	ds	18
   489  000013                     ?i1___awmod:
   490                           	opt stack 0
   491  000013                     i1UART_Write@data:
   492                           	opt stack 0
   493  000013                     i1___awmod@dividend:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x12
   497  000013                     	ds	2
   498  000015                     i1___awmod@divisor:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x14
   502  000015                     	ds	2
   503  000017                     i1___awmod@counter:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x16
   507  000017                     	ds	1
   508  000018                     i1___awmod@sign:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x17
   512  000018                     	ds	1
   513  000019                     ??_Lo_ISR:
   514                           
   515                           ; 1 bytes @ 0x18
   516  000019                     	ds	21
   517  00002E                     ?_GetString:
   518                           	opt stack 0
   519  00002E                     ?_ADC_Read:
   520                           	opt stack 0
   521  00002E                     ?___wmul:
   522                           	opt stack 0
   523  00002E                     ?___awmod:
   524                           	opt stack 0
   525  00002E                     ?__tdiv_to_l_:
   526                           	opt stack 0
   527  00002E                     ?__div_to_l_:
   528                           	opt stack 0
   529  00002E                     ?___flneg:
   530                           	opt stack 0
   531  00002E                     ?___lldiv:
   532                           	opt stack 0
   533  00002E                     ?___llmod:
   534                           	opt stack 0
   535  00002E                     ?___xxtofl:
   536                           	opt stack 0
   537  00002E                     UART_Write@data:
   538                           	opt stack 0
   539  00002E                     ClearBuffer@i:
   540                           	opt stack 0
   541  00002E                     ADC_Read@channel:
   542                           	opt stack 0
   543  00002E                     ___wmul@multiplier:
   544                           	opt stack 0
   545  00002E                     ___awmod@dividend:
   546                           	opt stack 0
   547  00002E                     __div_to_l_@f1:
   548                           	opt stack 0
   549  00002E                     ___flge@ff1:
   550                           	opt stack 0
   551  00002E                     ___flneg@f1:
   552                           	opt stack 0
   553  00002E                     __tdiv_to_l_@f1:
   554                           	opt stack 0
   555  00002E                     ___lldiv@dividend:
   556                           	opt stack 0
   557  00002E                     ___llmod@dividend:
   558                           	opt stack 0
   559  00002E                     ___xxtofl@val:
   560                           	opt stack 0
   561                           
   562                           ; 4 bytes @ 0x2D
   563  00002E                     	ds	1
   564  00002F                     UART_Write_Text@text:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x2E
   568  00002F                     	ds	1
   569  000030                     ??_ADC_Read:
   570  000030                     ___wmul@multiplicand:
   571                           	opt stack 0
   572  000030                     ___awmod@divisor:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x2F
   576  000030                     	ds	1
   577  000031                     ??_UART_Write_Text:
   578                           
   579                           ; 1 bytes @ 0x30
   580  000031                     	ds	1
   581  000032                     ??___xxtofl:
   582  000032                     ___awmod@counter:
   583                           	opt stack 0
   584  000032                     ADC_Read@digital:
   585                           	opt stack 0
   586  000032                     ___wmul@product:
   587                           	opt stack 0
   588  000032                     __div_to_l_@f2:
   589                           	opt stack 0
   590  000032                     ___flge@ff2:
   591                           	opt stack 0
   592  000032                     __tdiv_to_l_@f2:
   593                           	opt stack 0
   594  000032                     ___lldiv@divisor:
   595                           	opt stack 0
   596  000032                     ___llmod@divisor:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x31
   600  000032                     	ds	1
   601  000033                     ___awmod@sign:
   602                           	opt stack 0
   603  000033                     UART_Write_Text@i:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x32
   607  000033                     	ds	1
   608  000034                     ?___awdiv:
   609                           	opt stack 0
   610  000034                     ___awdiv@dividend:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x33
   614  000034                     	ds	1
   615  000035                     
   616                           ; 1 bytes @ 0x34
   617  000035                     	ds	1
   618  000036                     ??__tdiv_to_l_:
   619  000036                     ??___flge:
   620  000036                     ___llmod@counter:
   621                           	opt stack 0
   622  000036                     ___xxtofl@sign:
   623                           	opt stack 0
   624  000036                     ___awdiv@divisor:
   625                           	opt stack 0
   626  000036                     __div_to_l_@quot:
   627                           	opt stack 0
   628  000036                     ___lldiv@quotient:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x35
   632  000036                     	ds	1
   633  000037                     ___xxtofl@exp:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x36
   637  000037                     	ds	1
   638  000038                     ___awdiv@counter:
   639                           	opt stack 0
   640  000038                     ___xxtofl@arg:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x37
   644  000038                     	ds	1
   645  000039                     ___awdiv@sign:
   646                           	opt stack 0
   647  000039                     __tdiv_to_l_@quot:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x38
   651  000039                     	ds	1
   652  00003A                     __div_to_l_@cntr:
   653                           	opt stack 0
   654  00003A                     ___lldiv@counter:
   655                           	opt stack 0
   656  00003A                     ___awdiv@quotient:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x39
   660  00003A                     	ds	1
   661  00003B                     __div_to_l_@exp1:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x3A
   665  00003B                     	ds	1
   666  00003C                     ?___flmul:
   667                           	opt stack 0
   668  00003C                     ___flmul@b:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x3B
   672  00003C                     	ds	1
   673  00003D                     __tdiv_to_l_@cntr:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x3C
   677  00003D                     	ds	1
   678  00003E                     __tdiv_to_l_@exp1:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x3D
   682  00003E                     	ds	2
   683  000040                     ___flmul@a:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x3F
   687  000040                     	ds	4
   688  000044                     ___fltol@sign1:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x43
   692  000044                     	ds	1
   693  000045                     ___fltol@exp1:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x44
   697  000045                     	ds	1
   698  000046                     tblptru	equ	0xFF8
   699                           postinc0	equ	0xFEE
   700                           wreg	equ	0xFE8
   701                           
   702                           ; 1 bytes @ 0x45
   703 ;;
   704 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   705 ;;
   706 ;; *************** function _main *****************
   707 ;; Defined at:
   708 ;;		line 49 in file "main.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;		None
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  input           2  118[BANK0 ] PTR unsigned char 
   713 ;;		 -> mystring(10), 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   723 ;;      Params:         0       0       0       0       0       0       0
   724 ;;      Locals:         0       2       0       0       0       0       0
   725 ;;      Temps:          0       1       0       0       0       0       0
   726 ;;      Totals:         0       3       0       0       0       0       0
   727 ;;Total ram usage:        3 bytes
   728 ;; Hardware stack levels required when called:    8
   729 ;; This function calls:
   730 ;;		_ClearBuffer
   731 ;;		_GetString
   732 ;;		_Mode1
   733 ;;		_Mode2
   734 ;;		_SYSTEM_Initialize
   735 ;; This function is called by:
   736 ;;		Startup code after reset
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           	psect	text0
   741  00245A                     __ptext0:
   742                           	opt stack 0
   743  00245A                     _main:
   744                           	opt stack 23
   745                           
   746                           ;main.c: 52: SYSTEM_Initialize() ;
   747                           
   748                           ;incstack = 0
   749  00245A  EC22  F013         	call	_SYSTEM_Initialize	;wreg free
   750  00245E                     
   751                           ;main.c: 57: ClearBuffer();
   752  00245E  EC97  F012         	call	_ClearBuffer	;wreg free
   753                           
   754                           ;main.c: 58: char *input=GetString();
   755  002462  EC46  F013         	call	_GetString	;wreg free
   756  002466  C02E  F0F6         	movff	?_GetString,main@input
   757  00246A  C02F  F0F7         	movff	?_GetString+1,main@input+1
   758                           
   759                           ;main.c: 60: if(mystring[lenStr]=='1'){
   760  00246E  0E48               	movlw	low _mystring
   761  002470  2446               	addwf	_lenStr,w,c
   762  002472  6ED9               	movwf	fsr2l,c
   763  002474  0E00               	movlw	high _mystring
   764  002476  2047               	addwfc	_lenStr+1,w,c
   765  002478  6EDA               	movwf	fsr2h,c
   766  00247A  0E31               	movlw	49
   767  00247C  18DE               	xorwf	postinc2,w,c
   768  00247E  A4D8               	btfss	status,2,c
   769  002480  D003               	goto	l161
   770                           
   771                           ;main.c: 61: Mode1();
   772  002482  EC2B  F013         	call	_Mode1	;wreg free
   773                           
   774                           ;main.c: 62: }
   775  002486  D7EB               	goto	l160
   776  002488                     l161:
   777                           
   778                           ;main.c: 63: else if(mystring[lenStr]=='2'){
   779  002488  0E48               	movlw	low _mystring
   780  00248A  2446               	addwf	_lenStr,w,c
   781  00248C  6ED9               	movwf	fsr2l,c
   782  00248E  0E00               	movlw	high _mystring
   783  002490  2047               	addwfc	_lenStr+1,w,c
   784  002492  6EDA               	movwf	fsr2h,c
   785  002494  0E32               	movlw	50
   786  002496  18DE               	xorwf	postinc2,w,c
   787  002498  A4D8               	btfss	status,2,c
   788  00249A  D7E1               	goto	l160
   789                           
   790                           ;main.c: 64: Mode2();
   791  00249C  EC1F  F010         	call	_Mode2	;wreg free
   792  0024A0  D7DE               	goto	l160
   793  0024A2                     __end_of_main:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postinc2	equ	0xFDE
   799                           fsr2h	equ	0xFDA
   800                           fsr2l	equ	0xFD9
   801                           status	equ	0xFD8
   802                           
   803 ;; *************** function _SYSTEM_Initialize *****************
   804 ;; Defined at:
   805 ;;		line 60 in file "setting_hardaware/setting.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;		None
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, status,2, cstack
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   819 ;;      Params:         0       0       0       0       0       0       0
   820 ;;      Locals:         0       0       0       0       0       0       0
   821 ;;      Temps:          0       0       0       0       0       0       0
   822 ;;      Totals:         0       0       0       0       0       0       0
   823 ;;Total ram usage:        0 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    5
   826 ;; This function calls:
   827 ;;		_ADC_Initialize
   828 ;;		_CCP1_Initialize
   829 ;;		_INTERRUPT_Initialize
   830 ;;		_UART_Initialize
   831 ;; This function is called by:
   832 ;;		_main
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text1
   837  002644                     __ptext1:
   838                           	opt stack 0
   839  002644                     _SYSTEM_Initialize:
   840                           	opt stack 25
   841                           
   842                           ;setting.c: 67: INTERRUPT_Initialize();
   843                           
   844                           ;incstack = 0
   845  002644  EC4B  F013         	call	_INTERRUPT_Initialize	;wreg free
   846                           
   847                           ;setting.c: 68: UART_Initialize();
   848  002648  ECF5  F012         	call	_UART_Initialize	;wreg free
   849                           
   850                           ;setting.c: 69: CCP1_Initialize();
   851  00264C  EC34  F013         	call	_CCP1_Initialize	;wreg free
   852                           
   853                           ;setting.c: 70: ADC_Initialize();
   854  002650  EC16  F013         	call	_ADC_Initialize	;wreg free
   855  002654  0012               	return		;funcret
   856  002656                     __end_of_SYSTEM_Initialize:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           postinc2	equ	0xFDE
   862                           fsr2h	equ	0xFDA
   863                           fsr2l	equ	0xFD9
   864                           status	equ	0xFD8
   865                           
   866 ;; *************** function _UART_Initialize *****************
   867 ;; Defined at:
   868 ;;		line 7 in file "setting_hardaware/uart.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;		None
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg, status,2
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   882 ;;      Params:         0       0       0       0       0       0       0
   883 ;;      Locals:         0       0       0       0       0       0       0
   884 ;;      Temps:          0       0       0       0       0       0       0
   885 ;;      Totals:         0       0       0       0       0       0       0
   886 ;;Total ram usage:        0 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; Hardware stack levels required when called:    4
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_SYSTEM_Initialize
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           	psect	text2
   897  0025EA                     __ptext2:
   898                           	opt stack 0
   899  0025EA                     _UART_Initialize:
   900                           	opt stack 25
   901                           
   902                           ;uart.c: 10: TRISCbits.TRISC6 = 1;
   903                           
   904                           ;incstack = 0
   905  0025EA  8C94               	bsf	3988,6,c	;volatile
   906                           
   907                           ;uart.c: 11: TRISCbits.TRISC7 = 1;
   908  0025EC  8E94               	bsf	3988,7,c	;volatile
   909                           
   910                           ;uart.c: 22: TXSTAbits.SYNC = 0;
   911  0025EE  98AC               	bcf	4012,4,c	;volatile
   912                           
   913                           ;uart.c: 23: BAUDCONbits.BRG16 = 0 ;
   914  0025F0  96B8               	bcf	4024,3,c	;volatile
   915                           
   916                           ;uart.c: 24: TXSTAbits.BRGH = 1;
   917  0025F2  84AC               	bsf	4012,2,c	;volatile
   918                           
   919                           ;uart.c: 25: SPBRG = 51;
   920  0025F4  0E33               	movlw	51
   921  0025F6  6EAF               	movwf	4015,c	;volatile
   922                           
   923                           ;uart.c: 28: RCSTAbits.SPEN = 1;
   924  0025F8  8EAB               	bsf	4011,7,c	;volatile
   925                           
   926                           ;uart.c: 29: PIR1bits.TXIF = 1;
   927  0025FA  889E               	bsf	3998,4,c	;volatile
   928                           
   929                           ;uart.c: 30: PIR1bits.RCIF = 0;
   930  0025FC  9A9E               	bcf	3998,5,c	;volatile
   931                           
   932                           ;uart.c: 31: TXSTAbits.TXEN = 1;
   933  0025FE  8AAC               	bsf	4012,5,c	;volatile
   934                           
   935                           ;uart.c: 32: RCSTAbits.CREN = 1;
   936  002600  88AB               	bsf	4011,4,c	;volatile
   937                           
   938                           ;uart.c: 34: PIE1bits.TXIE = 0;
   939  002602  989D               	bcf	3997,4,c	;volatile
   940                           
   941                           ;uart.c: 35: IPR1bits.TXIP = 0;
   942  002604  989F               	bcf	3999,4,c	;volatile
   943                           
   944                           ;uart.c: 36: PIE1bits.RCIE = 1;
   945  002606  8A9D               	bsf	3997,5,c	;volatile
   946                           
   947                           ;uart.c: 37: IPR1bits.RCIP = 0;
   948  002608  9A9F               	bcf	3999,5,c	;volatile
   949  00260A  0012               	return		;funcret
   950  00260C                     __end_of_UART_Initialize:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           postinc0	equ	0xFEE
   954                           wreg	equ	0xFE8
   955                           postinc2	equ	0xFDE
   956                           fsr2h	equ	0xFDA
   957                           fsr2l	equ	0xFD9
   958                           status	equ	0xFD8
   959                           
   960 ;; *************** function _INTERRUPT_Initialize *****************
   961 ;; Defined at:
   962 ;;		line 3 in file "setting_hardaware/interrupt_manager.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;		None
   965 ;; Auto vars:     Size  Location     Type
   966 ;;		None
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		None
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   976 ;;      Params:         0       0       0       0       0       0       0
   977 ;;      Locals:         0       0       0       0       0       0       0
   978 ;;      Temps:          0       0       0       0       0       0       0
   979 ;;      Totals:         0       0       0       0       0       0       0
   980 ;;Total ram usage:        0 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; Hardware stack levels required when called:    4
   983 ;; This function calls:
   984 ;;		Nothing
   985 ;; This function is called by:
   986 ;;		_SYSTEM_Initialize
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text3
   991  002696                     __ptext3:
   992                           	opt stack 0
   993  002696                     _INTERRUPT_Initialize:
   994                           	opt stack 25
   995                           
   996                           ;interrupt_manager.c: 5: RCONbits.IPEN = 1;
   997                           
   998                           ;incstack = 0
   999  002696  8ED0               	bsf	4048,7,c	;volatile
  1000                           
  1001                           ;interrupt_manager.c: 6: INTCONbits.GIEH = 1;
  1002  002698  8EF2               	bsf	intcon,7,c	;volatile
  1003                           
  1004                           ;interrupt_manager.c: 7: INTCONbits.GIEL = 1;
  1005  00269A  8CF2               	bsf	intcon,6,c	;volatile
  1006  00269C  0012               	return		;funcret
  1007  00269E                     __end_of_INTERRUPT_Initialize:
  1008                           	opt stack 0
  1009                           tblptru	equ	0xFF8
  1010                           intcon	equ	0xFF2
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           postinc2	equ	0xFDE
  1014                           fsr2h	equ	0xFDA
  1015                           fsr2l	equ	0xFD9
  1016                           status	equ	0xFD8
  1017                           
  1018 ;; *************** function _CCP1_Initialize *****************
  1019 ;; Defined at:
  1020 ;;		line 3 in file "setting_hardaware/ccp1.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;		None
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;		None
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      void 
  1027 ;; Registers used:
  1028 ;;		wreg, status,2
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1034 ;;      Params:         0       0       0       0       0       0       0
  1035 ;;      Locals:         0       0       0       0       0       0       0
  1036 ;;      Temps:          0       0       0       0       0       0       0
  1037 ;;      Totals:         0       0       0       0       0       0       0
  1038 ;;Total ram usage:        0 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    4
  1041 ;; This function calls:
  1042 ;;		Nothing
  1043 ;; This function is called by:
  1044 ;;		_SYSTEM_Initialize
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text4
  1049  002668                     __ptext4:
  1050                           	opt stack 0
  1051  002668                     _CCP1_Initialize:
  1052                           	opt stack 25
  1053                           
  1054                           ;ccp1.c: 4: TRISCbits.TRISC2=0;
  1055                           
  1056                           ;incstack = 0
  1057  002668  9494               	bcf	3988,2,c	;volatile
  1058                           
  1059                           ;ccp1.c: 5: CCP1CON=9;
  1060  00266A  0E09               	movlw	9
  1061  00266C  6EBD               	movwf	4029,c	;volatile
  1062                           
  1063                           ;ccp1.c: 6: PIR1bits.CCP1IF=0;
  1064  00266E  949E               	bcf	3998,2,c	;volatile
  1065                           
  1066                           ;ccp1.c: 7: IPR1bits.CCP1IP = 1;
  1067  002670  849F               	bsf	3999,2,c	;volatile
  1068  002672  0012               	return		;funcret
  1069  002674                     __end_of_CCP1_Initialize:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           intcon	equ	0xFF2
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           postinc2	equ	0xFDE
  1076                           fsr2h	equ	0xFDA
  1077                           fsr2l	equ	0xFD9
  1078                           status	equ	0xFD8
  1079                           
  1080 ;; *************** function _ADC_Initialize *****************
  1081 ;; Defined at:
  1082 ;;		line 3 in file "setting_hardaware/adc.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1096 ;;      Params:         0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0
  1099 ;;      Totals:         0       0       0       0       0       0       0
  1100 ;;Total ram usage:        0 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    4
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_SYSTEM_Initialize
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text5
  1111  00262C                     __ptext5:
  1112                           	opt stack 0
  1113  00262C                     _ADC_Initialize:
  1114                           	opt stack 25
  1115                           
  1116                           ;adc.c: 4: TRISA = 0xff;
  1117                           
  1118                           ;incstack = 0
  1119  00262C  6892               	setf	3986,c	;volatile
  1120                           
  1121                           ;adc.c: 5: ADCON1 = 0x0e;
  1122  00262E  0E0E               	movlw	14
  1123  002630  6EC1               	movwf	4033,c	;volatile
  1124                           
  1125                           ;adc.c: 7: ADFM = 1 ;
  1126  002632  8EC0               	bsf	4032,7,c	;volatile
  1127                           
  1128                           ;adc.c: 8: ADCON2bits.ADCS = 7;
  1129  002634  80C0               	bsf	4032,0,c	;volatile
  1130  002636  82C0               	bsf	4032,1,c	;volatile
  1131  002638  84C0               	bsf	4032,2,c	;volatile
  1132                           
  1133                           ;adc.c: 9: ADRESH=0;
  1134  00263A  0E00               	movlw	0
  1135  00263C  6EC4               	movwf	4036,c	;volatile
  1136                           
  1137                           ;adc.c: 10: ADRESL=0;
  1138  00263E  0E00               	movlw	0
  1139  002640  6EC3               	movwf	4035,c	;volatile
  1140  002642  0012               	return		;funcret
  1141  002644                     __end_of_ADC_Initialize:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           intcon	equ	0xFF2
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postinc2	equ	0xFDE
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           status	equ	0xFD8
  1151                           
  1152 ;; *************** function _Mode2 *****************
  1153 ;; Defined at:
  1154 ;;		line 24 in file "main.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  res            20   93[BANK0 ] unsigned char [20]
  1159 ;;  voltage         4  113[BANK0 ] float 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1169 ;;      Params:         0       0       0       0       0       0       0
  1170 ;;      Locals:         0      24       0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0
  1172 ;;      Totals:         0      24       0       0       0       0       0
  1173 ;;Total ram usage:       24 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    7
  1176 ;; This function calls:
  1177 ;;		_ADC_Read
  1178 ;;		_ClearBuffer
  1179 ;;		_UART_Write_Text
  1180 ;;		___flmul
  1181 ;;		___xxtofl
  1182 ;;		_sprintf
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text6
  1189  00203E                     __ptext6:
  1190                           	opt stack 0
  1191  00203E                     _Mode2:
  1192                           	opt stack 23
  1193                           
  1194                           ;main.c: 25: ClearBuffer();
  1195                           
  1196                           ;incstack = 0
  1197  00203E  EC97  F012         	call	_ClearBuffer	;wreg free
  1198                           
  1199                           ;main.c: 27: float voltage = 0.0;
  1200  002042  0E00               	movlw	0
  1201  002044  0100               	movlb	0	; () banked
  1202  002046  6FF1               	movwf	Mode2@voltage& (0+255),b
  1203  002048  0E00               	movlw	0
  1204  00204A  6FF2               	movwf	(Mode2@voltage+1)& (0+255),b
  1205  00204C  0E00               	movlw	0
  1206  00204E  6FF3               	movwf	(Mode2@voltage+2)& (0+255),b
  1207  002050  0E00               	movlw	0
  1208  002052  6FF4               	movwf	(Mode2@voltage+3)& (0+255),b
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;main.c: 29: {
  1212                           ;main.c: 30: digital=ADC_Read(0);
  1213  002054  0E00               	movlw	0
  1214  002056  6E2F               	movwf	ADC_Read@channel+1,c
  1215  002058  0E00               	movlw	0
  1216  00205A  6E2E               	movwf	ADC_Read@channel,c
  1217  00205C  ECB3  F012         	call	_ADC_Read	;wreg free
  1218  002060  C02E  F0F8         	movff	?_ADC_Read,_digital
  1219  002064  C02F  F0F9         	movff	?_ADC_Read+1,_digital+1
  1220                           
  1221                           ;main.c: 32: if(digital!=0){
  1222  002068  0100               	movlb	0	; () banked
  1223  00206A  51F8               	movf	_digital& (0+255),w,b
  1224  00206C  11F9               	iorwf	(_digital+1)& (0+255),w,b
  1225  00206E  B4D8               	btfsc	status,2,c
  1226  002070  D03F               	goto	l154
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;main.c: 33: voltage = digital* ((float)5/1023);
  1230  002072  C0F8  F02E         	movff	_digital,___xxtofl@val
  1231  002076  C0F9  F02F         	movff	_digital+1,___xxtofl@val+1
  1232  00207A  0E00               	movlw	0
  1233  00207C  BE2F               	btfsc	___xxtofl@val+1,7,c
  1234  00207E  0EFF               	movlw	-1
  1235  002080  6E30               	movwf	___xxtofl@val+2,c
  1236  002082  6E31               	movwf	___xxtofl@val+3,c
  1237  002084  0E01               	movlw	1
  1238  002086  EC4B  F00D         	call	___xxtofl
  1239  00208A  C02E  F03C         	movff	?___xxtofl,___flmul@b
  1240  00208E  C02F  F03D         	movff	?___xxtofl+1,___flmul@b+1
  1241  002092  C030  F03E         	movff	?___xxtofl+2,___flmul@b+2
  1242  002096  C031  F03F         	movff	?___xxtofl+3,___flmul@b+3
  1243  00209A  0E0A               	movlw	10
  1244  00209C  6E40               	movwf	___flmul@a,c
  1245  00209E  0E28               	movlw	40
  1246  0020A0  6E41               	movwf	___flmul@a+1,c
  1247  0020A2  0EA0               	movlw	160
  1248  0020A4  6E42               	movwf	___flmul@a+2,c
  1249  0020A6  0E3B               	movlw	59
  1250  0020A8  6E43               	movwf	___flmul@a+3,c
  1251  0020AA  ECBA  F008         	call	___flmul	;wreg free
  1252  0020AE  C03C  F0F1         	movff	?___flmul,Mode2@voltage
  1253  0020B2  C03D  F0F2         	movff	?___flmul+1,Mode2@voltage+1
  1254  0020B6  C03E  F0F3         	movff	?___flmul+2,Mode2@voltage+2
  1255  0020BA  C03F  F0F4         	movff	?___flmul+3,Mode2@voltage+3
  1256                           
  1257                           ;main.c: 37: char res[20];
  1258                           ;main.c: 38: sprintf(res,"%f",voltage);
  1259  0020BE  0EDD               	movlw	low Mode2@res
  1260  0020C0  0100               	movlb	0	; () banked
  1261  0020C2  6FBA               	movwf	sprintf@sp& (0+255),b
  1262  0020C4  0E00               	movlw	high Mode2@res
  1263  0020C6  6FBB               	movwf	(sprintf@sp+1)& (0+255),b
  1264  0020C8  0E9E               	movlw	low STR_2
  1265  0020CA  6FBC               	movwf	sprintf@f& (0+255),b
  1266  0020CC  0E06               	movlw	high STR_2
  1267  0020CE  6FBD               	movwf	(sprintf@f+1)& (0+255),b
  1268  0020D0  C0F1  F0BE         	movff	Mode2@voltage,?_sprintf+4
  1269  0020D4  C0F2  F0BF         	movff	Mode2@voltage+1,?_sprintf+5
  1270  0020D8  C0F3  F0C0         	movff	Mode2@voltage+2,?_sprintf+6
  1271  0020DC  C0F4  F0C1         	movff	Mode2@voltage+3,?_sprintf+7
  1272  0020E0  EC51  F003         	call	_sprintf	;wreg free
  1273                           
  1274                           ;main.c: 39: UART_Write_Text(res);
  1275  0020E4  0EDD               	movlw	low Mode2@res
  1276  0020E6  6E2F               	movwf	UART_Write_Text@text,c
  1277  0020E8  0E00               	movlw	high Mode2@res
  1278  0020EA  6E30               	movwf	UART_Write_Text@text+1,c
  1279  0020EC  EC51  F011         	call	_UART_Write_Text	;wreg free
  1280  0020F0                     l154:
  1281                           
  1282                           ;main.c: 40: }
  1283                           ;main.c: 44: }
  1284                           ;main.c: 46: ClearBuffer();
  1285  0020F0  EC97  F012         	call	_ClearBuffer	;wreg free
  1286  0020F4  0012               	return		;funcret
  1287  0020F6                     __end_of_Mode2:
  1288                           	opt stack 0
  1289                           tblptru	equ	0xFF8
  1290                           intcon	equ	0xFF2
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postinc2	equ	0xFDE
  1294                           fsr2h	equ	0xFDA
  1295                           fsr2l	equ	0xFD9
  1296                           status	equ	0xFD8
  1297                           
  1298 ;; *************** function _sprintf *****************
  1299 ;; Defined at:
  1300 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  sp              2   58[BANK0 ] PTR unsigned char 
  1303 ;;		 -> Mode2@res(20), 
  1304 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  1305 ;;		 -> STR_2(3), 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  fval            4   88[BANK0 ] PTR const unsigned char 
  1308 ;;  tmpval          4   84[BANK0 ] struct .
  1309 ;;  val             4   78[BANK0 ] unsigned long 
  1310 ;;  cp              3    0        PTR const unsigned char 
  1311 ;;  exp             2   82[BANK0 ] int 
  1312 ;;  prec            2   76[BANK0 ] int 
  1313 ;;  flag            2   74[BANK0 ] unsigned short 
  1314 ;;  ap              2   72[BANK0 ] PTR void [1]
  1315 ;;		 -> ?_sprintf(2), 
  1316 ;;  len             2    0        unsigned int 
  1317 ;;  width           2    0        int 
  1318 ;;  c               1   92[BANK0 ] char 
  1319 ;;  d               1    0        unsigned char 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  2   58[BANK0 ] int 
  1322 ;; Registers used:
  1323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1329 ;;      Params:         0       8       0       0       0       0       0
  1330 ;;      Locals:         0      25       0       0       0       0       0
  1331 ;;      Temps:          0       2       0       0       0       0       0
  1332 ;;      Totals:         0      35       0       0       0       0       0
  1333 ;;Total ram usage:       35 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    6
  1336 ;; This function calls:
  1337 ;;		___awdiv
  1338 ;;		___fladd
  1339 ;;		___flge
  1340 ;;		___flmul
  1341 ;;		___flneg
  1342 ;;		___flsub
  1343 ;;		___fltol
  1344 ;;		___lldiv
  1345 ;;		___llmod
  1346 ;;		___wmul
  1347 ;;		___xxtofl
  1348 ;;		__div_to_l_
  1349 ;;		__tdiv_to_l_
  1350 ;;		_fround
  1351 ;;		_scale
  1352 ;; This function is called by:
  1353 ;;		_Mode2
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text7
  1358  0006A2                     __ptext7:
  1359                           	opt stack 0
  1360  0006A2                     _sprintf:
  1361                           	opt stack 23
  1362                           
  1363                           ;doprnt.c: 494: va_list ap;
  1364                           ;doprnt.c: 499: signed char c;
  1365                           ;doprnt.c: 501: int width;
  1366                           ;doprnt.c: 504: int prec;
  1367                           ;doprnt.c: 508: unsigned short flag;
  1368                           ;doprnt.c: 515: char d;
  1369                           ;doprnt.c: 516: double fval;
  1370                           ;doprnt.c: 517: int exp;
  1371                           ;doprnt.c: 523: union {
  1372                           ;doprnt.c: 524: unsigned long vd;
  1373                           ;doprnt.c: 525: double integ;
  1374                           ;doprnt.c: 526: } tmpval;
  1375                           ;doprnt.c: 528: unsigned long val;
  1376                           ;doprnt.c: 529: unsigned len;
  1377                           ;doprnt.c: 530: const char * cp;
  1378                           ;doprnt.c: 533: *ap = __va_start();
  1379                           
  1380                           ;incstack = 0
  1381  0006A2  0EBE               	movlw	low (?_sprintf+4)
  1382  0006A4  0100               	movlb	0	; () banked
  1383  0006A6  6FC8               	movwf	sprintf@ap& (0+255),b
  1384  0006A8  0E00               	movlw	high (?_sprintf+4)
  1385  0006AA  6FC9               	movwf	(sprintf@ap+1)& (0+255),b
  1386                           
  1387                           ;doprnt.c: 536: while(c = *f++) {
  1388  0006AC  D328               	goto	l251
  1389  0006AE                     
  1390                           ; BSR set to: 0
  1391                           ;doprnt.c: 538: if(c != '%')
  1392                           
  1393                           ; BSR set to: 0
  1394  0006AE  0E25               	movlw	37
  1395  0006B0  19DC               	xorwf	sprintf@c& (0+255),w,b
  1396  0006B2  B4D8               	btfsc	status,2,c
  1397  0006B4  D007               	goto	l207
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;doprnt.c: 540: {
  1401                           ;doprnt.c: 541: ((*sp++ = (c)));
  1402  0006B6  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  1403  0006BA  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  1404  0006BE  C0DC  FFDF         	movff	sprintf@c,indf2
  1405  0006C2  D31B               	goto	l3843
  1406  0006C4                     l207:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 543: }
  1410                           ;doprnt.c: 548: flag = 0;
  1411                           
  1412                           ; BSR set to: 0
  1413  0006C4  0E00               	movlw	0
  1414  0006C6  6FCB               	movwf	(sprintf@flag+1)& (0+255),b
  1415  0006C8  0E00               	movlw	0
  1416  0006CA  6FCA               	movwf	sprintf@flag& (0+255),b
  1417                           
  1418                           ;doprnt.c: 635: switch(c = *f++) {
  1419  0006CC  D002               	goto	l208
  1420  0006CE                     
  1421                           ; BSR set to: 0
  1422                           ;doprnt.c: 663: flag |= 0x400;
  1423                           
  1424                           ; BSR set to: 0
  1425  0006CE  85CB               	bsf	(sprintf@flag+1)& (0+255),2,b
  1426                           
  1427                           ;doprnt.c: 664: break;
  1428  0006D0  D011               	goto	l212
  1429  0006D2                     l208:
  1430                           
  1431                           ; BSR set to: 0
  1432                           
  1433                           ; BSR set to: 0
  1434  0006D2  C0BC  FFF6         	movff	sprintf@f,tblptrl
  1435  0006D6  C0BD  FFF7         	movff	sprintf@f+1,tblptrh
  1436  0006DA  4BBC               	infsnz	sprintf@f& (0+255),f,b
  1437  0006DC  2BBD               	incf	(sprintf@f+1)& (0+255),f,b
  1438  0006DE                     	if	0	;tblptru may be non-zero
  1439  0006DE                     	endif
  1440  0006DE                     	if	0	;tblptru may be non-zero
  1441  0006DE                     	endif
  1442  0006DE  0008               	tblrd		*
  1443  0006E0  CFF5 F0DC          	movff	tablat,sprintf@c
  1444  0006E4  51DC               	movf	sprintf@c& (0+255),w,b
  1445                           
  1446                           ; Switch size 1, requested type "space"
  1447                           ; Number of cases is 2, Range of values is 0 to 102
  1448                           ; switch strategies available:
  1449                           ; Name         Instructions Cycles
  1450                           ; simple_byte            7     4 (average)
  1451                           ;	Chosen strategy is simple_byte
  1452  0006E6  0A00               	xorlw	0	; case 0
  1453  0006E8  B4D8               	btfsc	status,2,c
  1454  0006EA  D315               	goto	u4420
  1455  0006EC  0A66               	xorlw	102	; case 102
  1456  0006EE  B4D8               	btfsc	status,2,c
  1457  0006F0  D7EE               	goto	l211
  1458  0006F2  D305               	goto	l251
  1459  0006F4                     l212:
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;doprnt.c: 825: if(flag & (0x700)) {
  1463                           
  1464                           ; BSR set to: 0
  1465  0006F4  0E07               	movlw	7
  1466  0006F6  15CB               	andwf	(sprintf@flag+1)& (0+255),w,b
  1467  0006F8  B4D8               	btfsc	status,2,c
  1468  0006FA  D2EF               	goto	l214
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 829: prec = 6;
  1472  0006FC  0E00               	movlw	0
  1473  0006FE  6FCD               	movwf	(sprintf@prec+1)& (0+255),b
  1474  000700  0E06               	movlw	6
  1475  000702  6FCC               	movwf	sprintf@prec& (0+255),b
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1479  000704  C0C8  FFD9         	movff	sprintf@ap,fsr2l
  1480  000708  C0C9  FFDA         	movff	sprintf@ap+1,fsr2h
  1481  00070C  CFDE F0D8          	movff	postinc2,sprintf@fval
  1482  000710  CFDE F0D9          	movff	postinc2,sprintf@fval+1
  1483  000714  CFDE F0DA          	movff	postinc2,sprintf@fval+2
  1484  000718  CFDE F0DB          	movff	postinc2,sprintf@fval+3
  1485                           
  1486                           ; BSR set to: 0
  1487  00071C  0E04               	movlw	4
  1488  00071E  27C8               	addwf	sprintf@ap& (0+255),f,b
  1489  000720  0E00               	movlw	0
  1490  000722  23C9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;doprnt.c: 831: if(fval < 0.0) {
  1494  000724  AFDB               	btfss	(sprintf@fval+3)& (0+255),7,b
  1495  000726  D015               	goto	l215
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;doprnt.c: 832: fval = -fval;
  1499  000728  C0D8  F02E         	movff	sprintf@fval,___flneg@f1
  1500  00072C  C0D9  F02F         	movff	sprintf@fval+1,___flneg@f1+1
  1501  000730  C0DA  F030         	movff	sprintf@fval+2,___flneg@f1+2
  1502  000734  C0DB  F031         	movff	sprintf@fval+3,___flneg@f1+3
  1503  000738  ECCB  F012         	call	___flneg	;wreg free
  1504  00073C  C02E  F0D8         	movff	?___flneg,sprintf@fval
  1505  000740  C02F  F0D9         	movff	?___flneg+1,sprintf@fval+1
  1506  000744  C030  F0DA         	movff	?___flneg+2,sprintf@fval+2
  1507  000748  C031  F0DB         	movff	?___flneg+3,sprintf@fval+3
  1508                           
  1509                           ;doprnt.c: 833: flag |= 0x03;
  1510  00074C  0E03               	movlw	3
  1511  00074E  0100               	movlb	0	; () banked
  1512  000750  13CA               	iorwf	sprintf@flag& (0+255),f,b
  1513  000752                     l215:
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;doprnt.c: 834: }
  1517                           ;doprnt.c: 835: exp = 0;
  1518                           
  1519                           ; BSR set to: 0
  1520  000752  0E00               	movlw	0
  1521  000754  6FD3               	movwf	(sprintf@exp+1)& (0+255),b
  1522  000756  0E00               	movlw	0
  1523  000758  6FD2               	movwf	sprintf@exp& (0+255),b
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;doprnt.c: 836: if( fval!=0) {
  1527  00075A  51D8               	movf	sprintf@fval& (0+255),w,b
  1528  00075C  11D9               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1529  00075E  11DA               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1530  000760  11DB               	iorwf	(sprintf@fval+3)& (0+255),w,b
  1531  000762  B4D8               	btfsc	status,2,c
  1532  000764  D082               	goto	l220
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  1536  000766  35DA               	rlcf	(sprintf@fval+2)& (0+255),w,b
  1537  000768  35DB               	rlcf	(sprintf@fval+3)& (0+255),w,b
  1538  00076A  0F82               	addlw	130
  1539  00076C  6FD2               	movwf	sprintf@exp& (0+255),b
  1540  00076E  6BD3               	clrf	(sprintf@exp+1)& (0+255),b
  1541  000770  0EFF               	movlw	255
  1542  000772  23D3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;doprnt.c: 838: exp--;
  1546  000774  07D2               	decf	sprintf@exp& (0+255),f,b
  1547  000776  A0D8               	btfss	status,0,c
  1548  000778  07D3               	decf	(sprintf@exp+1)& (0+255),f,b
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;doprnt.c: 839: exp *= 3;
  1552  00077A  C0D2  F02E         	movff	sprintf@exp,___wmul@multiplier
  1553  00077E  C0D3  F02F         	movff	sprintf@exp+1,___wmul@multiplier+1
  1554  000782  0E00               	movlw	0
  1555  000784  6E31               	movwf	___wmul@multiplicand+1,c
  1556  000786  0E03               	movlw	3
  1557  000788  6E30               	movwf	___wmul@multiplicand,c
  1558  00078A  ECE2  F012         	call	___wmul	;wreg free
  1559  00078E  C02E  F0D2         	movff	?___wmul,sprintf@exp
  1560  000792  C02F  F0D3         	movff	?___wmul+1,sprintf@exp+1
  1561                           
  1562                           ;doprnt.c: 840: exp /= 10;
  1563  000796  C0D2  F034         	movff	sprintf@exp,___awdiv@dividend
  1564  00079A  C0D3  F035         	movff	sprintf@exp+1,___awdiv@dividend+1
  1565  00079E  0E00               	movlw	0
  1566  0007A0  6E37               	movwf	___awdiv@divisor+1,c
  1567  0007A2  0E0A               	movlw	10
  1568  0007A4  6E36               	movwf	___awdiv@divisor,c
  1569  0007A6  ECCE  F010         	call	___awdiv	;wreg free
  1570  0007AA  C034  F0D2         	movff	?___awdiv,sprintf@exp
  1571  0007AE  C035  F0D3         	movff	?___awdiv+1,sprintf@exp+1
  1572                           
  1573                           ;doprnt.c: 841: if(exp < 0)
  1574  0007B2  0100               	movlb	0	; () banked
  1575  0007B4  AFD3               	btfss	(sprintf@exp+1)& (0+255),7,b
  1576  0007B6  D003               	goto	l217
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;doprnt.c: 842: exp--;
  1580  0007B8  07D2               	decf	sprintf@exp& (0+255),f,b
  1581  0007BA  A0D8               	btfss	status,0,c
  1582  0007BC  07D3               	decf	(sprintf@exp+1)& (0+255),f,b
  1583  0007BE                     l217:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1587                           
  1588                           ; BSR set to: 0
  1589  0007BE  51D2               	movf	sprintf@exp& (0+255),w,b
  1590  0007C0  0800               	sublw	0
  1591  0007C2  EC92  F006         	call	_scale
  1592  0007C6  C091  F0D4         	movff	?_scale,sprintf@tmpval
  1593  0007CA  C092  F0D5         	movff	?_scale+1,sprintf@tmpval+1
  1594  0007CE  C093  F0D6         	movff	?_scale+2,sprintf@tmpval+2
  1595  0007D2  C094  F0D7         	movff	?_scale+3,sprintf@tmpval+3
  1596                           
  1597                           ;doprnt.c: 847: tmpval.integ *= fval;
  1598  0007D6  C0D4  F03C         	movff	sprintf@tmpval,___flmul@b
  1599  0007DA  C0D5  F03D         	movff	sprintf@tmpval+1,___flmul@b+1
  1600  0007DE  C0D6  F03E         	movff	sprintf@tmpval+2,___flmul@b+2
  1601  0007E2  C0D7  F03F         	movff	sprintf@tmpval+3,___flmul@b+3
  1602  0007E6  C0D8  F040         	movff	sprintf@fval,___flmul@a
  1603  0007EA  C0D9  F041         	movff	sprintf@fval+1,___flmul@a+1
  1604  0007EE  C0DA  F042         	movff	sprintf@fval+2,___flmul@a+2
  1605  0007F2  C0DB  F043         	movff	sprintf@fval+3,___flmul@a+3
  1606  0007F6  ECBA  F008         	call	___flmul	;wreg free
  1607  0007FA  C03C  F0D4         	movff	?___flmul,sprintf@tmpval
  1608  0007FE  C03D  F0D5         	movff	?___flmul+1,sprintf@tmpval+1
  1609  000802  C03E  F0D6         	movff	?___flmul+2,sprintf@tmpval+2
  1610  000806  C03F  F0D7         	movff	?___flmul+3,sprintf@tmpval+3
  1611                           
  1612                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1613  00080A  C0D4  F02E         	movff	sprintf@tmpval,___flge@ff1
  1614  00080E  C0D5  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  1615  000812  C0D6  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  1616  000816  C0D7  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  1617  00081A  0E00               	movlw	0
  1618  00081C  6E32               	movwf	___flge@ff2,c
  1619  00081E  0E00               	movlw	0
  1620  000820  6E33               	movwf	___flge@ff2+1,c
  1621  000822  0E80               	movlw	128
  1622  000824  6E34               	movwf	___flge@ff2+2,c
  1623  000826  0E3F               	movlw	63
  1624  000828  6E35               	movwf	___flge@ff2+3,c
  1625  00082A  EC20  F00F         	call	___flge	;wreg free
  1626  00082E  B0D8               	btfsc	status,0,c
  1627  000830  D005               	goto	l218
  1628                           
  1629                           ;doprnt.c: 849: exp--;
  1630  000832  0100               	movlb	0	; () banked
  1631  000834  07D2               	decf	sprintf@exp& (0+255),f,b
  1632  000836  A0D8               	btfss	status,0,c
  1633  000838  07D3               	decf	(sprintf@exp+1)& (0+255),f,b
  1634  00083A  D017               	goto	l220
  1635  00083C                     l218:
  1636                           
  1637                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1638                           
  1639                           ; BSR set to: 0
  1640  00083C  C0D4  F02E         	movff	sprintf@tmpval,___flge@ff1
  1641  000840  C0D5  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  1642  000844  C0D6  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  1643  000848  C0D7  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  1644  00084C  0E00               	movlw	0
  1645  00084E  6E32               	movwf	___flge@ff2,c
  1646  000850  0E00               	movlw	0
  1647  000852  6E33               	movwf	___flge@ff2+1,c
  1648  000854  0E20               	movlw	32
  1649  000856  6E34               	movwf	___flge@ff2+2,c
  1650  000858  0E41               	movlw	65
  1651  00085A  6E35               	movwf	___flge@ff2+3,c
  1652  00085C  EC20  F00F         	call	___flge	;wreg free
  1653  000860  A0D8               	btfss	status,0,c
  1654  000862  D003               	goto	l220
  1655                           
  1656                           ;doprnt.c: 851: exp++;
  1657  000864  0100               	movlb	0	; () banked
  1658  000866  4BD2               	infsnz	sprintf@exp& (0+255),f,b
  1659  000868  2BD3               	incf	(sprintf@exp+1)& (0+255),f,b
  1660  00086A                     l220:
  1661                           
  1662                           ;doprnt.c: 852: }
  1663                           ;doprnt.c: 1112: if(prec <= 12)
  1664                           
  1665                           ; BSR set to: 0
  1666                           
  1667                           ; BSR set to: 0
  1668                           
  1669                           ; BSR set to: 0
  1670  00086A  0100               	movlb	0	; () banked
  1671  00086C  BFCD               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1672  00086E  D006               	goto	u4250
  1673  000870  51CD               	movf	(sprintf@prec+1)& (0+255),w,b
  1674  000872  E121               	bnz	l3739
  1675  000874  0E0D               	movlw	13
  1676  000876  5DCC               	subwf	sprintf@prec& (0+255),w,b
  1677  000878  B0D8               	btfsc	status,0,c
  1678  00087A  D01D               	goto	l221
  1679  00087C                     u4250:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;doprnt.c: 1113: fval += fround(prec);
  1683  00087C  C0D8  F09E         	movff	sprintf@fval,___fladd@b
  1684  000880  C0D9  F09F         	movff	sprintf@fval+1,___fladd@b+1
  1685  000884  C0DA  F0A0         	movff	sprintf@fval+2,___fladd@b+2
  1686  000888  C0DB  F0A1         	movff	sprintf@fval+3,___fladd@b+3
  1687  00088C  51CC               	movf	sprintf@prec& (0+255),w,b
  1688  00088E  EC02  F00C         	call	_fround
  1689  000892  C091  F0A2         	movff	?_fround,___fladd@a
  1690  000896  C092  F0A3         	movff	?_fround+1,___fladd@a+1
  1691  00089A  C093  F0A4         	movff	?_fround+2,___fladd@a+2
  1692  00089E  C094  F0A5         	movff	?_fround+3,___fladd@a+3
  1693  0008A2  EC63  F00A         	call	___fladd	;wreg free
  1694  0008A6  C09E  F0D8         	movff	?___fladd,sprintf@fval
  1695  0008AA  C09F  F0D9         	movff	?___fladd+1,sprintf@fval+1
  1696  0008AE  C0A0  F0DA         	movff	?___fladd+2,sprintf@fval+2
  1697  0008B2  C0A1  F0DB         	movff	?___fladd+3,sprintf@fval+3
  1698  0008B6                     l221:
  1699  0008B6                     l3739:
  1700                           
  1701                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1702  0008B6  0100               	movlb	0	; () banked
  1703  0008B8  BFD3               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1704  0008BA  D006               	goto	u4260
  1705  0008BC  51D3               	movf	(sprintf@exp+1)& (0+255),w,b
  1706  0008BE  E122               	bnz	l3747
  1707  0008C0  0E0A               	movlw	10
  1708  0008C2  5DD2               	subwf	sprintf@exp& (0+255),w,b
  1709  0008C4  B0D8               	btfsc	status,0,c
  1710  0008C6  D01E               	goto	u4290
  1711  0008C8                     u4260:
  1712                           
  1713                           ; BSR set to: 0
  1714  0008C8  51D8               	movf	sprintf@fval& (0+255),w,b
  1715  0008CA  11D9               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1716  0008CC  11DA               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1717  0008CE  11DB               	iorwf	(sprintf@fval+3)& (0+255),w,b
  1718  0008D0  B4D8               	btfsc	status,2,c
  1719  0008D2  D063               	goto	l222
  1720                           
  1721                           ; BSR set to: 0
  1722  0008D4  C0D8  F09A         	movff	sprintf@fval,___fltol@f1
  1723  0008D8  C0D9  F09B         	movff	sprintf@fval+1,___fltol@f1+1
  1724  0008DC  C0DA  F09C         	movff	sprintf@fval+2,___fltol@f1+2
  1725  0008E0  C0DB  F09D         	movff	sprintf@fval+3,___fltol@f1+3
  1726  0008E4  ECB0  F00F         	call	___fltol	;wreg free
  1727  0008E8  0100               	movlb	0	; () banked
  1728  0008EA  519A               	movf	?___fltol& (0+255),w,b
  1729  0008EC  119B               	iorwf	(?___fltol+1)& (0+255),w,b
  1730  0008EE  119C               	iorwf	(?___fltol+2)& (0+255),w,b
  1731  0008F0  119D               	iorwf	(?___fltol+3)& (0+255),w,b
  1732  0008F2  B4D8               	btfsc	status,2,c
  1733                           
  1734                           ; BSR set to: 0
  1735  0008F4  BFD3               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1736  0008F6  D051               	goto	l222
  1737  0008F8  51D3               	movf	(sprintf@exp+1)& (0+255),w,b
  1738  0008FA  E104               	bnz	l3747
  1739  0008FC  0E02               	movlw	2
  1740  0008FE  5DD2               	subwf	sprintf@exp& (0+255),w,b
  1741  000900  A0D8               	btfss	status,0,c
  1742  000902  D04B               	goto	l222
  1743  000904                     u4290:
  1744  000904                     l3747:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1748  000904  C0D4  F02E         	movff	sprintf@tmpval,___flge@ff1
  1749  000908  C0D5  F02F         	movff	sprintf@tmpval+1,___flge@ff1+1
  1750  00090C  C0D6  F030         	movff	sprintf@tmpval+2,___flge@ff1+2
  1751  000910  C0D7  F031         	movff	sprintf@tmpval+3,___flge@ff1+3
  1752  000914  0E5F               	movlw	95
  1753  000916  6E32               	movwf	___flge@ff2,c
  1754  000918  0E70               	movlw	112
  1755  00091A  6E33               	movwf	___flge@ff2+1,c
  1756  00091C  0E89               	movlw	137
  1757  00091E  6E34               	movwf	___flge@ff2+2,c
  1758  000920  0E40               	movlw	64
  1759  000922  6E35               	movwf	___flge@ff2+3,c
  1760  000924  EC20  F00F         	call	___flge	;wreg free
  1761  000928  B0D8               	btfsc	status,0,c
  1762  00092A  D003               	goto	l225
  1763                           
  1764                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1765  00092C  0100               	movlb	0	; () banked
  1766  00092E  0EF7               	movlw	247
  1767  000930  D002               	goto	L1
  1768  000932                     l225:
  1769                           
  1770                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1771                           
  1772                           ; BSR set to: 0
  1773  000932  0100               	movlb	0	; () banked
  1774  000934  0EF8               	movlw	248
  1775  000936                     L1:
  1776  000936  27D2               	addwf	sprintf@exp& (0+255),f,b
  1777  000938  0EFF               	movlw	255
  1778  00093A  23D3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1782                           
  1783                           ; BSR set to: 0
  1784  00093C  51D2               	movf	sprintf@exp& (0+255),w,b
  1785  00093E  EC92  F006         	call	_scale
  1786  000942  C091  F0D4         	movff	?_scale,sprintf@tmpval
  1787  000946  C092  F0D5         	movff	?_scale+1,sprintf@tmpval+1
  1788  00094A  C093  F0D6         	movff	?_scale+2,sprintf@tmpval+2
  1789  00094E  C094  F0D7         	movff	?_scale+3,sprintf@tmpval+3
  1790  000952  C0D8  F02E         	movff	sprintf@fval,__div_to_l_@f1
  1791  000956  C0D9  F02F         	movff	sprintf@fval+1,__div_to_l_@f1+1
  1792  00095A  C0DA  F030         	movff	sprintf@fval+2,__div_to_l_@f1+2
  1793  00095E  C0DB  F031         	movff	sprintf@fval+3,__div_to_l_@f1+3
  1794  000962  C0D4  F032         	movff	sprintf@tmpval,__div_to_l_@f2
  1795  000966  C0D5  F033         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  1796  00096A  C0D6  F034         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  1797  00096E  C0D7  F035         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  1798  000972  EC8C  F00E         	call	__div_to_l_	;wreg free
  1799  000976  C02E  F0CE         	movff	?__div_to_l_,sprintf@val
  1800  00097A  C02F  F0CF         	movff	?__div_to_l_+1,sprintf@val+1
  1801  00097E  C030  F0D0         	movff	?__div_to_l_+2,sprintf@val+2
  1802  000982  C031  F0D1         	movff	?__div_to_l_+3,sprintf@val+3
  1803                           
  1804                           ;doprnt.c: 1129: fval = 0.0;
  1805  000986  0E00               	movlw	0
  1806  000988  0100               	movlb	0	; () banked
  1807  00098A  6FD8               	movwf	sprintf@fval& (0+255),b
  1808  00098C  0E00               	movlw	0
  1809  00098E  6FD9               	movwf	(sprintf@fval+1)& (0+255),b
  1810  000990  0E00               	movlw	0
  1811  000992  6FDA               	movwf	(sprintf@fval+2)& (0+255),b
  1812  000994  0E00               	movlw	0
  1813  000996  6FDB               	movwf	(sprintf@fval+3)& (0+255),b
  1814                           
  1815                           ;doprnt.c: 1130: } else {
  1816  000998  D03C               	goto	l231
  1817  00099A                     l222:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1821                           
  1822                           ; BSR set to: 0
  1823  00099A  C0D8  F09A         	movff	sprintf@fval,___fltol@f1
  1824  00099E  C0D9  F09B         	movff	sprintf@fval+1,___fltol@f1+1
  1825  0009A2  C0DA  F09C         	movff	sprintf@fval+2,___fltol@f1+2
  1826  0009A6  C0DB  F09D         	movff	sprintf@fval+3,___fltol@f1+3
  1827  0009AA  ECB0  F00F         	call	___fltol	;wreg free
  1828  0009AE  C09A  F0CE         	movff	?___fltol,sprintf@val
  1829  0009B2  C09B  F0CF         	movff	?___fltol+1,sprintf@val+1
  1830  0009B6  C09C  F0D0         	movff	?___fltol+2,sprintf@val+2
  1831  0009BA  C09D  F0D1         	movff	?___fltol+3,sprintf@val+3
  1832                           
  1833                           ;doprnt.c: 1132: fval -= (double)val;
  1834  0009BE  C0D8  F0B2         	movff	sprintf@fval,___flsub@b
  1835  0009C2  C0D9  F0B3         	movff	sprintf@fval+1,___flsub@b+1
  1836  0009C6  C0DA  F0B4         	movff	sprintf@fval+2,___flsub@b+2
  1837  0009CA  C0DB  F0B5         	movff	sprintf@fval+3,___flsub@b+3
  1838  0009CE  C0CE  F02E         	movff	sprintf@val,___xxtofl@val
  1839  0009D2  C0CF  F02F         	movff	sprintf@val+1,___xxtofl@val+1
  1840  0009D6  C0D0  F030         	movff	sprintf@val+2,___xxtofl@val+2
  1841  0009DA  C0D1  F031         	movff	sprintf@val+3,___xxtofl@val+3
  1842  0009DE  0E00               	movlw	0
  1843  0009E0  EC4B  F00D         	call	___xxtofl
  1844  0009E4  C02E  F0B6         	movff	?___xxtofl,___flsub@a
  1845  0009E8  C02F  F0B7         	movff	?___xxtofl+1,___flsub@a+1
  1846  0009EC  C030  F0B8         	movff	?___xxtofl+2,___flsub@a+2
  1847  0009F0  C031  F0B9         	movff	?___xxtofl+3,___flsub@a+3
  1848  0009F4  EC51  F012         	call	___flsub	;wreg free
  1849  0009F8  C0B2  F0D8         	movff	?___flsub,sprintf@fval
  1850  0009FC  C0B3  F0D9         	movff	?___flsub+1,sprintf@fval+1
  1851  000A00  C0B4  F0DA         	movff	?___flsub+2,sprintf@fval+2
  1852  000A04  C0B5  F0DB         	movff	?___flsub+3,sprintf@fval+3
  1853                           
  1854                           ;doprnt.c: 1133: exp = 0;
  1855  000A08  0E00               	movlw	0
  1856  000A0A  0100               	movlb	0	; () banked
  1857  000A0C  6FD3               	movwf	(sprintf@exp+1)& (0+255),b
  1858  000A0E  0E00               	movlw	0
  1859  000A10  6FD2               	movwf	sprintf@exp& (0+255),b
  1860  000A12                     l231:
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;doprnt.c: 1134: }
  1864                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1865                           
  1866                           ; BSR set to: 0
  1867  000A12  0E01               	movlw	1
  1868  000A14  6FDC               	movwf	sprintf@c& (0+255),b
  1869  000A16                     l3767:
  1870                           
  1871                           ; BSR set to: 0
  1872  000A16  0E0A               	movlw	10
  1873  000A18  19DC               	xorwf	sprintf@c& (0+255),w,b
  1874  000A1A  B4D8               	btfsc	status,2,c
  1875  000A1C  D018               	goto	u4330
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;doprnt.c: 1137: if(val < dpowers[c])
  1879                           
  1880                           ; BSR set to: 0
  1881                           
  1882                           ; BSR set to: 0
  1883  000A1E  51DC               	movf	sprintf@c& (0+255),w,b
  1884  000A20  0D04               	mullw	4
  1885  000A22  0E69               	movlw	low _dpowers
  1886  000A24  24F3               	addwf	prodl,w,c
  1887  000A26  6EF6               	movwf	tblptrl,c
  1888  000A28  0E06               	movlw	high _dpowers
  1889  000A2A  20F4               	addwfc	prodh,w,c
  1890  000A2C  6EF7               	movwf	tblptrh,c
  1891  000A2E                     	if	0	;There are less than 3 active tblptr bytes
  1892  000A2E                     	endif
  1893  000A2E  0009               	tblrd		*+
  1894  000A30  50F5               	movf	tablat,w,c
  1895  000A32  5DCE               	subwf	sprintf@val& (0+255),w,b
  1896  000A34  0009               	tblrd		*+
  1897  000A36  50F5               	movf	tablat,w,c
  1898  000A38  59CF               	subwfb	(sprintf@val+1)& (0+255),w,b
  1899  000A3A  0009               	tblrd		*+
  1900  000A3C  50F5               	movf	tablat,w,c
  1901  000A3E  59D0               	subwfb	(sprintf@val+2)& (0+255),w,b
  1902  000A40  0009               	tblrd		*+
  1903  000A42  50F5               	movf	tablat,w,c
  1904  000A44  59D1               	subwfb	(sprintf@val+3)& (0+255),w,b
  1905  000A46  A0D8               	btfss	status,0,c
  1906  000A48  D002               	goto	u4330
  1907                           
  1908                           ; BSR set to: 0
  1909                           
  1910                           ; BSR set to: 0
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;doprnt.c: 1138: break;
  1914  000A4A  2BDC               	incf	sprintf@c& (0+255),f,b
  1915  000A4C  D7E4               	goto	l3767
  1916  000A4E                     u4330:
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;doprnt.c: 1175: {
  1920                           ;doprnt.c: 1188: if(flag & 0x03)
  1921                           
  1922                           ; BSR set to: 0
  1923  000A4E  0E03               	movlw	3
  1924  000A50  15CA               	andwf	sprintf@flag& (0+255),w,b
  1925  000A52  6FC2               	movwf	??_sprintf& (0+255),b
  1926  000A54  0E00               	movlw	0
  1927  000A56  15CB               	andwf	(sprintf@flag+1)& (0+255),w,b
  1928  000A58  6FC3               	movwf	(??_sprintf+1)& (0+255),b
  1929  000A5A  51C2               	movf	??_sprintf& (0+255),w,b
  1930  000A5C  11C3               	iorwf	(??_sprintf+1)& (0+255),w,b
  1931  000A5E  B4D8               	btfsc	status,2,c
  1932  000A60  D050               	goto	l236
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1936  000A62  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  1937  000A66  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  1938  000A6A  0E2D               	movlw	45
  1939  000A6C  D047               	goto	L2
  1940  000A6E                     
  1941                           ; BSR set to: 0
  1942                           ;doprnt.c: 1200: {
  1943                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1944                           
  1945                           ; BSR set to: 0
  1946  000A6E  C0CE  F02E         	movff	sprintf@val,___lldiv@dividend
  1947  000A72  C0CF  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  1948  000A76  C0D0  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  1949  000A7A  C0D1  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  1950  000A7E  51DC               	movf	sprintf@c& (0+255),w,b
  1951  000A80  0D04               	mullw	4
  1952  000A82  0E69               	movlw	low _dpowers
  1953  000A84  24F3               	addwf	prodl,w,c
  1954  000A86  6EF6               	movwf	tblptrl,c
  1955  000A88  0E06               	movlw	high _dpowers
  1956  000A8A  20F4               	addwfc	prodh,w,c
  1957  000A8C  6EF7               	movwf	tblptrh,c
  1958  000A8E                     	if	0	;There are less than 3 active tblptr bytes
  1959  000A8E                     	endif
  1960  000A8E  0009               	tblrd		*+
  1961  000A90  CFF5 F032          	movff	tablat,___lldiv@divisor
  1962  000A94  0009               	tblrd		*+
  1963  000A96  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  1964  000A9A  0009               	tblrd		*+
  1965  000A9C  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  1966  000AA0  000A               	tblrd		*-
  1967  000AA2  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  1968  000AA6  EC10  F011         	call	___lldiv	;wreg free
  1969  000AAA  C02E  F0D4         	movff	?___lldiv,sprintf@tmpval
  1970  000AAE  C02F  F0D5         	movff	?___lldiv+1,sprintf@tmpval+1
  1971  000AB2  C030  F0D6         	movff	?___lldiv+2,sprintf@tmpval+2
  1972  000AB6  C031  F0D7         	movff	?___lldiv+3,sprintf@tmpval+3
  1973                           
  1974                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1975  000ABA  C0D4  F02E         	movff	sprintf@tmpval,___llmod@dividend
  1976  000ABE  C0D5  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1977  000AC2  C0D6  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1978  000AC6  C0D7  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1979  000ACA  0E0A               	movlw	10
  1980  000ACC  6E32               	movwf	___llmod@divisor,c
  1981  000ACE  0E00               	movlw	0
  1982  000AD0  6E33               	movwf	___llmod@divisor+1,c
  1983  000AD2  0E00               	movlw	0
  1984  000AD4  6E34               	movwf	___llmod@divisor+2,c
  1985  000AD6  0E00               	movlw	0
  1986  000AD8  6E35               	movwf	___llmod@divisor+3,c
  1987  000ADA  ECFA  F011         	call	___llmod	;wreg free
  1988  000ADE  C02E  F0D4         	movff	?___llmod,sprintf@tmpval
  1989  000AE2  C02F  F0D5         	movff	?___llmod+1,sprintf@tmpval+1
  1990  000AE6  C030  F0D6         	movff	?___llmod+2,sprintf@tmpval+2
  1991  000AEA  C031  F0D7         	movff	?___llmod+3,sprintf@tmpval+3
  1992                           
  1993                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1994  000AEE  0100               	movlb	0	; () banked
  1995  000AF0  51D4               	movf	sprintf@tmpval& (0+255),w,b
  1996  000AF2  0F30               	addlw	48
  1997  000AF4  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  1998  000AF8  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  1999  000AFC                     L2:
  2000  000AFC  6EDF               	movwf	indf2,c
  2001                           
  2002                           ; BSR set to: 0
  2003  000AFE  4BBA               	infsnz	sprintf@sp& (0+255),f,b
  2004  000B00  2BBB               	incf	(sprintf@sp+1)& (0+255),f,b
  2005  000B02                     l236:
  2006                           
  2007                           ; BSR set to: 0
  2008                           
  2009                           ; BSR set to: 0
  2010  000B02  07DC               	decf	sprintf@c& (0+255),f,b
  2011  000B04  29DC               	incf	sprintf@c& (0+255),w,b
  2012  000B06  B4D8               	btfsc	status,2,c
  2013  000B08  D00C               	goto	l239
  2014  000B0A  D7B1               	goto	l237
  2015  000B0C                     l3795:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2019  000B0C  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  2020  000B10  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  2021  000B14  0E30               	movlw	48
  2022  000B16  6EDF               	movwf	indf2,c
  2023                           
  2024                           ; BSR set to: 0
  2025  000B18  4BBA               	infsnz	sprintf@sp& (0+255),f,b
  2026  000B1A  2BBB               	incf	(sprintf@sp+1)& (0+255),f,b
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;doprnt.c: 1209: exp--;
  2030  000B1C  07D2               	decf	sprintf@exp& (0+255),f,b
  2031  000B1E  A0D8               	btfss	status,0,c
  2032  000B20  07D3               	decf	(sprintf@exp+1)& (0+255),f,b
  2033  000B22                     l239:
  2034                           
  2035                           ; BSR set to: 0
  2036                           
  2037                           ; BSR set to: 0
  2038  000B22  BFD3               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2039  000B24  D005               	goto	u4360
  2040  000B26  51D3               	movf	(sprintf@exp+1)& (0+255),w,b
  2041  000B28  E1F1               	bnz	l3795
  2042  000B2A  05D2               	decf	sprintf@exp& (0+255),w,b
  2043  000B2C  B0D8               	btfsc	status,0,c
  2044  000B2E  D7EE               	goto	l240
  2045  000B30                     u4360:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;doprnt.c: 1210: }
  2049                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2050                           
  2051                           ; BSR set to: 0
  2052  000B30  BFCD               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2053  000B32  D009               	goto	l242
  2054  000B34  51CD               	movf	(sprintf@prec+1)& (0+255),w,b
  2055  000B36  E104               	bnz	u4370
  2056  000B38  0E09               	movlw	9
  2057  000B3A  5DCC               	subwf	sprintf@prec& (0+255),w,b
  2058  000B3C  A0D8               	btfss	status,0,c
  2059  000B3E  D003               	goto	l242
  2060  000B40                     u4370:
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2064  000B40  0E08               	movlw	8
  2065  000B42  6FDC               	movwf	sprintf@c& (0+255),b
  2066  000B44  D002               	goto	l243
  2067  000B46                     l242:
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;doprnt.c: 1213: else
  2071                           ;doprnt.c: 1214: c = prec;
  2072  000B46  C0CC  F0DC         	movff	sprintf@prec,sprintf@c
  2073  000B4A                     l243:
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;doprnt.c: 1215: prec -= c;
  2077                           
  2078                           ; BSR set to: 0
  2079  000B4A  51DC               	movf	sprintf@c& (0+255),w,b
  2080  000B4C  5FCC               	subwf	sprintf@prec& (0+255),f,b
  2081  000B4E  0E00               	movlw	0
  2082  000B50  BFDC               	btfsc	sprintf@c& (0+255),7,b
  2083  000B52  0EFF               	movlw	255
  2084  000B54  5BCD               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;doprnt.c: 1219: if(c)
  2088  000B56  51DC               	movf	sprintf@c& (0+255),w,b
  2089  000B58  B4D8               	btfsc	status,2,c
  2090  000B5A  D008               	goto	l244
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2094  000B5C  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  2095  000B60  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  2096  000B64  0E2E               	movlw	46
  2097  000B66  6EDF               	movwf	indf2,c
  2098                           
  2099                           ; BSR set to: 0
  2100  000B68  4BBA               	infsnz	sprintf@sp& (0+255),f,b
  2101  000B6A  2BBB               	incf	(sprintf@sp+1)& (0+255),f,b
  2102  000B6C                     l244:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2106                           
  2107                           ; BSR set to: 0
  2108  000B6C  51DC               	movf	sprintf@c& (0+255),w,b
  2109  000B6E  EC92  F006         	call	_scale
  2110  000B72  C091  F0C4         	movff	?_scale,_sprintf$1398
  2111  000B76  C092  F0C5         	movff	?_scale+1,_sprintf$1398+1
  2112  000B7A  C093  F0C6         	movff	?_scale+2,_sprintf$1398+2
  2113  000B7E  C094  F0C7         	movff	?_scale+3,_sprintf$1398+3
  2114                           
  2115                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2116  000B82  C0D8  F040         	movff	sprintf@fval,___flmul@a
  2117  000B86  C0D9  F041         	movff	sprintf@fval+1,___flmul@a+1
  2118  000B8A  C0DA  F042         	movff	sprintf@fval+2,___flmul@a+2
  2119  000B8E  C0DB  F043         	movff	sprintf@fval+3,___flmul@a+3
  2120  000B92  C0C4  F03C         	movff	_sprintf$1398,___flmul@b
  2121  000B96  C0C5  F03D         	movff	_sprintf$1398+1,___flmul@b+1
  2122  000B9A  C0C6  F03E         	movff	_sprintf$1398+2,___flmul@b+2
  2123  000B9E  C0C7  F03F         	movff	_sprintf$1398+3,___flmul@b+3
  2124  000BA2  ECBA  F008         	call	___flmul	;wreg free
  2125  000BA6  C03C  F09A         	movff	?___flmul,___fltol@f1
  2126  000BAA  C03D  F09B         	movff	?___flmul+1,___fltol@f1+1
  2127  000BAE  C03E  F09C         	movff	?___flmul+2,___fltol@f1+2
  2128  000BB2  C03F  F09D         	movff	?___flmul+3,___fltol@f1+3
  2129  000BB6  ECB0  F00F         	call	___fltol	;wreg free
  2130  000BBA  C09A  F0CE         	movff	?___fltol,sprintf@val
  2131  000BBE  C09B  F0CF         	movff	?___fltol+1,sprintf@val+1
  2132  000BC2  C09C  F0D0         	movff	?___fltol+2,sprintf@val+2
  2133  000BC6  C09D  F0D1         	movff	?___fltol+3,sprintf@val+3
  2134                           
  2135                           ;doprnt.c: 1228: while(c--) {
  2136  000BCA  D071               	goto	l245
  2137  000BCC                     
  2138                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2139  000BCC  C0CE  F02E         	movff	sprintf@val,___lldiv@dividend
  2140  000BD0  C0CF  F02F         	movff	sprintf@val+1,___lldiv@dividend+1
  2141  000BD4  C0D0  F030         	movff	sprintf@val+2,___lldiv@dividend+2
  2142  000BD8  C0D1  F031         	movff	sprintf@val+3,___lldiv@dividend+3
  2143  000BDC  0100               	movlb	0	; () banked
  2144  000BDE  51DC               	movf	sprintf@c& (0+255),w,b
  2145  000BE0  0D04               	mullw	4
  2146  000BE2  0E69               	movlw	low _dpowers
  2147  000BE4  24F3               	addwf	prodl,w,c
  2148  000BE6  6EF6               	movwf	tblptrl,c
  2149  000BE8  0E06               	movlw	high _dpowers
  2150  000BEA  20F4               	addwfc	prodh,w,c
  2151  000BEC  6EF7               	movwf	tblptrh,c
  2152  000BEE                     	if	0	;There are less than 3 active tblptr bytes
  2153  000BEE                     	endif
  2154  000BEE  0009               	tblrd		*+
  2155  000BF0  CFF5 F032          	movff	tablat,___lldiv@divisor
  2156  000BF4  0009               	tblrd		*+
  2157  000BF6  CFF5 F033          	movff	tablat,___lldiv@divisor+1
  2158  000BFA  0009               	tblrd		*+
  2159  000BFC  CFF5 F034          	movff	tablat,___lldiv@divisor+2
  2160  000C00  000A               	tblrd		*-
  2161  000C02  CFF5 F035          	movff	tablat,___lldiv@divisor+3
  2162  000C06  EC10  F011         	call	___lldiv	;wreg free
  2163  000C0A  C02E  F0D4         	movff	?___lldiv,sprintf@tmpval
  2164  000C0E  C02F  F0D5         	movff	?___lldiv+1,sprintf@tmpval+1
  2165  000C12  C030  F0D6         	movff	?___lldiv+2,sprintf@tmpval+2
  2166  000C16  C031  F0D7         	movff	?___lldiv+3,sprintf@tmpval+3
  2167                           
  2168                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2169  000C1A  C0D4  F02E         	movff	sprintf@tmpval,___llmod@dividend
  2170  000C1E  C0D5  F02F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2171  000C22  C0D6  F030         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2172  000C26  C0D7  F031         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2173  000C2A  0E0A               	movlw	10
  2174  000C2C  6E32               	movwf	___llmod@divisor,c
  2175  000C2E  0E00               	movlw	0
  2176  000C30  6E33               	movwf	___llmod@divisor+1,c
  2177  000C32  0E00               	movlw	0
  2178  000C34  6E34               	movwf	___llmod@divisor+2,c
  2179  000C36  0E00               	movlw	0
  2180  000C38  6E35               	movwf	___llmod@divisor+3,c
  2181  000C3A  ECFA  F011         	call	___llmod	;wreg free
  2182  000C3E  C02E  F0D4         	movff	?___llmod,sprintf@tmpval
  2183  000C42  C02F  F0D5         	movff	?___llmod+1,sprintf@tmpval+1
  2184  000C46  C030  F0D6         	movff	?___llmod+2,sprintf@tmpval+2
  2185  000C4A  C031  F0D7         	movff	?___llmod+3,sprintf@tmpval+3
  2186                           
  2187                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2188  000C4E  0100               	movlb	0	; () banked
  2189  000C50  51D4               	movf	sprintf@tmpval& (0+255),w,b
  2190  000C52  0F30               	addlw	48
  2191  000C54  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  2192  000C58  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  2193  000C5C  6EDF               	movwf	indf2,c
  2194                           
  2195                           ; BSR set to: 0
  2196  000C5E  4BBA               	infsnz	sprintf@sp& (0+255),f,b
  2197  000C60  2BBB               	incf	(sprintf@sp+1)& (0+255),f,b
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;doprnt.c: 1232: val %= dpowers[c];
  2201  000C62  C0CE  F02E         	movff	sprintf@val,___llmod@dividend
  2202  000C66  C0CF  F02F         	movff	sprintf@val+1,___llmod@dividend+1
  2203  000C6A  C0D0  F030         	movff	sprintf@val+2,___llmod@dividend+2
  2204  000C6E  C0D1  F031         	movff	sprintf@val+3,___llmod@dividend+3
  2205  000C72  51DC               	movf	sprintf@c& (0+255),w,b
  2206  000C74  0D04               	mullw	4
  2207  000C76  0E69               	movlw	low _dpowers
  2208  000C78  24F3               	addwf	prodl,w,c
  2209  000C7A  6EF6               	movwf	tblptrl,c
  2210  000C7C  0E06               	movlw	high _dpowers
  2211  000C7E  20F4               	addwfc	prodh,w,c
  2212  000C80  6EF7               	movwf	tblptrh,c
  2213  000C82                     	if	0	;There are less than 3 active tblptr bytes
  2214  000C82                     	endif
  2215  000C82  0009               	tblrd		*+
  2216  000C84  CFF5 F032          	movff	tablat,___llmod@divisor
  2217  000C88  0009               	tblrd		*+
  2218  000C8A  CFF5 F033          	movff	tablat,___llmod@divisor+1
  2219  000C8E  0009               	tblrd		*+
  2220  000C90  CFF5 F034          	movff	tablat,___llmod@divisor+2
  2221  000C94  000A               	tblrd		*-
  2222  000C96  CFF5 F035          	movff	tablat,___llmod@divisor+3
  2223  000C9A  ECFA  F011         	call	___llmod	;wreg free
  2224  000C9E  C02E  F0CE         	movff	?___llmod,sprintf@val
  2225  000CA2  C02F  F0CF         	movff	?___llmod+1,sprintf@val+1
  2226  000CA6  C030  F0D0         	movff	?___llmod+2,sprintf@val+2
  2227  000CAA  C031  F0D1         	movff	?___llmod+3,sprintf@val+3
  2228  000CAE                     l245:
  2229  000CAE  0100               	movlb	0	; () banked
  2230  000CB0  07DC               	decf	sprintf@c& (0+255),f,b
  2231  000CB2  29DC               	incf	sprintf@c& (0+255),w,b
  2232  000CB4  B4D8               	btfsc	status,2,c
  2233  000CB6  D00C               	goto	l248
  2234  000CB8  D789               	goto	l246
  2235  000CBA                     
  2236                           ; BSR set to: 0
  2237                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2238                           
  2239                           ; BSR set to: 0
  2240  000CBA  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  2241  000CBE  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  2242  000CC2  0E30               	movlw	48
  2243  000CC4  6EDF               	movwf	indf2,c
  2244                           
  2245                           ; BSR set to: 0
  2246  000CC6  4BBA               	infsnz	sprintf@sp& (0+255),f,b
  2247  000CC8  2BBB               	incf	(sprintf@sp+1)& (0+255),f,b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 1237: prec--;
  2251  000CCA  07CC               	decf	sprintf@prec& (0+255),f,b
  2252  000CCC  A0D8               	btfss	status,0,c
  2253  000CCE  07CD               	decf	(sprintf@prec+1)& (0+255),f,b
  2254  000CD0                     l248:
  2255                           
  2256                           ; BSR set to: 0
  2257                           
  2258                           ; BSR set to: 0
  2259  000CD0  51CC               	movf	sprintf@prec& (0+255),w,b
  2260  000CD2  11CD               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2261  000CD4  B4D8               	btfsc	status,2,c
  2262  000CD6  D013               	goto	l251
  2263  000CD8  D7F0               	goto	l249
  2264  000CDA                     l214:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;doprnt.c: 1246: }
  2268                           ;doprnt.c: 1422: {
  2269                           ;doprnt.c: 1438: if(flag & 0x03)
  2270                           
  2271                           ; BSR set to: 0
  2272  000CDA  0E03               	movlw	3
  2273  000CDC  15CA               	andwf	sprintf@flag& (0+255),w,b
  2274  000CDE  6FC2               	movwf	??_sprintf& (0+255),b
  2275  000CE0  0E00               	movlw	0
  2276  000CE2  15CB               	andwf	(sprintf@flag+1)& (0+255),w,b
  2277  000CE4  6FC3               	movwf	(??_sprintf+1)& (0+255),b
  2278  000CE6  51C2               	movf	??_sprintf& (0+255),w,b
  2279  000CE8  11C3               	iorwf	(??_sprintf+1)& (0+255),w,b
  2280  000CEA  B4D8               	btfsc	status,2,c
  2281  000CEC  D008               	goto	l251
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2285  000CEE  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  2286  000CF2  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  2287  000CF6  0E2D               	movlw	45
  2288  000CF8  6EDF               	movwf	indf2,c
  2289  000CFA                     l3843:
  2290                           
  2291                           ; BSR set to: 0
  2292  000CFA  4BBA               	infsnz	sprintf@sp& (0+255),f,b
  2293  000CFC  2BBB               	incf	(sprintf@sp+1)& (0+255),f,b
  2294  000CFE                     l251:
  2295                           
  2296                           ; BSR set to: 0
  2297                           
  2298                           ; BSR set to: 0
  2299                           
  2300                           ; BSR set to: 0
  2301  000CFE  C0BC  FFF6         	movff	sprintf@f,tblptrl
  2302  000D02  C0BD  FFF7         	movff	sprintf@f+1,tblptrh
  2303  000D06  4BBC               	infsnz	sprintf@f& (0+255),f,b
  2304  000D08  2BBD               	incf	(sprintf@f+1)& (0+255),f,b
  2305  000D0A                     	if	0	;tblptru may be non-zero
  2306  000D0A                     	endif
  2307  000D0A                     	if	0	;tblptru may be non-zero
  2308  000D0A                     	endif
  2309  000D0A  0008               	tblrd		*
  2310  000D0C  CFF5 F0DC          	movff	tablat,sprintf@c
  2311  000D10  51DC               	movf	sprintf@c& (0+255),w,b
  2312  000D12  A4D8               	btfss	status,2,c
  2313  000D14  D4CC               	goto	l206
  2314  000D16                     u4420:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 1538: *sp = 0;
  2318                           
  2319                           ; BSR set to: 0
  2320                           
  2321                           ;doprnt.c: 1469: }
  2322                           ;doprnt.c: 1533: }
  2323                           ;doprnt.c: 1535: alldone:
  2324                           
  2325                           ; BSR set to: 0
  2326  000D16  C0BA  FFD9         	movff	sprintf@sp,fsr2l
  2327  000D1A  C0BB  FFDA         	movff	sprintf@sp+1,fsr2h
  2328  000D1E  0E00               	movlw	0
  2329  000D20  6EDF               	movwf	indf2,c
  2330  000D22  0012               	return	
  2331  000D24                     __end_of_sprintf:
  2332                           	opt stack 0
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           prodh	equ	0xFF4
  2338                           prodl	equ	0xFF3
  2339                           intcon	equ	0xFF2
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _scale *****************
  2349 ;; Defined at:
  2350 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  scl             1    wreg     char 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  scl             1   25[BANK0 ] char 
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  4   17[BANK0 ] char 
  2357 ;; Registers used:
  2358 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2364 ;;      Params:         0       4       0       0       0       0       0
  2365 ;;      Locals:         0       5       0       0       0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0
  2367 ;;      Totals:         0       9       0       0       0       0       0
  2368 ;;Total ram usage:        9 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    5
  2371 ;; This function calls:
  2372 ;;		___awdiv
  2373 ;;		___awmod
  2374 ;;		___flmul
  2375 ;; This function is called by:
  2376 ;;		_sprintf
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text8
  2381  000D24                     __ptext8:
  2382                           	opt stack 0
  2383  000D24                     _scale:
  2384                           	opt stack 23
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;incstack = 0
  2388                           ;scale@scl stored from wreg
  2389  000D24  0100               	movlb	0	; () banked
  2390  000D26  6F99               	movwf	scale@scl& (0+255),b
  2391                           
  2392                           ;doprnt.c: 428: if(scl < 0) {
  2393  000D28  0100               	movlb	0	; () banked
  2394  000D2A  AF99               	btfss	scale@scl& (0+255),7,b
  2395  000D2C  D112               	goto	l195
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;doprnt.c: 429: scl = -scl;
  2399  000D2E  6D99               	negf	scale@scl& (0+255),b
  2400                           
  2401                           ;doprnt.c: 430: if(scl>=110)
  2402  000D30  5199               	movf	scale@scl& (0+255),w,b
  2403  000D32  0A80               	xorlw	128
  2404  000D34  0F12               	addlw	-238
  2405  000D36  A0D8               	btfss	status,0,c
  2406  000D38  D09A               	goto	l196
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2410  000D3A  0E00               	movlw	0
  2411  000D3C  6E37               	movwf	___awdiv@divisor+1,c
  2412  000D3E  0E0A               	movlw	10
  2413  000D40  6E36               	movwf	___awdiv@divisor,c
  2414  000D42  0E00               	movlw	0
  2415  000D44  6E31               	movwf	___awmod@divisor+1,c
  2416  000D46  0E64               	movlw	100
  2417  000D48  6E30               	movwf	___awmod@divisor,c
  2418  000D4A  5199               	movf	scale@scl& (0+255),w,b
  2419  000D4C  6E2E               	movwf	___awmod@dividend,c
  2420  000D4E  6A2F               	clrf	___awmod@dividend+1,c
  2421  000D50  BE2E               	btfsc	___awmod@dividend,7,c
  2422  000D52  062F               	decf	___awmod@dividend+1,f,c
  2423  000D54  EC8A  F011         	call	___awmod	;wreg free
  2424  000D58  C02E  F034         	movff	?___awmod,___awdiv@dividend
  2425  000D5C  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  2426  000D60  ECCE  F010         	call	___awdiv	;wreg free
  2427  000D64  90D8               	bcf	status,0,c
  2428  000D66  3634               	rlcf	?___awdiv,f,c
  2429  000D68  3635               	rlcf	?___awdiv+1,f,c
  2430  000D6A  90D8               	bcf	status,0,c
  2431  000D6C  3634               	rlcf	?___awdiv,f,c
  2432  000D6E  3635               	rlcf	?___awdiv+1,f,c
  2433  000D70  0E24               	movlw	36
  2434  000D72  2634               	addwf	?___awdiv,f,c
  2435  000D74  0E00               	movlw	0
  2436  000D76  2235               	addwfc	?___awdiv+1,f,c
  2437  000D78  0E35               	movlw	low __npowers_
  2438  000D7A  2434               	addwf	?___awdiv,w,c
  2439  000D7C  6EF6               	movwf	tblptrl,c
  2440  000D7E  0E06               	movlw	high __npowers_
  2441  000D80  2035               	addwfc	?___awdiv+1,w,c
  2442  000D82  6EF7               	movwf	tblptrh,c
  2443  000D84                     	if	0	;There are less than 3 active tblptr bytes
  2444  000D84                     	endif
  2445  000D84  0009               	tblrd		*+
  2446  000D86  CFF5 F040          	movff	tablat,___flmul@a
  2447  000D8A  0009               	tblrd		*+
  2448  000D8C  CFF5 F041          	movff	tablat,___flmul@a+1
  2449  000D90  0009               	tblrd		*+
  2450  000D92  CFF5 F042          	movff	tablat,___flmul@a+2
  2451  000D96  000A               	tblrd		*-
  2452  000D98  CFF5 F043          	movff	tablat,___flmul@a+3
  2453  000D9C  0E00               	movlw	0
  2454  000D9E  6E37               	movwf	___awdiv@divisor+1,c
  2455  000DA0  0E64               	movlw	100
  2456  000DA2  6E36               	movwf	___awdiv@divisor,c
  2457  000DA4  0100               	movlb	0	; () banked
  2458  000DA6  5199               	movf	scale@scl& (0+255),w,b
  2459  000DA8  6E34               	movwf	___awdiv@dividend,c
  2460  000DAA  6A35               	clrf	___awdiv@dividend+1,c
  2461  000DAC  BE34               	btfsc	___awdiv@dividend,7,c
  2462  000DAE  0635               	decf	___awdiv@dividend+1,f,c
  2463  000DB0  ECCE  F010         	call	___awdiv	;wreg free
  2464  000DB4  90D8               	bcf	status,0,c
  2465  000DB6  3634               	rlcf	?___awdiv,f,c
  2466  000DB8  3635               	rlcf	?___awdiv+1,f,c
  2467  000DBA  90D8               	bcf	status,0,c
  2468  000DBC  3634               	rlcf	?___awdiv,f,c
  2469  000DBE  3635               	rlcf	?___awdiv+1,f,c
  2470  000DC0  0E48               	movlw	72
  2471  000DC2  2634               	addwf	?___awdiv,f,c
  2472  000DC4  0E00               	movlw	0
  2473  000DC6  2235               	addwfc	?___awdiv+1,f,c
  2474  000DC8  0E35               	movlw	low __npowers_
  2475  000DCA  2434               	addwf	?___awdiv,w,c
  2476  000DCC  6EF6               	movwf	tblptrl,c
  2477  000DCE  0E06               	movlw	high __npowers_
  2478  000DD0  2035               	addwfc	?___awdiv+1,w,c
  2479  000DD2  6EF7               	movwf	tblptrh,c
  2480  000DD4                     	if	0	;There are less than 3 active tblptr bytes
  2481  000DD4                     	endif
  2482  000DD4  0009               	tblrd		*+
  2483  000DD6  CFF5 F03C          	movff	tablat,___flmul@b
  2484  000DDA  0009               	tblrd		*+
  2485  000DDC  CFF5 F03D          	movff	tablat,___flmul@b+1
  2486  000DE0  0009               	tblrd		*+
  2487  000DE2  CFF5 F03E          	movff	tablat,___flmul@b+2
  2488  000DE6  000A               	tblrd		*-
  2489  000DE8  CFF5 F03F          	movff	tablat,___flmul@b+3
  2490  000DEC  ECBA  F008         	call	___flmul	;wreg free
  2491  000DF0  C03C  F095         	movff	?___flmul,_scale$1397
  2492  000DF4  C03D  F096         	movff	?___flmul+1,_scale$1397+1
  2493  000DF8  C03E  F097         	movff	?___flmul+2,_scale$1397+2
  2494  000DFC  C03F  F098         	movff	?___flmul+3,_scale$1397+3
  2495                           
  2496                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2497  000E00  C095  F03C         	movff	_scale$1397,___flmul@b
  2498  000E04  C096  F03D         	movff	_scale$1397+1,___flmul@b+1
  2499  000E08  C097  F03E         	movff	_scale$1397+2,___flmul@b+2
  2500  000E0C  C098  F03F         	movff	_scale$1397+3,___flmul@b+3
  2501  000E10  0E00               	movlw	0
  2502  000E12  6E31               	movwf	___awmod@divisor+1,c
  2503  000E14  0E0A               	movlw	10
  2504  000E16  6E30               	movwf	___awmod@divisor,c
  2505  000E18  0100               	movlb	0	; () banked
  2506  000E1A  5199               	movf	scale@scl& (0+255),w,b
  2507  000E1C  6E2E               	movwf	___awmod@dividend,c
  2508  000E1E  6A2F               	clrf	___awmod@dividend+1,c
  2509  000E20  BE2E               	btfsc	___awmod@dividend,7,c
  2510  000E22  062F               	decf	___awmod@dividend+1,f,c
  2511  000E24  EC8A  F011         	call	___awmod	;wreg free
  2512  000E28  90D8               	bcf	status,0,c
  2513  000E2A  362E               	rlcf	?___awmod,f,c
  2514  000E2C  362F               	rlcf	?___awmod+1,f,c
  2515  000E2E  90D8               	bcf	status,0,c
  2516  000E30  362E               	rlcf	?___awmod,f,c
  2517  000E32  362F               	rlcf	?___awmod+1,f,c
  2518  000E34  0E35               	movlw	low __npowers_
  2519  000E36  242E               	addwf	?___awmod,w,c
  2520  000E38  6EF6               	movwf	tblptrl,c
  2521  000E3A  0E06               	movlw	high __npowers_
  2522  000E3C  202F               	addwfc	?___awmod+1,w,c
  2523  000E3E  6EF7               	movwf	tblptrh,c
  2524  000E40                     	if	0	;There are less than 3 active tblptr bytes
  2525  000E40                     	endif
  2526  000E40  0009               	tblrd		*+
  2527  000E42  CFF5 F040          	movff	tablat,___flmul@a
  2528  000E46  0009               	tblrd		*+
  2529  000E48  CFF5 F041          	movff	tablat,___flmul@a+1
  2530  000E4C  0009               	tblrd		*+
  2531  000E4E  CFF5 F042          	movff	tablat,___flmul@a+2
  2532  000E52  000A               	tblrd		*-
  2533  000E54  CFF5 F043          	movff	tablat,___flmul@a+3
  2534  000E58  ECBA  F008         	call	___flmul	;wreg free
  2535  000E5C  C03C  F091         	movff	?___flmul,?_scale
  2536  000E60  C03D  F092         	movff	?___flmul+1,?_scale+1
  2537  000E64  C03E  F093         	movff	?___flmul+2,?_scale+2
  2538  000E68  C03F  F094         	movff	?___flmul+3,?_scale+3
  2539  000E6C  0012               	return	
  2540  000E6E                     l196:
  2541                           
  2542                           ;doprnt.c: 432: else if(scl > 10)
  2543  000E6E  0100               	movlb	0	; () banked
  2544  000E70  5199               	movf	scale@scl& (0+255),w,b
  2545  000E72  0A80               	xorlw	128
  2546  000E74  0F75               	addlw	-139
  2547  000E76  A0D8               	btfss	status,0,c
  2548  000E78  D056               	goto	l199
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2552  000E7A  0E00               	movlw	0
  2553  000E7C  6E37               	movwf	___awdiv@divisor+1,c
  2554  000E7E  0E0A               	movlw	10
  2555  000E80  6E36               	movwf	___awdiv@divisor,c
  2556  000E82  5199               	movf	scale@scl& (0+255),w,b
  2557  000E84  6E34               	movwf	___awdiv@dividend,c
  2558  000E86  6A35               	clrf	___awdiv@dividend+1,c
  2559  000E88  BE34               	btfsc	___awdiv@dividend,7,c
  2560  000E8A  0635               	decf	___awdiv@dividend+1,f,c
  2561  000E8C  ECCE  F010         	call	___awdiv	;wreg free
  2562  000E90  90D8               	bcf	status,0,c
  2563  000E92  3634               	rlcf	?___awdiv,f,c
  2564  000E94  3635               	rlcf	?___awdiv+1,f,c
  2565  000E96  90D8               	bcf	status,0,c
  2566  000E98  3634               	rlcf	?___awdiv,f,c
  2567  000E9A  3635               	rlcf	?___awdiv+1,f,c
  2568  000E9C  0E24               	movlw	36
  2569  000E9E  2634               	addwf	?___awdiv,f,c
  2570  000EA0  0E00               	movlw	0
  2571  000EA2  2235               	addwfc	?___awdiv+1,f,c
  2572  000EA4  0E35               	movlw	low __npowers_
  2573  000EA6  2434               	addwf	?___awdiv,w,c
  2574  000EA8  6EF6               	movwf	tblptrl,c
  2575  000EAA  0E06               	movlw	high __npowers_
  2576  000EAC  2035               	addwfc	?___awdiv+1,w,c
  2577  000EAE  6EF7               	movwf	tblptrh,c
  2578  000EB0                     	if	0	;There are less than 3 active tblptr bytes
  2579  000EB0                     	endif
  2580  000EB0  0009               	tblrd		*+
  2581  000EB2  CFF5 F03C          	movff	tablat,___flmul@b
  2582  000EB6  0009               	tblrd		*+
  2583  000EB8  CFF5 F03D          	movff	tablat,___flmul@b+1
  2584  000EBC  0009               	tblrd		*+
  2585  000EBE  CFF5 F03E          	movff	tablat,___flmul@b+2
  2586  000EC2  000A               	tblrd		*-
  2587  000EC4  CFF5 F03F          	movff	tablat,___flmul@b+3
  2588  000EC8  0E00               	movlw	0
  2589  000ECA  6E31               	movwf	___awmod@divisor+1,c
  2590  000ECC  0E0A               	movlw	10
  2591  000ECE  6E30               	movwf	___awmod@divisor,c
  2592  000ED0  0100               	movlb	0	; () banked
  2593  000ED2  5199               	movf	scale@scl& (0+255),w,b
  2594  000ED4  6E2E               	movwf	___awmod@dividend,c
  2595  000ED6  6A2F               	clrf	___awmod@dividend+1,c
  2596  000ED8  BE2E               	btfsc	___awmod@dividend,7,c
  2597  000EDA  062F               	decf	___awmod@dividend+1,f,c
  2598  000EDC  EC8A  F011         	call	___awmod	;wreg free
  2599  000EE0  90D8               	bcf	status,0,c
  2600  000EE2  362E               	rlcf	?___awmod,f,c
  2601  000EE4  362F               	rlcf	?___awmod+1,f,c
  2602  000EE6  90D8               	bcf	status,0,c
  2603  000EE8  362E               	rlcf	?___awmod,f,c
  2604  000EEA  362F               	rlcf	?___awmod+1,f,c
  2605  000EEC  0E35               	movlw	low __npowers_
  2606  000EEE  242E               	addwf	?___awmod,w,c
  2607  000EF0  6EF6               	movwf	tblptrl,c
  2608  000EF2  0E06               	movlw	high __npowers_
  2609  000EF4  202F               	addwfc	?___awmod+1,w,c
  2610  000EF6  6EF7               	movwf	tblptrh,c
  2611  000EF8                     	if	0	;There are less than 3 active tblptr bytes
  2612  000EF8                     	endif
  2613  000EF8  0009               	tblrd		*+
  2614  000EFA  CFF5 F040          	movff	tablat,___flmul@a
  2615  000EFE  0009               	tblrd		*+
  2616  000F00  CFF5 F041          	movff	tablat,___flmul@a+1
  2617  000F04  0009               	tblrd		*+
  2618  000F06  CFF5 F042          	movff	tablat,___flmul@a+2
  2619  000F0A  000A               	tblrd		*-
  2620  000F0C  CFF5 F043          	movff	tablat,___flmul@a+3
  2621  000F10  ECBA  F008         	call	___flmul	;wreg free
  2622  000F14  C03C  F091         	movff	?___flmul,?_scale
  2623  000F18  C03D  F092         	movff	?___flmul+1,?_scale+1
  2624  000F1C  C03E  F093         	movff	?___flmul+2,?_scale+2
  2625  000F20  C03F  F094         	movff	?___flmul+3,?_scale+3
  2626  000F24  0012               	return	
  2627  000F26                     l199:
  2628                           
  2629                           ;doprnt.c: 434: return _npowers_[scl];
  2630  000F26  0100               	movlb	0	; () banked
  2631  000F28  5199               	movf	scale@scl& (0+255),w,b
  2632  000F2A  0D04               	mullw	4
  2633  000F2C  0E35               	movlw	low __npowers_
  2634  000F2E  24F3               	addwf	prodl,w,c
  2635  000F30  6EF6               	movwf	tblptrl,c
  2636  000F32  0E06               	movlw	high __npowers_
  2637  000F34  20F4               	addwfc	prodh,w,c
  2638  000F36  6EF7               	movwf	tblptrh,c
  2639  000F38                     	if	0	;There are less than 3 active tblptr bytes
  2640  000F38                     	endif
  2641  000F38  0009               	tblrd		*+
  2642  000F3A  CFF5 F091          	movff	tablat,?_scale
  2643  000F3E  0009               	tblrd		*+
  2644  000F40  CFF5 F092          	movff	tablat,?_scale+1
  2645  000F44  0009               	tblrd		*+
  2646  000F46  CFF5 F093          	movff	tablat,?_scale+2
  2647  000F4A  000A               	tblrd		*-
  2648  000F4C  CFF5 F094          	movff	tablat,?_scale+3
  2649                           
  2650                           ; BSR set to: 0
  2651  000F50  0012               	return	
  2652  000F52                     l195:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 435: }
  2656                           ;doprnt.c: 436: if(scl>=110)
  2657                           
  2658                           ; BSR set to: 0
  2659  000F52  5199               	movf	scale@scl& (0+255),w,b
  2660  000F54  0A80               	xorlw	128
  2661  000F56  0F12               	addlw	-238
  2662  000F58  A0D8               	btfss	status,0,c
  2663  000F5A  D09A               	goto	l200
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2667  000F5C  0E00               	movlw	0
  2668  000F5E  6E37               	movwf	___awdiv@divisor+1,c
  2669  000F60  0E0A               	movlw	10
  2670  000F62  6E36               	movwf	___awdiv@divisor,c
  2671  000F64  0E00               	movlw	0
  2672  000F66  6E31               	movwf	___awmod@divisor+1,c
  2673  000F68  0E64               	movlw	100
  2674  000F6A  6E30               	movwf	___awmod@divisor,c
  2675  000F6C  5199               	movf	scale@scl& (0+255),w,b
  2676  000F6E  6E2E               	movwf	___awmod@dividend,c
  2677  000F70  6A2F               	clrf	___awmod@dividend+1,c
  2678  000F72  BE2E               	btfsc	___awmod@dividend,7,c
  2679  000F74  062F               	decf	___awmod@dividend+1,f,c
  2680  000F76  EC8A  F011         	call	___awmod	;wreg free
  2681  000F7A  C02E  F034         	movff	?___awmod,___awdiv@dividend
  2682  000F7E  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  2683  000F82  ECCE  F010         	call	___awdiv	;wreg free
  2684  000F86  90D8               	bcf	status,0,c
  2685  000F88  3634               	rlcf	?___awdiv,f,c
  2686  000F8A  3635               	rlcf	?___awdiv+1,f,c
  2687  000F8C  90D8               	bcf	status,0,c
  2688  000F8E  3634               	rlcf	?___awdiv,f,c
  2689  000F90  3635               	rlcf	?___awdiv+1,f,c
  2690  000F92  0E24               	movlw	36
  2691  000F94  2634               	addwf	?___awdiv,f,c
  2692  000F96  0E00               	movlw	0
  2693  000F98  2235               	addwfc	?___awdiv+1,f,c
  2694  000F9A  0E01               	movlw	low __powers_
  2695  000F9C  2434               	addwf	?___awdiv,w,c
  2696  000F9E  6EF6               	movwf	tblptrl,c
  2697  000FA0  0E06               	movlw	high __powers_
  2698  000FA2  2035               	addwfc	?___awdiv+1,w,c
  2699  000FA4  6EF7               	movwf	tblptrh,c
  2700  000FA6                     	if	0	;There are less than 3 active tblptr bytes
  2701  000FA6                     	endif
  2702  000FA6  0009               	tblrd		*+
  2703  000FA8  CFF5 F040          	movff	tablat,___flmul@a
  2704  000FAC  0009               	tblrd		*+
  2705  000FAE  CFF5 F041          	movff	tablat,___flmul@a+1
  2706  000FB2  0009               	tblrd		*+
  2707  000FB4  CFF5 F042          	movff	tablat,___flmul@a+2
  2708  000FB8  000A               	tblrd		*-
  2709  000FBA  CFF5 F043          	movff	tablat,___flmul@a+3
  2710  000FBE  0E00               	movlw	0
  2711  000FC0  6E37               	movwf	___awdiv@divisor+1,c
  2712  000FC2  0E64               	movlw	100
  2713  000FC4  6E36               	movwf	___awdiv@divisor,c
  2714  000FC6  0100               	movlb	0	; () banked
  2715  000FC8  5199               	movf	scale@scl& (0+255),w,b
  2716  000FCA  6E34               	movwf	___awdiv@dividend,c
  2717  000FCC  6A35               	clrf	___awdiv@dividend+1,c
  2718  000FCE  BE34               	btfsc	___awdiv@dividend,7,c
  2719  000FD0  0635               	decf	___awdiv@dividend+1,f,c
  2720  000FD2  ECCE  F010         	call	___awdiv	;wreg free
  2721  000FD6  90D8               	bcf	status,0,c
  2722  000FD8  3634               	rlcf	?___awdiv,f,c
  2723  000FDA  3635               	rlcf	?___awdiv+1,f,c
  2724  000FDC  90D8               	bcf	status,0,c
  2725  000FDE  3634               	rlcf	?___awdiv,f,c
  2726  000FE0  3635               	rlcf	?___awdiv+1,f,c
  2727  000FE2  0E48               	movlw	72
  2728  000FE4  2634               	addwf	?___awdiv,f,c
  2729  000FE6  0E00               	movlw	0
  2730  000FE8  2235               	addwfc	?___awdiv+1,f,c
  2731  000FEA  0E01               	movlw	low __powers_
  2732  000FEC  2434               	addwf	?___awdiv,w,c
  2733  000FEE  6EF6               	movwf	tblptrl,c
  2734  000FF0  0E06               	movlw	high __powers_
  2735  000FF2  2035               	addwfc	?___awdiv+1,w,c
  2736  000FF4  6EF7               	movwf	tblptrh,c
  2737  000FF6                     	if	0	;There are less than 3 active tblptr bytes
  2738  000FF6                     	endif
  2739  000FF6  0009               	tblrd		*+
  2740  000FF8  CFF5 F03C          	movff	tablat,___flmul@b
  2741  000FFC  0009               	tblrd		*+
  2742  000FFE  CFF5 F03D          	movff	tablat,___flmul@b+1
  2743  001002  0009               	tblrd		*+
  2744  001004  CFF5 F03E          	movff	tablat,___flmul@b+2
  2745  001008  000A               	tblrd		*-
  2746  00100A  CFF5 F03F          	movff	tablat,___flmul@b+3
  2747  00100E  ECBA  F008         	call	___flmul	;wreg free
  2748  001012  C03C  F095         	movff	?___flmul,_scale$1397
  2749  001016  C03D  F096         	movff	?___flmul+1,_scale$1397+1
  2750  00101A  C03E  F097         	movff	?___flmul+2,_scale$1397+2
  2751  00101E  C03F  F098         	movff	?___flmul+3,_scale$1397+3
  2752                           
  2753                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2754  001022  C095  F03C         	movff	_scale$1397,___flmul@b
  2755  001026  C096  F03D         	movff	_scale$1397+1,___flmul@b+1
  2756  00102A  C097  F03E         	movff	_scale$1397+2,___flmul@b+2
  2757  00102E  C098  F03F         	movff	_scale$1397+3,___flmul@b+3
  2758  001032  0E00               	movlw	0
  2759  001034  6E31               	movwf	___awmod@divisor+1,c
  2760  001036  0E0A               	movlw	10
  2761  001038  6E30               	movwf	___awmod@divisor,c
  2762  00103A  0100               	movlb	0	; () banked
  2763  00103C  5199               	movf	scale@scl& (0+255),w,b
  2764  00103E  6E2E               	movwf	___awmod@dividend,c
  2765  001040  6A2F               	clrf	___awmod@dividend+1,c
  2766  001042  BE2E               	btfsc	___awmod@dividend,7,c
  2767  001044  062F               	decf	___awmod@dividend+1,f,c
  2768  001046  EC8A  F011         	call	___awmod	;wreg free
  2769  00104A  90D8               	bcf	status,0,c
  2770  00104C  362E               	rlcf	?___awmod,f,c
  2771  00104E  362F               	rlcf	?___awmod+1,f,c
  2772  001050  90D8               	bcf	status,0,c
  2773  001052  362E               	rlcf	?___awmod,f,c
  2774  001054  362F               	rlcf	?___awmod+1,f,c
  2775  001056  0E01               	movlw	low __powers_
  2776  001058  242E               	addwf	?___awmod,w,c
  2777  00105A  6EF6               	movwf	tblptrl,c
  2778  00105C  0E06               	movlw	high __powers_
  2779  00105E  202F               	addwfc	?___awmod+1,w,c
  2780  001060  6EF7               	movwf	tblptrh,c
  2781  001062                     	if	0	;There are less than 3 active tblptr bytes
  2782  001062                     	endif
  2783  001062  0009               	tblrd		*+
  2784  001064  CFF5 F040          	movff	tablat,___flmul@a
  2785  001068  0009               	tblrd		*+
  2786  00106A  CFF5 F041          	movff	tablat,___flmul@a+1
  2787  00106E  0009               	tblrd		*+
  2788  001070  CFF5 F042          	movff	tablat,___flmul@a+2
  2789  001074  000A               	tblrd		*-
  2790  001076  CFF5 F043          	movff	tablat,___flmul@a+3
  2791  00107A  ECBA  F008         	call	___flmul	;wreg free
  2792  00107E  C03C  F091         	movff	?___flmul,?_scale
  2793  001082  C03D  F092         	movff	?___flmul+1,?_scale+1
  2794  001086  C03E  F093         	movff	?___flmul+2,?_scale+2
  2795  00108A  C03F  F094         	movff	?___flmul+3,?_scale+3
  2796  00108E  0012               	return	
  2797  001090                     l200:
  2798                           
  2799                           ;doprnt.c: 438: else if(scl > 10)
  2800  001090  0100               	movlb	0	; () banked
  2801  001092  5199               	movf	scale@scl& (0+255),w,b
  2802  001094  0A80               	xorlw	128
  2803  001096  0F75               	addlw	-139
  2804  001098  A0D8               	btfss	status,0,c
  2805  00109A  D056               	goto	l202
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2809  00109C  0E00               	movlw	0
  2810  00109E  6E37               	movwf	___awdiv@divisor+1,c
  2811  0010A0  0E0A               	movlw	10
  2812  0010A2  6E36               	movwf	___awdiv@divisor,c
  2813  0010A4  5199               	movf	scale@scl& (0+255),w,b
  2814  0010A6  6E34               	movwf	___awdiv@dividend,c
  2815  0010A8  6A35               	clrf	___awdiv@dividend+1,c
  2816  0010AA  BE34               	btfsc	___awdiv@dividend,7,c
  2817  0010AC  0635               	decf	___awdiv@dividend+1,f,c
  2818  0010AE  ECCE  F010         	call	___awdiv	;wreg free
  2819  0010B2  90D8               	bcf	status,0,c
  2820  0010B4  3634               	rlcf	?___awdiv,f,c
  2821  0010B6  3635               	rlcf	?___awdiv+1,f,c
  2822  0010B8  90D8               	bcf	status,0,c
  2823  0010BA  3634               	rlcf	?___awdiv,f,c
  2824  0010BC  3635               	rlcf	?___awdiv+1,f,c
  2825  0010BE  0E24               	movlw	36
  2826  0010C0  2634               	addwf	?___awdiv,f,c
  2827  0010C2  0E00               	movlw	0
  2828  0010C4  2235               	addwfc	?___awdiv+1,f,c
  2829  0010C6  0E01               	movlw	low __powers_
  2830  0010C8  2434               	addwf	?___awdiv,w,c
  2831  0010CA  6EF6               	movwf	tblptrl,c
  2832  0010CC  0E06               	movlw	high __powers_
  2833  0010CE  2035               	addwfc	?___awdiv+1,w,c
  2834  0010D0  6EF7               	movwf	tblptrh,c
  2835  0010D2                     	if	0	;There are less than 3 active tblptr bytes
  2836  0010D2                     	endif
  2837  0010D2  0009               	tblrd		*+
  2838  0010D4  CFF5 F03C          	movff	tablat,___flmul@b
  2839  0010D8  0009               	tblrd		*+
  2840  0010DA  CFF5 F03D          	movff	tablat,___flmul@b+1
  2841  0010DE  0009               	tblrd		*+
  2842  0010E0  CFF5 F03E          	movff	tablat,___flmul@b+2
  2843  0010E4  000A               	tblrd		*-
  2844  0010E6  CFF5 F03F          	movff	tablat,___flmul@b+3
  2845  0010EA  0E00               	movlw	0
  2846  0010EC  6E31               	movwf	___awmod@divisor+1,c
  2847  0010EE  0E0A               	movlw	10
  2848  0010F0  6E30               	movwf	___awmod@divisor,c
  2849  0010F2  0100               	movlb	0	; () banked
  2850  0010F4  5199               	movf	scale@scl& (0+255),w,b
  2851  0010F6  6E2E               	movwf	___awmod@dividend,c
  2852  0010F8  6A2F               	clrf	___awmod@dividend+1,c
  2853  0010FA  BE2E               	btfsc	___awmod@dividend,7,c
  2854  0010FC  062F               	decf	___awmod@dividend+1,f,c
  2855  0010FE  EC8A  F011         	call	___awmod	;wreg free
  2856  001102  90D8               	bcf	status,0,c
  2857  001104  362E               	rlcf	?___awmod,f,c
  2858  001106  362F               	rlcf	?___awmod+1,f,c
  2859  001108  90D8               	bcf	status,0,c
  2860  00110A  362E               	rlcf	?___awmod,f,c
  2861  00110C  362F               	rlcf	?___awmod+1,f,c
  2862  00110E  0E01               	movlw	low __powers_
  2863  001110  242E               	addwf	?___awmod,w,c
  2864  001112  6EF6               	movwf	tblptrl,c
  2865  001114  0E06               	movlw	high __powers_
  2866  001116  202F               	addwfc	?___awmod+1,w,c
  2867  001118  6EF7               	movwf	tblptrh,c
  2868  00111A                     	if	0	;There are less than 3 active tblptr bytes
  2869  00111A                     	endif
  2870  00111A  0009               	tblrd		*+
  2871  00111C  CFF5 F040          	movff	tablat,___flmul@a
  2872  001120  0009               	tblrd		*+
  2873  001122  CFF5 F041          	movff	tablat,___flmul@a+1
  2874  001126  0009               	tblrd		*+
  2875  001128  CFF5 F042          	movff	tablat,___flmul@a+2
  2876  00112C  000A               	tblrd		*-
  2877  00112E  CFF5 F043          	movff	tablat,___flmul@a+3
  2878  001132  ECBA  F008         	call	___flmul	;wreg free
  2879  001136  C03C  F091         	movff	?___flmul,?_scale
  2880  00113A  C03D  F092         	movff	?___flmul+1,?_scale+1
  2881  00113E  C03E  F093         	movff	?___flmul+2,?_scale+2
  2882  001142  C03F  F094         	movff	?___flmul+3,?_scale+3
  2883  001146  0012               	return	
  2884  001148                     l202:
  2885                           
  2886                           ;doprnt.c: 440: return _powers_[scl];
  2887  001148  0100               	movlb	0	; () banked
  2888  00114A  5199               	movf	scale@scl& (0+255),w,b
  2889  00114C  0D04               	mullw	4
  2890  00114E  0E01               	movlw	low __powers_
  2891  001150  24F3               	addwf	prodl,w,c
  2892  001152  6EF6               	movwf	tblptrl,c
  2893  001154  0E06               	movlw	high __powers_
  2894  001156  20F4               	addwfc	prodh,w,c
  2895  001158  6EF7               	movwf	tblptrh,c
  2896  00115A                     	if	0	;There are less than 3 active tblptr bytes
  2897  00115A                     	endif
  2898  00115A  0009               	tblrd		*+
  2899  00115C  CFF5 F091          	movff	tablat,?_scale
  2900  001160  0009               	tblrd		*+
  2901  001162  CFF5 F092          	movff	tablat,?_scale+1
  2902  001166  0009               	tblrd		*+
  2903  001168  CFF5 F093          	movff	tablat,?_scale+2
  2904  00116C  000A               	tblrd		*-
  2905  00116E  CFF5 F094          	movff	tablat,?_scale+3
  2906  001172  0012               	return	
  2907  001174                     __end_of_scale:
  2908                           	opt stack 0
  2909                           tblptru	equ	0xFF8
  2910                           tblptrh	equ	0xFF7
  2911                           tblptrl	equ	0xFF6
  2912                           tablat	equ	0xFF5
  2913                           prodh	equ	0xFF4
  2914                           prodl	equ	0xFF3
  2915                           intcon	equ	0xFF2
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           indf2	equ	0xFDF
  2919                           postinc2	equ	0xFDE
  2920                           fsr2h	equ	0xFDA
  2921                           fsr2l	equ	0xFD9
  2922                           status	equ	0xFD8
  2923                           
  2924 ;; *************** function _fround *****************
  2925 ;; Defined at:
  2926 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  prec            1    wreg     unsigned char 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;  prec            1   29[BANK0 ] unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  4   17[BANK0 ] unsigned char 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2940 ;;      Params:         0       4       0       0       0       0       0
  2941 ;;      Locals:         0       9       0       0       0       0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0
  2943 ;;      Totals:         0      13       0       0       0       0       0
  2944 ;;Total ram usage:       13 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    5
  2947 ;; This function calls:
  2948 ;;		___awdiv
  2949 ;;		___awmod
  2950 ;;		___flmul
  2951 ;; This function is called by:
  2952 ;;		_sprintf
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text9
  2957  001804                     __ptext9:
  2958                           	opt stack 0
  2959  001804                     _fround:
  2960                           	opt stack 23
  2961                           
  2962                           ;incstack = 0
  2963                           ;fround@prec stored from wreg
  2964  001804  0100               	movlb	0	; () banked
  2965  001806  6F9D               	movwf	fround@prec& (0+255),b
  2966                           
  2967                           ;doprnt.c: 413: if(prec>=110)
  2968  001808  0E6D               	movlw	109
  2969  00180A  0100               	movlb	0	; () banked
  2970  00180C  659D               	cpfsgt	fround@prec& (0+255),b
  2971  00180E  D0AC               	goto	l189
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2975  001810  0E00               	movlw	0
  2976  001812  6E37               	movwf	___awdiv@divisor+1,c
  2977  001814  0E0A               	movlw	10
  2978  001816  6E36               	movwf	___awdiv@divisor,c
  2979  001818  0E00               	movlw	0
  2980  00181A  6E31               	movwf	___awmod@divisor+1,c
  2981  00181C  0E64               	movlw	100
  2982  00181E  6E30               	movwf	___awmod@divisor,c
  2983  001820  C09D  F02E         	movff	fround@prec,___awmod@dividend
  2984  001824  6A2F               	clrf	___awmod@dividend+1,c
  2985  001826  EC8A  F011         	call	___awmod	;wreg free
  2986  00182A  C02E  F034         	movff	?___awmod,___awdiv@dividend
  2987  00182E  C02F  F035         	movff	?___awmod+1,___awdiv@dividend+1
  2988  001832  ECCE  F010         	call	___awdiv	;wreg free
  2989  001836  90D8               	bcf	status,0,c
  2990  001838  3634               	rlcf	?___awdiv,f,c
  2991  00183A  3635               	rlcf	?___awdiv+1,f,c
  2992  00183C  90D8               	bcf	status,0,c
  2993  00183E  3634               	rlcf	?___awdiv,f,c
  2994  001840  3635               	rlcf	?___awdiv+1,f,c
  2995  001842  0E24               	movlw	36
  2996  001844  2634               	addwf	?___awdiv,f,c
  2997  001846  0E00               	movlw	0
  2998  001848  2235               	addwfc	?___awdiv+1,f,c
  2999  00184A  0E35               	movlw	low __npowers_
  3000  00184C  2434               	addwf	?___awdiv,w,c
  3001  00184E  6EF6               	movwf	tblptrl,c
  3002  001850  0E06               	movlw	high __npowers_
  3003  001852  2035               	addwfc	?___awdiv+1,w,c
  3004  001854  6EF7               	movwf	tblptrh,c
  3005  001856                     	if	0	;There are less than 3 active tblptr bytes
  3006  001856                     	endif
  3007  001856  0009               	tblrd		*+
  3008  001858  CFF5 F040          	movff	tablat,___flmul@a
  3009  00185C  0009               	tblrd		*+
  3010  00185E  CFF5 F041          	movff	tablat,___flmul@a+1
  3011  001862  0009               	tblrd		*+
  3012  001864  CFF5 F042          	movff	tablat,___flmul@a+2
  3013  001868  000A               	tblrd		*-
  3014  00186A  CFF5 F043          	movff	tablat,___flmul@a+3
  3015  00186E  0E00               	movlw	0
  3016  001870  6E37               	movwf	___awdiv@divisor+1,c
  3017  001872  0E64               	movlw	100
  3018  001874  6E36               	movwf	___awdiv@divisor,c
  3019  001876  C09D  F034         	movff	fround@prec,___awdiv@dividend
  3020  00187A  6A35               	clrf	___awdiv@dividend+1,c
  3021  00187C  ECCE  F010         	call	___awdiv	;wreg free
  3022  001880  90D8               	bcf	status,0,c
  3023  001882  3634               	rlcf	?___awdiv,f,c
  3024  001884  3635               	rlcf	?___awdiv+1,f,c
  3025  001886  90D8               	bcf	status,0,c
  3026  001888  3634               	rlcf	?___awdiv,f,c
  3027  00188A  3635               	rlcf	?___awdiv+1,f,c
  3028  00188C  0E48               	movlw	72
  3029  00188E  2634               	addwf	?___awdiv,f,c
  3030  001890  0E00               	movlw	0
  3031  001892  2235               	addwfc	?___awdiv+1,f,c
  3032  001894  0E35               	movlw	low __npowers_
  3033  001896  2434               	addwf	?___awdiv,w,c
  3034  001898  6EF6               	movwf	tblptrl,c
  3035  00189A  0E06               	movlw	high __npowers_
  3036  00189C  2035               	addwfc	?___awdiv+1,w,c
  3037  00189E  6EF7               	movwf	tblptrh,c
  3038  0018A0                     	if	0	;There are less than 3 active tblptr bytes
  3039  0018A0                     	endif
  3040  0018A0  0009               	tblrd		*+
  3041  0018A2  CFF5 F03C          	movff	tablat,___flmul@b
  3042  0018A6  0009               	tblrd		*+
  3043  0018A8  CFF5 F03D          	movff	tablat,___flmul@b+1
  3044  0018AC  0009               	tblrd		*+
  3045  0018AE  CFF5 F03E          	movff	tablat,___flmul@b+2
  3046  0018B2  000A               	tblrd		*-
  3047  0018B4  CFF5 F03F          	movff	tablat,___flmul@b+3
  3048  0018B8  ECBA  F008         	call	___flmul	;wreg free
  3049  0018BC  C03C  F099         	movff	?___flmul,_fround$1395
  3050  0018C0  C03D  F09A         	movff	?___flmul+1,_fround$1395+1
  3051  0018C4  C03E  F09B         	movff	?___flmul+2,_fround$1395+2
  3052  0018C8  C03F  F09C         	movff	?___flmul+3,_fround$1395+3
  3053                           
  3054                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3055  0018CC  0E00               	movlw	0
  3056  0018CE  6E31               	movwf	___awmod@divisor+1,c
  3057  0018D0  0E0A               	movlw	10
  3058  0018D2  6E30               	movwf	___awmod@divisor,c
  3059  0018D4  C09D  F02E         	movff	fround@prec,___awmod@dividend
  3060  0018D8  6A2F               	clrf	___awmod@dividend+1,c
  3061  0018DA  EC8A  F011         	call	___awmod	;wreg free
  3062  0018DE  90D8               	bcf	status,0,c
  3063  0018E0  362E               	rlcf	?___awmod,f,c
  3064  0018E2  362F               	rlcf	?___awmod+1,f,c
  3065  0018E4  90D8               	bcf	status,0,c
  3066  0018E6  362E               	rlcf	?___awmod,f,c
  3067  0018E8  362F               	rlcf	?___awmod+1,f,c
  3068  0018EA  0E35               	movlw	low __npowers_
  3069  0018EC  242E               	addwf	?___awmod,w,c
  3070  0018EE  6EF6               	movwf	tblptrl,c
  3071  0018F0  0E06               	movlw	high __npowers_
  3072  0018F2  202F               	addwfc	?___awmod+1,w,c
  3073  0018F4  6EF7               	movwf	tblptrh,c
  3074  0018F6                     	if	0	;There are less than 3 active tblptr bytes
  3075  0018F6                     	endif
  3076  0018F6  0009               	tblrd		*+
  3077  0018F8  CFF5 F040          	movff	tablat,___flmul@a
  3078  0018FC  0009               	tblrd		*+
  3079  0018FE  CFF5 F041          	movff	tablat,___flmul@a+1
  3080  001902  0009               	tblrd		*+
  3081  001904  CFF5 F042          	movff	tablat,___flmul@a+2
  3082  001908  000A               	tblrd		*-
  3083  00190A  CFF5 F043          	movff	tablat,___flmul@a+3
  3084  00190E  C099  F03C         	movff	_fround$1395,___flmul@b
  3085  001912  C09A  F03D         	movff	_fround$1395+1,___flmul@b+1
  3086  001916  C09B  F03E         	movff	_fround$1395+2,___flmul@b+2
  3087  00191A  C09C  F03F         	movff	_fround$1395+3,___flmul@b+3
  3088  00191E  ECBA  F008         	call	___flmul	;wreg free
  3089  001922  C03C  F095         	movff	?___flmul,_fround$1396
  3090  001926  C03D  F096         	movff	?___flmul+1,_fround$1396+1
  3091  00192A  C03E  F097         	movff	?___flmul+2,_fround$1396+2
  3092  00192E  C03F  F098         	movff	?___flmul+3,_fround$1396+3
  3093                           
  3094                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3095  001932  C095  F03C         	movff	_fround$1396,___flmul@b
  3096  001936  C096  F03D         	movff	_fround$1396+1,___flmul@b+1
  3097  00193A  C097  F03E         	movff	_fround$1396+2,___flmul@b+2
  3098  00193E  C098  F03F         	movff	_fround$1396+3,___flmul@b+3
  3099  001942  0E00               	movlw	0
  3100  001944  6E40               	movwf	___flmul@a,c
  3101  001946  0E00               	movlw	0
  3102  001948  6E41               	movwf	___flmul@a+1,c
  3103  00194A  0E00               	movlw	0
  3104  00194C  6E42               	movwf	___flmul@a+2,c
  3105  00194E  0E3F               	movlw	63
  3106  001950  6E43               	movwf	___flmul@a+3,c
  3107  001952  ECBA  F008         	call	___flmul	;wreg free
  3108  001956  C03C  F091         	movff	?___flmul,?_fround
  3109  00195A  C03D  F092         	movff	?___flmul+1,?_fround+1
  3110  00195E  C03E  F093         	movff	?___flmul+2,?_fround+2
  3111  001962  C03F  F094         	movff	?___flmul+3,?_fround+3
  3112  001966  0012               	return	
  3113  001968                     l189:
  3114                           
  3115                           ;doprnt.c: 415: else if(prec > 10)
  3116  001968  0E0A               	movlw	10
  3117  00196A  0100               	movlb	0	; () banked
  3118  00196C  659D               	cpfsgt	fround@prec& (0+255),b
  3119  00196E  D06B               	goto	l192
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3123  001970  0E00               	movlw	0
  3124  001972  6E31               	movwf	___awmod@divisor+1,c
  3125  001974  0E0A               	movlw	10
  3126  001976  6E30               	movwf	___awmod@divisor,c
  3127  001978  C09D  F02E         	movff	fround@prec,___awmod@dividend
  3128  00197C  6A2F               	clrf	___awmod@dividend+1,c
  3129  00197E  EC8A  F011         	call	___awmod	;wreg free
  3130  001982  90D8               	bcf	status,0,c
  3131  001984  362E               	rlcf	?___awmod,f,c
  3132  001986  362F               	rlcf	?___awmod+1,f,c
  3133  001988  90D8               	bcf	status,0,c
  3134  00198A  362E               	rlcf	?___awmod,f,c
  3135  00198C  362F               	rlcf	?___awmod+1,f,c
  3136  00198E  0E35               	movlw	low __npowers_
  3137  001990  242E               	addwf	?___awmod,w,c
  3138  001992  6EF6               	movwf	tblptrl,c
  3139  001994  0E06               	movlw	high __npowers_
  3140  001996  202F               	addwfc	?___awmod+1,w,c
  3141  001998  6EF7               	movwf	tblptrh,c
  3142  00199A                     	if	0	;There are less than 3 active tblptr bytes
  3143  00199A                     	endif
  3144  00199A  0009               	tblrd		*+
  3145  00199C  CFF5 F040          	movff	tablat,___flmul@a
  3146  0019A0  0009               	tblrd		*+
  3147  0019A2  CFF5 F041          	movff	tablat,___flmul@a+1
  3148  0019A6  0009               	tblrd		*+
  3149  0019A8  CFF5 F042          	movff	tablat,___flmul@a+2
  3150  0019AC  000A               	tblrd		*-
  3151  0019AE  CFF5 F043          	movff	tablat,___flmul@a+3
  3152  0019B2  0E00               	movlw	0
  3153  0019B4  6E37               	movwf	___awdiv@divisor+1,c
  3154  0019B6  0E0A               	movlw	10
  3155  0019B8  6E36               	movwf	___awdiv@divisor,c
  3156  0019BA  C09D  F034         	movff	fround@prec,___awdiv@dividend
  3157  0019BE  6A35               	clrf	___awdiv@dividend+1,c
  3158  0019C0  ECCE  F010         	call	___awdiv	;wreg free
  3159  0019C4  90D8               	bcf	status,0,c
  3160  0019C6  3634               	rlcf	?___awdiv,f,c
  3161  0019C8  3635               	rlcf	?___awdiv+1,f,c
  3162  0019CA  90D8               	bcf	status,0,c
  3163  0019CC  3634               	rlcf	?___awdiv,f,c
  3164  0019CE  3635               	rlcf	?___awdiv+1,f,c
  3165  0019D0  0E24               	movlw	36
  3166  0019D2  2634               	addwf	?___awdiv,f,c
  3167  0019D4  0E00               	movlw	0
  3168  0019D6  2235               	addwfc	?___awdiv+1,f,c
  3169  0019D8  0E35               	movlw	low __npowers_
  3170  0019DA  2434               	addwf	?___awdiv,w,c
  3171  0019DC  6EF6               	movwf	tblptrl,c
  3172  0019DE  0E06               	movlw	high __npowers_
  3173  0019E0  2035               	addwfc	?___awdiv+1,w,c
  3174  0019E2  6EF7               	movwf	tblptrh,c
  3175  0019E4                     	if	0	;There are less than 3 active tblptr bytes
  3176  0019E4                     	endif
  3177  0019E4  0009               	tblrd		*+
  3178  0019E6  CFF5 F03C          	movff	tablat,___flmul@b
  3179  0019EA  0009               	tblrd		*+
  3180  0019EC  CFF5 F03D          	movff	tablat,___flmul@b+1
  3181  0019F0  0009               	tblrd		*+
  3182  0019F2  CFF5 F03E          	movff	tablat,___flmul@b+2
  3183  0019F6  000A               	tblrd		*-
  3184  0019F8  CFF5 F03F          	movff	tablat,___flmul@b+3
  3185  0019FC  ECBA  F008         	call	___flmul	;wreg free
  3186  001A00  C03C  F099         	movff	?___flmul,_fround$1395
  3187  001A04  C03D  F09A         	movff	?___flmul+1,_fround$1395+1
  3188  001A08  C03E  F09B         	movff	?___flmul+2,_fround$1395+2
  3189  001A0C  C03F  F09C         	movff	?___flmul+3,_fround$1395+3
  3190                           
  3191                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3192  001A10  C099  F03C         	movff	_fround$1395,___flmul@b
  3193  001A14  C09A  F03D         	movff	_fround$1395+1,___flmul@b+1
  3194  001A18  C09B  F03E         	movff	_fround$1395+2,___flmul@b+2
  3195  001A1C  C09C  F03F         	movff	_fround$1395+3,___flmul@b+3
  3196  001A20  0E00               	movlw	0
  3197  001A22  6E40               	movwf	___flmul@a,c
  3198  001A24  0E00               	movlw	0
  3199  001A26  6E41               	movwf	___flmul@a+1,c
  3200  001A28  0E00               	movlw	0
  3201  001A2A  6E42               	movwf	___flmul@a+2,c
  3202  001A2C  0E3F               	movlw	63
  3203  001A2E  6E43               	movwf	___flmul@a+3,c
  3204  001A30  ECBA  F008         	call	___flmul	;wreg free
  3205  001A34  C03C  F091         	movff	?___flmul,?_fround
  3206  001A38  C03D  F092         	movff	?___flmul+1,?_fround+1
  3207  001A3C  C03E  F093         	movff	?___flmul+2,?_fround+2
  3208  001A40  C03F  F094         	movff	?___flmul+3,?_fround+3
  3209  001A44  0012               	return	
  3210  001A46                     l192:
  3211                           
  3212                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3213  001A46  0100               	movlb	0	; () banked
  3214  001A48  519D               	movf	fround@prec& (0+255),w,b
  3215  001A4A  0D04               	mullw	4
  3216  001A4C  0E35               	movlw	low __npowers_
  3217  001A4E  24F3               	addwf	prodl,w,c
  3218  001A50  6EF6               	movwf	tblptrl,c
  3219  001A52  0E06               	movlw	high __npowers_
  3220  001A54  20F4               	addwfc	prodh,w,c
  3221  001A56  6EF7               	movwf	tblptrh,c
  3222  001A58                     	if	0	;There are less than 3 active tblptr bytes
  3223  001A58                     	endif
  3224  001A58  0009               	tblrd		*+
  3225  001A5A  CFF5 F03C          	movff	tablat,___flmul@b
  3226  001A5E  0009               	tblrd		*+
  3227  001A60  CFF5 F03D          	movff	tablat,___flmul@b+1
  3228  001A64  0009               	tblrd		*+
  3229  001A66  CFF5 F03E          	movff	tablat,___flmul@b+2
  3230  001A6A  000A               	tblrd		*-
  3231  001A6C  CFF5 F03F          	movff	tablat,___flmul@b+3
  3232  001A70  0E00               	movlw	0
  3233  001A72  6E40               	movwf	___flmul@a,c
  3234  001A74  0E00               	movlw	0
  3235  001A76  6E41               	movwf	___flmul@a+1,c
  3236  001A78  0E00               	movlw	0
  3237  001A7A  6E42               	movwf	___flmul@a+2,c
  3238  001A7C  0E3F               	movlw	63
  3239  001A7E  6E43               	movwf	___flmul@a+3,c
  3240  001A80  ECBA  F008         	call	___flmul	;wreg free
  3241  001A84  C03C  F091         	movff	?___flmul,?_fround
  3242  001A88  C03D  F092         	movff	?___flmul+1,?_fround+1
  3243  001A8C  C03E  F093         	movff	?___flmul+2,?_fround+2
  3244  001A90  C03F  F094         	movff	?___flmul+3,?_fround+3
  3245  001A94  0012               	return	
  3246  001A96                     __end_of_fround:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           prodh	equ	0xFF4
  3253                           prodl	equ	0xFF3
  3254                           intcon	equ	0xFF2
  3255                           postinc0	equ	0xFEE
  3256                           wreg	equ	0xFE8
  3257                           indf2	equ	0xFDF
  3258                           postinc2	equ	0xFDE
  3259                           fsr2h	equ	0xFDA
  3260                           fsr2l	equ	0xFD9
  3261                           status	equ	0xFD8
  3262                           
  3263 ;; *************** function ___flmul *****************
  3264 ;; Defined at:
  3265 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;  b               4   59[COMRAM] unsigned char 
  3268 ;;  a               4   63[COMRAM] unsigned char 
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;  prod            4   11[BANK0 ] struct .
  3271 ;;  grs             4    6[BANK0 ] unsigned long 
  3272 ;;  temp            2   15[BANK0 ] struct .
  3273 ;;  bexp            1   10[BANK0 ] unsigned char 
  3274 ;;  aexp            1    5[BANK0 ] unsigned char 
  3275 ;;  sign            1    4[BANK0 ] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  4   59[COMRAM] unsigned char 
  3278 ;; Registers used:
  3279 ;;		wreg, status,2, status,0, prodl, prodh
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3285 ;;      Params:         8       0       0       0       0       0       0
  3286 ;;      Locals:         0      13       0       0       0       0       0
  3287 ;;      Temps:          0       4       0       0       0       0       0
  3288 ;;      Totals:         8      17       0       0       0       0       0
  3289 ;;Total ram usage:       25 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    4
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_Mode2
  3296 ;;		_fround
  3297 ;;		_scale
  3298 ;;		_sprintf
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text10
  3303  001174                     __ptext10:
  3304                           	opt stack 0
  3305  001174                     ___flmul:
  3306                           	opt stack 23
  3307                           
  3308                           ;incstack = 0
  3309  001174  503F               	movf	___flmul@b+3,w,c
  3310  001176  0B80               	andlw	128
  3311  001178  0100               	movlb	0	; () banked
  3312  00117A  6F84               	movwf	___flmul@sign& (0+255),b
  3313  00117C  503F               	movf	___flmul@b+3,w,c
  3314  00117E  243F               	addwf	___flmul@b+3,w,c
  3315  001180  6F8A               	movwf	___flmul@bexp& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318  001182  BE3E               	btfsc	___flmul@b+2,7,c
  3319                           
  3320                           ; BSR set to: 0
  3321  001184  818A               	bsf	___flmul@bexp& (0+255),0,b
  3322                           
  3323                           ; BSR set to: 0
  3324                           
  3325                           ; BSR set to: 0
  3326  001186  518A               	movf	___flmul@bexp& (0+255),w,b
  3327  001188  B4D8               	btfsc	status,2,c
  3328  00118A  D00D               	goto	l811
  3329                           
  3330                           ; BSR set to: 0
  3331  00118C  298A               	incf	___flmul@bexp& (0+255),w,b
  3332  00118E  A4D8               	btfss	status,2,c
  3333  001190  D008               	goto	l812
  3334                           
  3335                           ; BSR set to: 0
  3336  001192  0E00               	movlw	0
  3337  001194  6E3C               	movwf	___flmul@b,c
  3338  001196  0E00               	movlw	0
  3339  001198  6E3D               	movwf	___flmul@b+1,c
  3340  00119A  0E00               	movlw	0
  3341  00119C  6E3E               	movwf	___flmul@b+2,c
  3342  00119E  0E00               	movlw	0
  3343  0011A0  6E3F               	movwf	___flmul@b+3,c
  3344  0011A2                     l812:
  3345                           
  3346                           ; BSR set to: 0
  3347                           
  3348                           ; BSR set to: 0
  3349  0011A2  8E3E               	bsf	___flmul@b+2,7,c
  3350  0011A4  D008               	goto	l813
  3351  0011A6                     l811:
  3352                           
  3353                           ; BSR set to: 0
  3354                           
  3355                           ; BSR set to: 0
  3356  0011A6  0E00               	movlw	0
  3357  0011A8  6E3C               	movwf	___flmul@b,c
  3358  0011AA  0E00               	movlw	0
  3359  0011AC  6E3D               	movwf	___flmul@b+1,c
  3360  0011AE  0E00               	movlw	0
  3361  0011B0  6E3E               	movwf	___flmul@b+2,c
  3362  0011B2  0E00               	movlw	0
  3363  0011B4  6E3F               	movwf	___flmul@b+3,c
  3364  0011B6                     l813:
  3365                           
  3366                           ; BSR set to: 0
  3367                           
  3368                           ; BSR set to: 0
  3369  0011B6  5043               	movf	___flmul@a+3,w,c
  3370  0011B8  0B80               	andlw	128
  3371  0011BA  1B84               	xorwf	___flmul@sign& (0+255),f,b
  3372                           
  3373                           ; BSR set to: 0
  3374  0011BC  5043               	movf	___flmul@a+3,w,c
  3375  0011BE  2443               	addwf	___flmul@a+3,w,c
  3376  0011C0  6F85               	movwf	___flmul@aexp& (0+255),b
  3377                           
  3378                           ; BSR set to: 0
  3379  0011C2  BE42               	btfsc	___flmul@a+2,7,c
  3380                           
  3381                           ; BSR set to: 0
  3382  0011C4  8185               	bsf	___flmul@aexp& (0+255),0,b
  3383                           
  3384                           ; BSR set to: 0
  3385                           
  3386                           ; BSR set to: 0
  3387  0011C6  5185               	movf	___flmul@aexp& (0+255),w,b
  3388  0011C8  B4D8               	btfsc	status,2,c
  3389  0011CA  D00D               	goto	l815
  3390                           
  3391                           ; BSR set to: 0
  3392  0011CC  2985               	incf	___flmul@aexp& (0+255),w,b
  3393  0011CE  A4D8               	btfss	status,2,c
  3394  0011D0  D008               	goto	l816
  3395                           
  3396                           ; BSR set to: 0
  3397  0011D2  0E00               	movlw	0
  3398  0011D4  6E40               	movwf	___flmul@a,c
  3399  0011D6  0E00               	movlw	0
  3400  0011D8  6E41               	movwf	___flmul@a+1,c
  3401  0011DA  0E00               	movlw	0
  3402  0011DC  6E42               	movwf	___flmul@a+2,c
  3403  0011DE  0E00               	movlw	0
  3404  0011E0  6E43               	movwf	___flmul@a+3,c
  3405  0011E2                     l816:
  3406                           
  3407                           ; BSR set to: 0
  3408                           
  3409                           ; BSR set to: 0
  3410  0011E2  8E42               	bsf	___flmul@a+2,7,c
  3411  0011E4  D008               	goto	l817
  3412  0011E6                     l815:
  3413                           
  3414                           ; BSR set to: 0
  3415                           
  3416                           ; BSR set to: 0
  3417  0011E6  0E00               	movlw	0
  3418  0011E8  6E40               	movwf	___flmul@a,c
  3419  0011EA  0E00               	movlw	0
  3420  0011EC  6E41               	movwf	___flmul@a+1,c
  3421  0011EE  0E00               	movlw	0
  3422  0011F0  6E42               	movwf	___flmul@a+2,c
  3423  0011F2  0E00               	movlw	0
  3424  0011F4  6E43               	movwf	___flmul@a+3,c
  3425  0011F6                     l817:
  3426                           
  3427                           ; BSR set to: 0
  3428  0011F6  5185               	movf	___flmul@aexp& (0+255),w,b
  3429  0011F8  B4D8               	btfsc	status,2,c
  3430  0011FA  D003               	goto	u3800
  3431                           
  3432                           ; BSR set to: 0
  3433  0011FC  518A               	movf	___flmul@bexp& (0+255),w,b
  3434  0011FE  A4D8               	btfss	status,2,c
  3435  001200  D009               	goto	l818
  3436  001202                     u3800:
  3437                           
  3438                           ; BSR set to: 0
  3439                           
  3440                           ; BSR set to: 0
  3441  001202  0E00               	movlw	0
  3442  001204  6E3C               	movwf	?___flmul,c
  3443  001206  0E00               	movlw	0
  3444  001208  6E3D               	movwf	?___flmul+1,c
  3445  00120A  0E00               	movlw	0
  3446  00120C  6E3E               	movwf	?___flmul+2,c
  3447  00120E  0E00               	movlw	0
  3448  001210  6E3F               	movwf	?___flmul+3,c
  3449                           
  3450                           ; BSR set to: 0
  3451  001212  0012               	return	
  3452  001214                     l818:
  3453                           
  3454                           ; BSR set to: 0
  3455                           
  3456                           ; BSR set to: 0
  3457  001214  5042               	movf	___flmul@a+2,w,c
  3458  001216  023C               	mulwf	___flmul@b,c
  3459  001218  CFF3 F08F          	movff	prodl,___flmul@temp
  3460  00121C  CFF4 F090          	movff	prodh,___flmul@temp+1
  3461                           
  3462                           ; BSR set to: 0
  3463  001220  518F               	movf	___flmul@temp& (0+255),w,b
  3464  001222  6F86               	movwf	___flmul@grs& (0+255),b
  3465  001224  6B87               	clrf	(___flmul@grs+1)& (0+255),b
  3466  001226  6B88               	clrf	(___flmul@grs+2)& (0+255),b
  3467  001228  6B89               	clrf	(___flmul@grs+3)& (0+255),b
  3468                           
  3469                           ; BSR set to: 0
  3470  00122A  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3471  00122C  6F8B               	movwf	___flmul@prod& (0+255),b
  3472  00122E  6B8C               	clrf	(___flmul@prod+1)& (0+255),b
  3473  001230  6B8D               	clrf	(___flmul@prod+2)& (0+255),b
  3474  001232  6B8E               	clrf	(___flmul@prod+3)& (0+255),b
  3475  001234  5041               	movf	___flmul@a+1,w,c
  3476  001236  023D               	mulwf	___flmul@b+1,c
  3477  001238  CFF3 F08F          	movff	prodl,___flmul@temp
  3478  00123C  CFF4 F090          	movff	prodh,___flmul@temp+1
  3479                           
  3480                           ; BSR set to: 0
  3481  001240  518F               	movf	___flmul@temp& (0+255),w,b
  3482  001242  2786               	addwf	___flmul@grs& (0+255),f,b
  3483  001244  0E00               	movlw	0
  3484  001246  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
  3485  001248  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
  3486  00124A  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
  3487                           
  3488                           ; BSR set to: 0
  3489  00124C  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3490  00124E  278B               	addwf	___flmul@prod& (0+255),f,b
  3491  001250  0E00               	movlw	0
  3492  001252  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
  3493  001254  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
  3494  001256  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
  3495  001258  5040               	movf	___flmul@a,w,c
  3496  00125A  023E               	mulwf	___flmul@b+2,c
  3497  00125C  CFF3 F08F          	movff	prodl,___flmul@temp
  3498  001260  CFF4 F090          	movff	prodh,___flmul@temp+1
  3499                           
  3500                           ; BSR set to: 0
  3501  001264  518F               	movf	___flmul@temp& (0+255),w,b
  3502  001266  2786               	addwf	___flmul@grs& (0+255),f,b
  3503  001268  0E00               	movlw	0
  3504  00126A  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
  3505  00126C  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
  3506  00126E  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
  3507                           
  3508                           ; BSR set to: 0
  3509  001270  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3510  001272  278B               	addwf	___flmul@prod& (0+255),f,b
  3511  001274  0E00               	movlw	0
  3512  001276  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
  3513  001278  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
  3514  00127A  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
  3515                           
  3516                           ; BSR set to: 0
  3517  00127C  C088  F089         	movff	___flmul@grs+2,___flmul@grs+3
  3518  001280  C087  F088         	movff	___flmul@grs+1,___flmul@grs+2
  3519  001284  C086  F087         	movff	___flmul@grs,___flmul@grs+1
  3520  001288  6B86               	clrf	___flmul@grs& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523  00128A  5040               	movf	___flmul@a,w,c
  3524  00128C  023D               	mulwf	___flmul@b+1,c
  3525  00128E  CFF3 F08F          	movff	prodl,___flmul@temp
  3526  001292  CFF4 F090          	movff	prodh,___flmul@temp+1
  3527                           
  3528                           ; BSR set to: 0
  3529  001296  518F               	movf	___flmul@temp& (0+255),w,b
  3530  001298  2786               	addwf	___flmul@grs& (0+255),f,b
  3531  00129A  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3532  00129C  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
  3533  00129E  0E00               	movlw	0
  3534  0012A0  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
  3535  0012A2  0E00               	movlw	0
  3536  0012A4  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
  3537                           
  3538                           ; BSR set to: 0
  3539  0012A6  5041               	movf	___flmul@a+1,w,c
  3540  0012A8  023C               	mulwf	___flmul@b,c
  3541  0012AA  CFF3 F08F          	movff	prodl,___flmul@temp
  3542  0012AE  CFF4 F090          	movff	prodh,___flmul@temp+1
  3543                           
  3544                           ; BSR set to: 0
  3545  0012B2  518F               	movf	___flmul@temp& (0+255),w,b
  3546  0012B4  2786               	addwf	___flmul@grs& (0+255),f,b
  3547  0012B6  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3548  0012B8  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
  3549  0012BA  0E00               	movlw	0
  3550  0012BC  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
  3551  0012BE  0E00               	movlw	0
  3552  0012C0  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
  3553                           
  3554                           ; BSR set to: 0
  3555  0012C2  C088  F089         	movff	___flmul@grs+2,___flmul@grs+3
  3556  0012C6  C087  F088         	movff	___flmul@grs+1,___flmul@grs+2
  3557  0012CA  C086  F087         	movff	___flmul@grs,___flmul@grs+1
  3558  0012CE  6B86               	clrf	___flmul@grs& (0+255),b
  3559  0012D0  5040               	movf	___flmul@a,w,c
  3560  0012D2  023C               	mulwf	___flmul@b,c
  3561  0012D4  CFF3 F08F          	movff	prodl,___flmul@temp
  3562  0012D8  CFF4 F090          	movff	prodh,___flmul@temp+1
  3563                           
  3564                           ; BSR set to: 0
  3565  0012DC  518F               	movf	___flmul@temp& (0+255),w,b
  3566  0012DE  2786               	addwf	___flmul@grs& (0+255),f,b
  3567  0012E0  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3568  0012E2  2387               	addwfc	(___flmul@grs+1)& (0+255),f,b
  3569  0012E4  0E00               	movlw	0
  3570  0012E6  2388               	addwfc	(___flmul@grs+2)& (0+255),f,b
  3571  0012E8  0E00               	movlw	0
  3572  0012EA  2389               	addwfc	(___flmul@grs+3)& (0+255),f,b
  3573                           
  3574                           ; BSR set to: 0
  3575  0012EC  5042               	movf	___flmul@a+2,w,c
  3576  0012EE  023D               	mulwf	___flmul@b+1,c
  3577  0012F0  CFF3 F08F          	movff	prodl,___flmul@temp
  3578  0012F4  CFF4 F090          	movff	prodh,___flmul@temp+1
  3579  0012F8  518F               	movf	___flmul@temp& (0+255),w,b
  3580  0012FA  278B               	addwf	___flmul@prod& (0+255),f,b
  3581  0012FC  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3582  0012FE  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
  3583  001300  0E00               	movlw	0
  3584  001302  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
  3585  001304  0E00               	movlw	0
  3586  001306  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
  3587                           
  3588                           ; BSR set to: 0
  3589  001308  5041               	movf	___flmul@a+1,w,c
  3590  00130A  023E               	mulwf	___flmul@b+2,c
  3591  00130C  CFF3 F08F          	movff	prodl,___flmul@temp
  3592  001310  CFF4 F090          	movff	prodh,___flmul@temp+1
  3593                           
  3594                           ; BSR set to: 0
  3595  001314  518F               	movf	___flmul@temp& (0+255),w,b
  3596  001316  278B               	addwf	___flmul@prod& (0+255),f,b
  3597  001318  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3598  00131A  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
  3599  00131C  0E00               	movlw	0
  3600  00131E  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
  3601  001320  0E00               	movlw	0
  3602  001322  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
  3603  001324  5042               	movf	___flmul@a+2,w,c
  3604  001326  023E               	mulwf	___flmul@b+2,c
  3605  001328  CFF3 F08F          	movff	prodl,___flmul@temp
  3606  00132C  CFF4 F090          	movff	prodh,___flmul@temp+1
  3607                           
  3608                           ; BSR set to: 0
  3609  001330  518F               	movf	___flmul@temp& (0+255),w,b
  3610  001332  6F80               	movwf	??___flmul& (0+255),b
  3611  001334  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3612  001336  6F81               	movwf	(??___flmul+1)& (0+255),b
  3613  001338  6B82               	clrf	(??___flmul+2)& (0+255),b
  3614  00133A  6B83               	clrf	(??___flmul+3)& (0+255),b
  3615  00133C  C082  F083         	movff	??___flmul+2,??___flmul+3
  3616  001340  C081  F082         	movff	??___flmul+1,??___flmul+2
  3617  001344  C080  F081         	movff	??___flmul,??___flmul+1
  3618  001348  6B80               	clrf	??___flmul& (0+255),b
  3619  00134A  5180               	movf	??___flmul& (0+255),w,b
  3620  00134C  278B               	addwf	___flmul@prod& (0+255),f,b
  3621  00134E  5181               	movf	(??___flmul+1)& (0+255),w,b
  3622  001350  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
  3623  001352  5182               	movf	(??___flmul+2)& (0+255),w,b
  3624  001354  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
  3625  001356  5183               	movf	(??___flmul+3)& (0+255),w,b
  3626  001358  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
  3627                           
  3628                           ; BSR set to: 0
  3629  00135A  C086  F080         	movff	___flmul@grs,??___flmul
  3630  00135E  C087  F081         	movff	___flmul@grs+1,??___flmul+1
  3631  001362  C088  F082         	movff	___flmul@grs+2,??___flmul+2
  3632  001366  C089  F083         	movff	___flmul@grs+3,??___flmul+3
  3633  00136A  0E19               	movlw	25
  3634  00136C  D005               	goto	u3810
  3635  00136E                     u3815:
  3636  00136E  90D8               	bcf	status,0,c
  3637  001370  3383               	rrcf	(??___flmul+3)& (0+255),f,b
  3638  001372  3382               	rrcf	(??___flmul+2)& (0+255),f,b
  3639  001374  3381               	rrcf	(??___flmul+1)& (0+255),f,b
  3640  001376  3380               	rrcf	??___flmul& (0+255),f,b
  3641  001378                     u3810:
  3642  001378  2EE8               	decfsz	wreg,f,c
  3643  00137A  D7F9               	goto	u3815
  3644  00137C  5180               	movf	??___flmul& (0+255),w,b
  3645  00137E  278B               	addwf	___flmul@prod& (0+255),f,b
  3646  001380  5181               	movf	(??___flmul+1)& (0+255),w,b
  3647  001382  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
  3648  001384  5182               	movf	(??___flmul+2)& (0+255),w,b
  3649  001386  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
  3650  001388  5183               	movf	(??___flmul+3)& (0+255),w,b
  3651  00138A  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
  3652                           
  3653                           ; BSR set to: 0
  3654  00138C  C088  F089         	movff	___flmul@grs+2,___flmul@grs+3
  3655  001390  C087  F088         	movff	___flmul@grs+1,___flmul@grs+2
  3656  001394  C086  F087         	movff	___flmul@grs,___flmul@grs+1
  3657  001398  6B86               	clrf	___flmul@grs& (0+255),b
  3658                           
  3659                           ; BSR set to: 0
  3660  00139A  5185               	movf	___flmul@aexp& (0+255),w,b
  3661  00139C  C08A  F080         	movff	___flmul@bexp,??___flmul
  3662  0013A0  6B81               	clrf	(??___flmul+1)& (0+255),b
  3663  0013A2  2780               	addwf	??___flmul& (0+255),f,b
  3664  0013A4  0E00               	movlw	0
  3665  0013A6  2381               	addwfc	(??___flmul+1)& (0+255),f,b
  3666  0013A8  0E82               	movlw	130
  3667  0013AA  2580               	addwf	??___flmul& (0+255),w,b
  3668  0013AC  6F8F               	movwf	___flmul@temp& (0+255),b
  3669  0013AE  0EFF               	movlw	255
  3670  0013B0  2181               	addwfc	(??___flmul+1)& (0+255),w,b
  3671  0013B2  6F90               	movwf	(___flmul@temp+1)& (0+255),b
  3672  0013B4  D00F               	goto	l822
  3673  0013B6                     
  3674                           ; BSR set to: 0
  3675                           
  3676                           ; BSR set to: 0
  3677  0013B6  90D8               	bcf	status,0,c
  3678  0013B8  378B               	rlcf	___flmul@prod& (0+255),f,b
  3679  0013BA  378C               	rlcf	(___flmul@prod+1)& (0+255),f,b
  3680  0013BC  378D               	rlcf	(___flmul@prod+2)& (0+255),f,b
  3681  0013BE  378E               	rlcf	(___flmul@prod+3)& (0+255),f,b
  3682                           
  3683                           ; BSR set to: 0
  3684  0013C0  BF89               	btfsc	(___flmul@grs+3)& (0+255),7,b
  3685                           
  3686                           ; BSR set to: 0
  3687  0013C2  818B               	bsf	___flmul@prod& (0+255),0,b
  3688                           
  3689                           ; BSR set to: 0
  3690  0013C4  90D8               	bcf	status,0,c
  3691  0013C6  3786               	rlcf	___flmul@grs& (0+255),f,b
  3692  0013C8  3787               	rlcf	(___flmul@grs+1)& (0+255),f,b
  3693  0013CA  3788               	rlcf	(___flmul@grs+2)& (0+255),f,b
  3694  0013CC  3789               	rlcf	(___flmul@grs+3)& (0+255),f,b
  3695  0013CE  078F               	decf	___flmul@temp& (0+255),f,b
  3696  0013D0  A0D8               	btfss	status,0,c
  3697  0013D2  0790               	decf	(___flmul@temp+1)& (0+255),f,b
  3698  0013D4                     l822:
  3699                           
  3700                           ; BSR set to: 0
  3701                           
  3702                           ; BSR set to: 0
  3703  0013D4  AF8D               	btfss	(___flmul@prod+2)& (0+255),7,b
  3704  0013D6  D7EF               	goto	l823
  3705                           
  3706                           ; BSR set to: 0
  3707                           
  3708                           ; BSR set to: 0
  3709  0013D8  0E00               	movlw	0
  3710  0013DA  6F85               	movwf	___flmul@aexp& (0+255),b
  3711                           
  3712                           ; BSR set to: 0
  3713  0013DC  AF89               	btfss	(___flmul@grs+3)& (0+255),7,b
  3714  0013DE  D016               	goto	l829
  3715                           
  3716                           ; BSR set to: 0
  3717  0013E0  0EFF               	movlw	255
  3718  0013E2  1586               	andwf	___flmul@grs& (0+255),w,b
  3719  0013E4  6F80               	movwf	??___flmul& (0+255),b
  3720  0013E6  0EFF               	movlw	255
  3721  0013E8  1587               	andwf	(___flmul@grs+1)& (0+255),w,b
  3722  0013EA  6F81               	movwf	(??___flmul+1)& (0+255),b
  3723  0013EC  0EFF               	movlw	255
  3724  0013EE  1588               	andwf	(___flmul@grs+2)& (0+255),w,b
  3725  0013F0  6F82               	movwf	(??___flmul+2)& (0+255),b
  3726  0013F2  0E7F               	movlw	127
  3727  0013F4  1589               	andwf	(___flmul@grs+3)& (0+255),w,b
  3728  0013F6  6F83               	movwf	(??___flmul+3)& (0+255),b
  3729  0013F8  5180               	movf	??___flmul& (0+255),w,b
  3730  0013FA  1181               	iorwf	(??___flmul+1)& (0+255),w,b
  3731  0013FC  1182               	iorwf	(??___flmul+2)& (0+255),w,b
  3732  0013FE  1183               	iorwf	(??___flmul+3)& (0+255),w,b
  3733  001400  A4D8               	btfss	status,2,c
  3734  001402  D002               	goto	u3860
  3735                           
  3736                           ; BSR set to: 0
  3737                           
  3738                           ; BSR set to: 0
  3739  001404  A18B               	btfss	___flmul@prod& (0+255),0,b
  3740  001406  D002               	goto	l829
  3741  001408                     u3860:
  3742                           
  3743                           ; BSR set to: 0
  3744  001408  0E01               	movlw	1
  3745  00140A  6F85               	movwf	___flmul@aexp& (0+255),b
  3746  00140C                     l829:
  3747                           
  3748                           ; BSR set to: 0
  3749                           
  3750                           ; BSR set to: 0
  3751                           
  3752                           ; BSR set to: 0
  3753  00140C  5185               	movf	___flmul@aexp& (0+255),w,b
  3754  00140E  B4D8               	btfsc	status,2,c
  3755  001410  D01F               	goto	l831
  3756                           
  3757                           ; BSR set to: 0
  3758  001412  0E01               	movlw	1
  3759  001414  278B               	addwf	___flmul@prod& (0+255),f,b
  3760  001416  0E00               	movlw	0
  3761  001418  238C               	addwfc	(___flmul@prod+1)& (0+255),f,b
  3762  00141A  238D               	addwfc	(___flmul@prod+2)& (0+255),f,b
  3763  00141C  238E               	addwfc	(___flmul@prod+3)& (0+255),f,b
  3764                           
  3765                           ; BSR set to: 0
  3766  00141E  A18E               	btfss	(___flmul@prod+3)& (0+255),0,b
  3767  001420  D017               	goto	l831
  3768                           
  3769                           ; BSR set to: 0
  3770  001422  C08B  F080         	movff	___flmul@prod,??___flmul
  3771  001426  C08C  F081         	movff	___flmul@prod+1,??___flmul+1
  3772  00142A  C08D  F082         	movff	___flmul@prod+2,??___flmul+2
  3773  00142E  C08E  F083         	movff	___flmul@prod+3,??___flmul+3
  3774  001432  3583               	rlcf	(??___flmul+3)& (0+255),w,b
  3775  001434  3383               	rrcf	(??___flmul+3)& (0+255),f,b
  3776  001436  3382               	rrcf	(??___flmul+2)& (0+255),f,b
  3777  001438  3381               	rrcf	(??___flmul+1)& (0+255),f,b
  3778  00143A  3380               	rrcf	??___flmul& (0+255),f,b
  3779  00143C  C080  F08B         	movff	??___flmul,___flmul@prod
  3780  001440  C081  F08C         	movff	??___flmul+1,___flmul@prod+1
  3781  001444  C082  F08D         	movff	??___flmul+2,___flmul@prod+2
  3782  001448  C083  F08E         	movff	??___flmul+3,___flmul@prod+3
  3783                           
  3784                           ; BSR set to: 0
  3785  00144C  4B8F               	infsnz	___flmul@temp& (0+255),f,b
  3786  00144E  2B90               	incf	(___flmul@temp+1)& (0+255),f,b
  3787  001450                     l831:
  3788                           
  3789                           ; BSR set to: 0
  3790                           
  3791                           ; BSR set to: 0
  3792                           
  3793                           ; BSR set to: 0
  3794  001450  BF90               	btfsc	(___flmul@temp+1)& (0+255),7,b
  3795  001452  D00D               	goto	l832
  3796  001454  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3797  001456  E103               	bnz	u3890
  3798  001458  298F               	incf	___flmul@temp& (0+255),w,b
  3799  00145A  A0D8               	btfss	status,0,c
  3800  00145C  D008               	goto	l832
  3801  00145E                     u3890:
  3802                           
  3803                           ; BSR set to: 0
  3804  00145E  0E00               	movlw	0
  3805  001460  6F8B               	movwf	___flmul@prod& (0+255),b
  3806  001462  0E00               	movlw	0
  3807  001464  6F8C               	movwf	(___flmul@prod+1)& (0+255),b
  3808  001466  0E80               	movlw	128
  3809  001468  6F8D               	movwf	(___flmul@prod+2)& (0+255),b
  3810  00146A  0E7F               	movlw	127
  3811  00146C  D020               	goto	L3
  3812  00146E                     l832:
  3813                           
  3814                           ; BSR set to: 0
  3815                           
  3816                           ; BSR set to: 0
  3817  00146E  BF90               	btfsc	(___flmul@temp+1)& (0+255),7,b
  3818  001470  D005               	goto	u3900
  3819  001472  5190               	movf	(___flmul@temp+1)& (0+255),w,b
  3820  001474  E10E               	bnz	l834
  3821  001476  058F               	decf	___flmul@temp& (0+255),w,b
  3822  001478  B0D8               	btfsc	status,0,c
  3823  00147A  D00B               	goto	l834
  3824  00147C                     u3900:
  3825                           
  3826                           ; BSR set to: 0
  3827  00147C  0E00               	movlw	0
  3828  00147E  6F8B               	movwf	___flmul@prod& (0+255),b
  3829  001480  0E00               	movlw	0
  3830  001482  6F8C               	movwf	(___flmul@prod+1)& (0+255),b
  3831  001484  0E00               	movlw	0
  3832  001486  6F8D               	movwf	(___flmul@prod+2)& (0+255),b
  3833  001488  0E00               	movlw	0
  3834  00148A  6F8E               	movwf	(___flmul@prod+3)& (0+255),b
  3835  00148C  0E00               	movlw	0
  3836  00148E  6F84               	movwf	___flmul@sign& (0+255),b
  3837  001490  D00F               	goto	l835
  3838  001492                     l834:
  3839                           
  3840                           ; BSR set to: 0
  3841  001492  C08F  F08A         	movff	___flmul@temp,___flmul@bexp
  3842                           
  3843                           ; BSR set to: 0
  3844  001496  0EFF               	movlw	255
  3845  001498  178B               	andwf	___flmul@prod& (0+255),f,b
  3846  00149A  0EFF               	movlw	255
  3847  00149C  178C               	andwf	(___flmul@prod+1)& (0+255),f,b
  3848  00149E  0E7F               	movlw	127
  3849  0014A0  178D               	andwf	(___flmul@prod+2)& (0+255),f,b
  3850  0014A2  0E00               	movlw	0
  3851  0014A4  178E               	andwf	(___flmul@prod+3)& (0+255),f,b
  3852                           
  3853                           ; BSR set to: 0
  3854  0014A6  B18A               	btfsc	___flmul@bexp& (0+255),0,b
  3855                           
  3856                           ; BSR set to: 0
  3857  0014A8  8F8D               	bsf	(___flmul@prod+2)& (0+255),7,b
  3858                           
  3859                           ; BSR set to: 0
  3860                           
  3861                           ; BSR set to: 0
  3862  0014AA  90D8               	bcf	status,0,c
  3863  0014AC  318A               	rrcf	___flmul@bexp& (0+255),w,b
  3864  0014AE                     L3:
  3865  0014AE  6F8E               	movwf	(___flmul@prod+3)& (0+255),b
  3866  0014B0                     l835:
  3867                           
  3868                           ; BSR set to: 0
  3869                           
  3870                           ; BSR set to: 0
  3871                           
  3872                           ; BSR set to: 0
  3873  0014B0  5184               	movf	___flmul@sign& (0+255),w,b
  3874  0014B2  138E               	iorwf	(___flmul@prod+3)& (0+255),f,b
  3875                           
  3876                           ; BSR set to: 0
  3877  0014B4  C08B  F03C         	movff	___flmul@prod,?___flmul
  3878  0014B8  C08C  F03D         	movff	___flmul@prod+1,?___flmul+1
  3879  0014BC  C08D  F03E         	movff	___flmul@prod+2,?___flmul+2
  3880  0014C0  C08E  F03F         	movff	___flmul@prod+3,?___flmul+3
  3881  0014C4  0012               	return	
  3882  0014C6                     __end_of___flmul:
  3883                           	opt stack 0
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           intcon	equ	0xFF2
  3891                           postinc0	equ	0xFEE
  3892                           wreg	equ	0xFE8
  3893                           indf2	equ	0xFDF
  3894                           postinc2	equ	0xFDE
  3895                           fsr2h	equ	0xFDA
  3896                           fsr2l	equ	0xFD9
  3897                           status	equ	0xFD8
  3898                           
  3899 ;; *************** function ___awmod *****************
  3900 ;; Defined at:
  3901 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  dividend        2   45[COMRAM] int 
  3904 ;;  divisor         2   47[COMRAM] int 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  sign            1   50[COMRAM] unsigned char 
  3907 ;;  counter         1   49[COMRAM] unsigned char 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  2   45[COMRAM] int 
  3910 ;; Registers used:
  3911 ;;		wreg, status,2, status,0
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3917 ;;      Params:         4       0       0       0       0       0       0
  3918 ;;      Locals:         2       0       0       0       0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0
  3920 ;;      Totals:         6       0       0       0       0       0       0
  3921 ;;Total ram usage:        6 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    4
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_fround
  3928 ;;		_scale
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text11
  3933  002314                     __ptext11:
  3934                           	opt stack 0
  3935  002314                     ___awmod:
  3936                           	opt stack 23
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;incstack = 0
  3940  002314  0E00               	movlw	0
  3941  002316  6E33               	movwf	___awmod@sign,c
  3942  002318  AE2F               	btfss	___awmod@dividend+1,7,c
  3943  00231A  D006               	goto	l434
  3944  00231C  6C2E               	negf	___awmod@dividend,c
  3945  00231E  1E2F               	comf	___awmod@dividend+1,f,c
  3946  002320  B0D8               	btfsc	status,0,c
  3947  002322  2A2F               	incf	___awmod@dividend+1,f,c
  3948  002324  0E01               	movlw	1
  3949  002326  6E33               	movwf	___awmod@sign,c
  3950  002328                     l434:
  3951  002328  AE31               	btfss	___awmod@divisor+1,7,c
  3952  00232A  D004               	goto	l435
  3953  00232C  6C30               	negf	___awmod@divisor,c
  3954  00232E  1E31               	comf	___awmod@divisor+1,f,c
  3955  002330  B0D8               	btfsc	status,0,c
  3956  002332  2A31               	incf	___awmod@divisor+1,f,c
  3957  002334                     l435:
  3958  002334  5030               	movf	___awmod@divisor,w,c
  3959  002336  1031               	iorwf	___awmod@divisor+1,w,c
  3960  002338  B4D8               	btfsc	status,2,c
  3961  00233A  D018               	goto	l442
  3962  00233C  0E01               	movlw	1
  3963  00233E  6E32               	movwf	___awmod@counter,c
  3964  002340  D004               	goto	l437
  3965  002342  90D8               	bcf	status,0,c
  3966  002344  3630               	rlcf	___awmod@divisor,f,c
  3967  002346  3631               	rlcf	___awmod@divisor+1,f,c
  3968  002348  2A32               	incf	___awmod@counter,f,c
  3969  00234A                     l437:
  3970  00234A  AE31               	btfss	___awmod@divisor+1,7,c
  3971  00234C  D7FA               	goto	l438
  3972  00234E                     u4010:
  3973  00234E  5030               	movf	___awmod@divisor,w,c
  3974  002350  5C2E               	subwf	___awmod@dividend,w,c
  3975  002352  5031               	movf	___awmod@divisor+1,w,c
  3976  002354  582F               	subwfb	___awmod@dividend+1,w,c
  3977  002356  A0D8               	btfss	status,0,c
  3978  002358  D004               	goto	l441
  3979  00235A  5030               	movf	___awmod@divisor,w,c
  3980  00235C  5E2E               	subwf	___awmod@dividend,f,c
  3981  00235E  5031               	movf	___awmod@divisor+1,w,c
  3982  002360  5A2F               	subwfb	___awmod@dividend+1,f,c
  3983  002362                     l441:
  3984  002362  90D8               	bcf	status,0,c
  3985  002364  3231               	rrcf	___awmod@divisor+1,f,c
  3986  002366  3230               	rrcf	___awmod@divisor,f,c
  3987  002368  2E32               	decfsz	___awmod@counter,f,c
  3988  00236A  D7F1               	goto	u4010
  3989  00236C                     l442:
  3990  00236C  5033               	movf	___awmod@sign,w,c
  3991  00236E  B4D8               	btfsc	status,2,c
  3992  002370  D004               	goto	l443
  3993  002372  6C2E               	negf	___awmod@dividend,c
  3994  002374  1E2F               	comf	___awmod@dividend+1,f,c
  3995  002376  B0D8               	btfsc	status,0,c
  3996  002378  2A2F               	incf	___awmod@dividend+1,f,c
  3997  00237A                     l443:
  3998  00237A  C02E  F02E         	movff	___awmod@dividend,?___awmod
  3999  00237E  C02F  F02F         	movff	___awmod@dividend+1,?___awmod+1
  4000  002382  0012               	return	
  4001  002384                     __end_of___awmod:
  4002                           	opt stack 0
  4003                           tblptru	equ	0xFF8
  4004                           tblptrh	equ	0xFF7
  4005                           tblptrl	equ	0xFF6
  4006                           tablat	equ	0xFF5
  4007                           prodh	equ	0xFF4
  4008                           prodl	equ	0xFF3
  4009                           intcon	equ	0xFF2
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           indf2	equ	0xFDF
  4013                           postinc2	equ	0xFDE
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function ___awdiv *****************
  4019 ;; Defined at:
  4020 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  dividend        2   51[COMRAM] int 
  4023 ;;  divisor         2   53[COMRAM] int 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  quotient        2   57[COMRAM] int 
  4026 ;;  sign            1   56[COMRAM] unsigned char 
  4027 ;;  counter         1   55[COMRAM] unsigned char 
  4028 ;; Return value:  Size  Location     Type
  4029 ;;                  2   51[COMRAM] int 
  4030 ;; Registers used:
  4031 ;;		wreg, status,2, status,0
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4037 ;;      Params:         4       0       0       0       0       0       0
  4038 ;;      Locals:         4       0       0       0       0       0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0
  4040 ;;      Totals:         8       0       0       0       0       0       0
  4041 ;;Total ram usage:        8 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    4
  4044 ;; This function calls:
  4045 ;;		Nothing
  4046 ;; This function is called by:
  4047 ;;		_fround
  4048 ;;		_scale
  4049 ;;		_sprintf
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text12
  4054  00219C                     __ptext12:
  4055                           	opt stack 0
  4056  00219C                     ___awdiv:
  4057                           	opt stack 23
  4058                           
  4059                           ;incstack = 0
  4060  00219C  0E00               	movlw	0
  4061  00219E  6E39               	movwf	___awdiv@sign,c
  4062  0021A0  AE37               	btfss	___awdiv@divisor+1,7,c
  4063  0021A2  D006               	goto	l421
  4064  0021A4  6C36               	negf	___awdiv@divisor,c
  4065  0021A6  1E37               	comf	___awdiv@divisor+1,f,c
  4066  0021A8  B0D8               	btfsc	status,0,c
  4067  0021AA  2A37               	incf	___awdiv@divisor+1,f,c
  4068  0021AC  0E01               	movlw	1
  4069  0021AE  6E39               	movwf	___awdiv@sign,c
  4070  0021B0                     l421:
  4071  0021B0  AE35               	btfss	___awdiv@dividend+1,7,c
  4072  0021B2  D006               	goto	l422
  4073  0021B4  6C34               	negf	___awdiv@dividend,c
  4074  0021B6  1E35               	comf	___awdiv@dividend+1,f,c
  4075  0021B8  B0D8               	btfsc	status,0,c
  4076  0021BA  2A35               	incf	___awdiv@dividend+1,f,c
  4077  0021BC  0E01               	movlw	1
  4078  0021BE  1A39               	xorwf	___awdiv@sign,f,c
  4079  0021C0                     l422:
  4080  0021C0  0E00               	movlw	0
  4081  0021C2  6E3B               	movwf	___awdiv@quotient+1,c
  4082  0021C4  0E00               	movlw	0
  4083  0021C6  6E3A               	movwf	___awdiv@quotient,c
  4084  0021C8  5036               	movf	___awdiv@divisor,w,c
  4085  0021CA  1037               	iorwf	___awdiv@divisor+1,w,c
  4086  0021CC  B4D8               	btfsc	status,2,c
  4087  0021CE  D01C               	goto	l429
  4088  0021D0  0E01               	movlw	1
  4089  0021D2  6E38               	movwf	___awdiv@counter,c
  4090  0021D4  D004               	goto	l424
  4091  0021D6  90D8               	bcf	status,0,c
  4092  0021D8  3636               	rlcf	___awdiv@divisor,f,c
  4093  0021DA  3637               	rlcf	___awdiv@divisor+1,f,c
  4094  0021DC  2A38               	incf	___awdiv@counter,f,c
  4095  0021DE                     l424:
  4096  0021DE  AE37               	btfss	___awdiv@divisor+1,7,c
  4097  0021E0  D7FA               	goto	l425
  4098  0021E2                     u3950:
  4099  0021E2  90D8               	bcf	status,0,c
  4100  0021E4  363A               	rlcf	___awdiv@quotient,f,c
  4101  0021E6  363B               	rlcf	___awdiv@quotient+1,f,c
  4102  0021E8  5036               	movf	___awdiv@divisor,w,c
  4103  0021EA  5C34               	subwf	___awdiv@dividend,w,c
  4104  0021EC  5037               	movf	___awdiv@divisor+1,w,c
  4105  0021EE  5835               	subwfb	___awdiv@dividend+1,w,c
  4106  0021F0  A0D8               	btfss	status,0,c
  4107  0021F2  D005               	goto	l428
  4108  0021F4  5036               	movf	___awdiv@divisor,w,c
  4109  0021F6  5E34               	subwf	___awdiv@dividend,f,c
  4110  0021F8  5037               	movf	___awdiv@divisor+1,w,c
  4111  0021FA  5A35               	subwfb	___awdiv@dividend+1,f,c
  4112  0021FC  803A               	bsf	___awdiv@quotient,0,c
  4113  0021FE                     l428:
  4114  0021FE  90D8               	bcf	status,0,c
  4115  002200  3237               	rrcf	___awdiv@divisor+1,f,c
  4116  002202  3236               	rrcf	___awdiv@divisor,f,c
  4117  002204  2E38               	decfsz	___awdiv@counter,f,c
  4118  002206  D7ED               	goto	u3950
  4119  002208                     l429:
  4120  002208  5039               	movf	___awdiv@sign,w,c
  4121  00220A  B4D8               	btfsc	status,2,c
  4122  00220C  D004               	goto	l430
  4123  00220E  6C3A               	negf	___awdiv@quotient,c
  4124  002210  1E3B               	comf	___awdiv@quotient+1,f,c
  4125  002212  B0D8               	btfsc	status,0,c
  4126  002214  2A3B               	incf	___awdiv@quotient+1,f,c
  4127  002216                     l430:
  4128  002216  C03A  F034         	movff	___awdiv@quotient,?___awdiv
  4129  00221A  C03B  F035         	movff	___awdiv@quotient+1,?___awdiv+1
  4130  00221E  0012               	return	
  4131  002220                     __end_of___awdiv:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           intcon	equ	0xFF2
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148 ;; *************** function __tdiv_to_l_ *****************
  4149 ;; Defined at:
  4150 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  f1              4   45[COMRAM] float 
  4153 ;;  f2              4   49[COMRAM] float 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  quot            4   56[COMRAM] unsigned long 
  4156 ;;  exp1            1   61[COMRAM] unsigned char 
  4157 ;;  cntr            1   60[COMRAM] unsigned char 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  4   45[COMRAM] unsigned long 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4167 ;;      Params:         8       0       0       0       0       0       0
  4168 ;;      Locals:         6       0       0       0       0       0       0
  4169 ;;      Temps:          3       0       0       0       0       0       0
  4170 ;;      Totals:        17       0       0       0       0       0       0
  4171 ;;Total ram usage:       17 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    4
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_sprintf
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text13
  4182  001BE6                     __ptext13:
  4183                           	opt stack 0
  4184  001BE6                     __tdiv_to_l_:
  4185                           	opt stack 24
  4186                           
  4187                           ;incstack = 0
  4188  001BE6  C030  F036         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4189  001BEA  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4190  001BEC  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4191  001BEE  342F               	rlcf	__tdiv_to_l_@f1+1,w,c
  4192  001BF0  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4193  001BF2  E301               	bnc	u2461
  4194  001BF4  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4195  001BF6                     u2461:
  4196  001BF6  5036               	movf	??__tdiv_to_l_,w,c
  4197  001BF8  6E3E               	movwf	__tdiv_to_l_@exp1,c
  4198  001BFA  503E               	movf	__tdiv_to_l_@exp1,w,c
  4199  001BFC  A4D8               	btfss	status,2,c
  4200  001BFE  D009               	goto	l557
  4201  001C00  0E00               	movlw	0
  4202  001C02  6E2E               	movwf	?__tdiv_to_l_,c
  4203  001C04  0E00               	movlw	0
  4204  001C06  6E2F               	movwf	?__tdiv_to_l_+1,c
  4205  001C08  0E00               	movlw	0
  4206  001C0A  6E30               	movwf	?__tdiv_to_l_+2,c
  4207  001C0C  0E00               	movlw	0
  4208  001C0E  6E31               	movwf	?__tdiv_to_l_+3,c
  4209  001C10  0012               	return	
  4210  001C12                     l557:
  4211  001C12  C034  F036         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4212  001C16  6A37               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4213  001C18  6A38               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4214  001C1A  3433               	rlcf	__tdiv_to_l_@f2+1,w,c
  4215  001C1C  3636               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4216  001C1E  E301               	bnc	u2481
  4217  001C20  8037               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4218  001C22                     u2481:
  4219  001C22  5036               	movf	??__tdiv_to_l_,w,c
  4220  001C24  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4221  001C26  503D               	movf	__tdiv_to_l_@cntr,w,c
  4222  001C28  A4D8               	btfss	status,2,c
  4223  001C2A  D009               	goto	l559
  4224  001C2C  0E00               	movlw	0
  4225  001C2E  6E2E               	movwf	?__tdiv_to_l_,c
  4226  001C30  0E00               	movlw	0
  4227  001C32  6E2F               	movwf	?__tdiv_to_l_+1,c
  4228  001C34  0E00               	movlw	0
  4229  001C36  6E30               	movwf	?__tdiv_to_l_+2,c
  4230  001C38  0E00               	movlw	0
  4231  001C3A  6E31               	movwf	?__tdiv_to_l_+3,c
  4232  001C3C  0012               	return	
  4233  001C3E                     l559:
  4234  001C3E  8E2F               	bsf	__tdiv_to_l_@f1+1,7,c
  4235  001C40  0EFF               	movlw	255
  4236  001C42  162E               	andwf	__tdiv_to_l_@f1,f,c
  4237  001C44  0EFF               	movlw	255
  4238  001C46  162F               	andwf	__tdiv_to_l_@f1+1,f,c
  4239  001C48  0E00               	movlw	0
  4240  001C4A  1630               	andwf	__tdiv_to_l_@f1+2,f,c
  4241  001C4C  8E33               	bsf	__tdiv_to_l_@f2+1,7,c
  4242  001C4E  0EFF               	movlw	255
  4243  001C50  1632               	andwf	__tdiv_to_l_@f2,f,c
  4244  001C52  0EFF               	movlw	255
  4245  001C54  1633               	andwf	__tdiv_to_l_@f2+1,f,c
  4246  001C56  0E00               	movlw	0
  4247  001C58  1634               	andwf	__tdiv_to_l_@f2+2,f,c
  4248  001C5A  0E00               	movlw	0
  4249  001C5C  6E39               	movwf	__tdiv_to_l_@quot,c
  4250  001C5E  0E00               	movlw	0
  4251  001C60  6E3A               	movwf	__tdiv_to_l_@quot+1,c
  4252  001C62  0E00               	movlw	0
  4253  001C64  6E3B               	movwf	__tdiv_to_l_@quot+2,c
  4254  001C66  0E00               	movlw	0
  4255  001C68  6E3C               	movwf	__tdiv_to_l_@quot+3,c
  4256  001C6A  0E7F               	movlw	127
  4257  001C6C  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4258  001C6E  503D               	movf	__tdiv_to_l_@cntr,w,c
  4259  001C70  0F98               	addlw	152
  4260  001C72  5E3E               	subwf	__tdiv_to_l_@exp1,f,c
  4261  001C74  0E18               	movlw	24
  4262  001C76  6E3D               	movwf	__tdiv_to_l_@cntr,c
  4263  001C78                     l560:
  4264  001C78  90D8               	bcf	status,0,c
  4265  001C7A  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4266  001C7C  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4267  001C7E  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4268  001C80  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4269  001C82  5032               	movf	__tdiv_to_l_@f2,w,c
  4270  001C84  5C2E               	subwf	__tdiv_to_l_@f1,w,c
  4271  001C86  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4272  001C88  582F               	subwfb	__tdiv_to_l_@f1+1,w,c
  4273  001C8A  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4274  001C8C  5830               	subwfb	__tdiv_to_l_@f1+2,w,c
  4275  001C8E  A0D8               	btfss	status,0,c
  4276  001C90  D007               	goto	l561
  4277  001C92  5032               	movf	__tdiv_to_l_@f2,w,c
  4278  001C94  5E2E               	subwf	__tdiv_to_l_@f1,f,c
  4279  001C96  5033               	movf	__tdiv_to_l_@f2+1,w,c
  4280  001C98  5A2F               	subwfb	__tdiv_to_l_@f1+1,f,c
  4281  001C9A  5034               	movf	__tdiv_to_l_@f2+2,w,c
  4282  001C9C  5A30               	subwfb	__tdiv_to_l_@f1+2,f,c
  4283  001C9E  8039               	bsf	__tdiv_to_l_@quot,0,c
  4284  001CA0                     l561:
  4285  001CA0  90D8               	bcf	status,0,c
  4286  001CA2  362E               	rlcf	__tdiv_to_l_@f1,f,c
  4287  001CA4  362F               	rlcf	__tdiv_to_l_@f1+1,f,c
  4288  001CA6  3630               	rlcf	__tdiv_to_l_@f1+2,f,c
  4289  001CA8  2E3D               	decfsz	__tdiv_to_l_@cntr,f,c
  4290  001CAA  D7E6               	goto	l560
  4291  001CAC  AE3E               	btfss	__tdiv_to_l_@exp1,7,c
  4292  001CAE  D016               	goto	l563
  4293  001CB0  503E               	movf	__tdiv_to_l_@exp1,w,c
  4294  001CB2  0A80               	xorlw	128
  4295  001CB4  0F97               	addlw	151
  4296  001CB6  B0D8               	btfsc	status,0,c
  4297  001CB8  D009               	goto	l564
  4298  001CBA  0E00               	movlw	0
  4299  001CBC  6E2E               	movwf	?__tdiv_to_l_,c
  4300  001CBE  0E00               	movlw	0
  4301  001CC0  6E2F               	movwf	?__tdiv_to_l_+1,c
  4302  001CC2  0E00               	movlw	0
  4303  001CC4  6E30               	movwf	?__tdiv_to_l_+2,c
  4304  001CC6  0E00               	movlw	0
  4305  001CC8  6E31               	movwf	?__tdiv_to_l_+3,c
  4306  001CCA  0012               	return	
  4307  001CCC                     l564:
  4308  001CCC  90D8               	bcf	status,0,c
  4309  001CCE  323C               	rrcf	__tdiv_to_l_@quot+3,f,c
  4310  001CD0  323B               	rrcf	__tdiv_to_l_@quot+2,f,c
  4311  001CD2  323A               	rrcf	__tdiv_to_l_@quot+1,f,c
  4312  001CD4  3239               	rrcf	__tdiv_to_l_@quot,f,c
  4313  001CD6  3E3E               	incfsz	__tdiv_to_l_@exp1,f,c
  4314  001CD8  D7F9               	goto	l564
  4315  001CDA  D015               	goto	u2540
  4316  001CDC                     l563:
  4317  001CDC  0E17               	movlw	23
  4318  001CDE  643E               	cpfsgt	__tdiv_to_l_@exp1,c
  4319  001CE0  D00F               	goto	l569
  4320  001CE2  0E00               	movlw	0
  4321  001CE4  6E2E               	movwf	?__tdiv_to_l_,c
  4322  001CE6  0E00               	movlw	0
  4323  001CE8  6E2F               	movwf	?__tdiv_to_l_+1,c
  4324  001CEA  0E00               	movlw	0
  4325  001CEC  6E30               	movwf	?__tdiv_to_l_+2,c
  4326  001CEE  0E00               	movlw	0
  4327  001CF0  6E31               	movwf	?__tdiv_to_l_+3,c
  4328  001CF2  0012               	return	
  4329  001CF4  90D8               	bcf	status,0,c
  4330  001CF6  3639               	rlcf	__tdiv_to_l_@quot,f,c
  4331  001CF8  363A               	rlcf	__tdiv_to_l_@quot+1,f,c
  4332  001CFA  363B               	rlcf	__tdiv_to_l_@quot+2,f,c
  4333  001CFC  363C               	rlcf	__tdiv_to_l_@quot+3,f,c
  4334  001CFE  063E               	decf	__tdiv_to_l_@exp1,f,c
  4335  001D00                     l569:
  4336  001D00  503E               	movf	__tdiv_to_l_@exp1,w,c
  4337  001D02  A4D8               	btfss	status,2,c
  4338  001D04  D7F7               	goto	l570
  4339  001D06                     u2540:
  4340  001D06  C039  F02E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4341  001D0A  C03A  F02F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4342  001D0E  C03B  F030         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4343  001D12  C03C  F031         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4344  001D16  0012               	return		;funcret
  4345  001D18                     __end_of__tdiv_to_l_:
  4346                           	opt stack 0
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           intcon	equ	0xFF2
  4354                           postinc0	equ	0xFEE
  4355                           wreg	equ	0xFE8
  4356                           indf2	equ	0xFDF
  4357                           postinc2	equ	0xFDE
  4358                           fsr2h	equ	0xFDA
  4359                           fsr2l	equ	0xFD9
  4360                           status	equ	0xFD8
  4361                           
  4362 ;; *************** function __div_to_l_ *****************
  4363 ;; Defined at:
  4364 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  f1              4   45[COMRAM] unsigned long 
  4367 ;;  f2              4   49[COMRAM] unsigned long 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  quot            4   53[COMRAM] unsigned long 
  4370 ;;  exp1            1   58[COMRAM] unsigned char 
  4371 ;;  cntr            1   57[COMRAM] unsigned char 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  4   45[COMRAM] unsigned long 
  4374 ;; Registers used:
  4375 ;;		wreg, status,2, status,0
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4381 ;;      Params:         8       0       0       0       0       0       0
  4382 ;;      Locals:         6       0       0       0       0       0       0
  4383 ;;      Temps:          0       0       0       0       0       0       0
  4384 ;;      Totals:        14       0       0       0       0       0       0
  4385 ;;Total ram usage:       14 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    4
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_sprintf
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	text14
  4396  001D18                     __ptext14:
  4397                           	opt stack 0
  4398  001D18                     __div_to_l_:
  4399                           	opt stack 24
  4400                           
  4401                           ;incstack = 0
  4402  001D18  3430               	rlcf	__div_to_l_@f1+2,w,c
  4403  001D1A  3431               	rlcf	__div_to_l_@f1+3,w,c
  4404  001D1C  6E3B               	movwf	__div_to_l_@exp1,c
  4405  001D1E  503B               	movf	__div_to_l_@exp1,w,c
  4406  001D20  A4D8               	btfss	status,2,c
  4407  001D22  D009               	goto	l453
  4408  001D24  0E00               	movlw	0
  4409  001D26  6E2E               	movwf	?__div_to_l_,c
  4410  001D28  0E00               	movlw	0
  4411  001D2A  6E2F               	movwf	?__div_to_l_+1,c
  4412  001D2C  0E00               	movlw	0
  4413  001D2E  6E30               	movwf	?__div_to_l_+2,c
  4414  001D30  0E00               	movlw	0
  4415  001D32  6E31               	movwf	?__div_to_l_+3,c
  4416  001D34  0012               	return	
  4417  001D36                     l453:
  4418  001D36  3434               	rlcf	__div_to_l_@f2+2,w,c
  4419  001D38  3435               	rlcf	__div_to_l_@f2+3,w,c
  4420  001D3A  6E3A               	movwf	__div_to_l_@cntr,c
  4421  001D3C  503A               	movf	__div_to_l_@cntr,w,c
  4422  001D3E  A4D8               	btfss	status,2,c
  4423  001D40  D009               	goto	l455
  4424  001D42  0E00               	movlw	0
  4425  001D44  6E2E               	movwf	?__div_to_l_,c
  4426  001D46  0E00               	movlw	0
  4427  001D48  6E2F               	movwf	?__div_to_l_+1,c
  4428  001D4A  0E00               	movlw	0
  4429  001D4C  6E30               	movwf	?__div_to_l_+2,c
  4430  001D4E  0E00               	movlw	0
  4431  001D50  6E31               	movwf	?__div_to_l_+3,c
  4432  001D52  0012               	return	
  4433  001D54                     l455:
  4434  001D54  8E30               	bsf	__div_to_l_@f1+2,7,c
  4435  001D56  0EFF               	movlw	255
  4436  001D58  162E               	andwf	__div_to_l_@f1,f,c
  4437  001D5A  0EFF               	movlw	255
  4438  001D5C  162F               	andwf	__div_to_l_@f1+1,f,c
  4439  001D5E  0EFF               	movlw	255
  4440  001D60  1630               	andwf	__div_to_l_@f1+2,f,c
  4441  001D62  0E00               	movlw	0
  4442  001D64  1631               	andwf	__div_to_l_@f1+3,f,c
  4443  001D66  8E34               	bsf	__div_to_l_@f2+2,7,c
  4444  001D68  0EFF               	movlw	255
  4445  001D6A  1632               	andwf	__div_to_l_@f2,f,c
  4446  001D6C  0EFF               	movlw	255
  4447  001D6E  1633               	andwf	__div_to_l_@f2+1,f,c
  4448  001D70  0EFF               	movlw	255
  4449  001D72  1634               	andwf	__div_to_l_@f2+2,f,c
  4450  001D74  0E00               	movlw	0
  4451  001D76  1635               	andwf	__div_to_l_@f2+3,f,c
  4452  001D78  0E00               	movlw	0
  4453  001D7A  6E36               	movwf	__div_to_l_@quot,c
  4454  001D7C  0E00               	movlw	0
  4455  001D7E  6E37               	movwf	__div_to_l_@quot+1,c
  4456  001D80  0E00               	movlw	0
  4457  001D82  6E38               	movwf	__div_to_l_@quot+2,c
  4458  001D84  0E00               	movlw	0
  4459  001D86  6E39               	movwf	__div_to_l_@quot+3,c
  4460  001D88  0E7F               	movlw	127
  4461  001D8A  5E3B               	subwf	__div_to_l_@exp1,f,c
  4462  001D8C  503A               	movf	__div_to_l_@cntr,w,c
  4463  001D8E  0FA0               	addlw	160
  4464  001D90  5E3B               	subwf	__div_to_l_@exp1,f,c
  4465  001D92  0E20               	movlw	32
  4466  001D94  6E3A               	movwf	__div_to_l_@cntr,c
  4467  001D96  90D8               	bcf	status,0,c
  4468  001D98  3636               	rlcf	__div_to_l_@quot,f,c
  4469  001D9A  3637               	rlcf	__div_to_l_@quot+1,f,c
  4470  001D9C  3638               	rlcf	__div_to_l_@quot+2,f,c
  4471  001D9E  3639               	rlcf	__div_to_l_@quot+3,f,c
  4472  001DA0  5032               	movf	__div_to_l_@f2,w,c
  4473  001DA2  5C2E               	subwf	__div_to_l_@f1,w,c
  4474  001DA4  5033               	movf	__div_to_l_@f2+1,w,c
  4475  001DA6  582F               	subwfb	__div_to_l_@f1+1,w,c
  4476  001DA8  5034               	movf	__div_to_l_@f2+2,w,c
  4477  001DAA  5830               	subwfb	__div_to_l_@f1+2,w,c
  4478  001DAC  5035               	movf	__div_to_l_@f2+3,w,c
  4479  001DAE  5831               	subwfb	__div_to_l_@f1+3,w,c
  4480  001DB0  A0D8               	btfss	status,0,c
  4481  001DB2  D009               	goto	l457
  4482  001DB4  5032               	movf	__div_to_l_@f2,w,c
  4483  001DB6  5E2E               	subwf	__div_to_l_@f1,f,c
  4484  001DB8  5033               	movf	__div_to_l_@f2+1,w,c
  4485  001DBA  5A2F               	subwfb	__div_to_l_@f1+1,f,c
  4486  001DBC  5034               	movf	__div_to_l_@f2+2,w,c
  4487  001DBE  5A30               	subwfb	__div_to_l_@f1+2,f,c
  4488  001DC0  5035               	movf	__div_to_l_@f2+3,w,c
  4489  001DC2  5A31               	subwfb	__div_to_l_@f1+3,f,c
  4490  001DC4  8036               	bsf	__div_to_l_@quot,0,c
  4491  001DC6                     l457:
  4492  001DC6  90D8               	bcf	status,0,c
  4493  001DC8  362E               	rlcf	__div_to_l_@f1,f,c
  4494  001DCA  362F               	rlcf	__div_to_l_@f1+1,f,c
  4495  001DCC  3630               	rlcf	__div_to_l_@f1+2,f,c
  4496  001DCE  3631               	rlcf	__div_to_l_@f1+3,f,c
  4497  001DD0  2E3A               	decfsz	__div_to_l_@cntr,f,c
  4498  001DD2  D7E1               	goto	l456
  4499  001DD4  AE3B               	btfss	__div_to_l_@exp1,7,c
  4500  001DD6  D016               	goto	l459
  4501  001DD8  503B               	movf	__div_to_l_@exp1,w,c
  4502  001DDA  0A80               	xorlw	128
  4503  001DDC  0F9F               	addlw	159
  4504  001DDE  B0D8               	btfsc	status,0,c
  4505  001DE0  D009               	goto	l460
  4506  001DE2  0E00               	movlw	0
  4507  001DE4  6E2E               	movwf	?__div_to_l_,c
  4508  001DE6  0E00               	movlw	0
  4509  001DE8  6E2F               	movwf	?__div_to_l_+1,c
  4510  001DEA  0E00               	movlw	0
  4511  001DEC  6E30               	movwf	?__div_to_l_+2,c
  4512  001DEE  0E00               	movlw	0
  4513  001DF0  6E31               	movwf	?__div_to_l_+3,c
  4514  001DF2  0012               	return	
  4515  001DF4                     l460:
  4516  001DF4  90D8               	bcf	status,0,c
  4517  001DF6  3239               	rrcf	__div_to_l_@quot+3,f,c
  4518  001DF8  3238               	rrcf	__div_to_l_@quot+2,f,c
  4519  001DFA  3237               	rrcf	__div_to_l_@quot+1,f,c
  4520  001DFC  3236               	rrcf	__div_to_l_@quot,f,c
  4521  001DFE  3E3B               	incfsz	__div_to_l_@exp1,f,c
  4522  001E00  D7F9               	goto	l460
  4523  001E02  D015               	goto	u2610
  4524  001E04                     l459:
  4525  001E04  0E1F               	movlw	31
  4526  001E06  643B               	cpfsgt	__div_to_l_@exp1,c
  4527  001E08  D00F               	goto	l465
  4528  001E0A  0E00               	movlw	0
  4529  001E0C  6E2E               	movwf	?__div_to_l_,c
  4530  001E0E  0E00               	movlw	0
  4531  001E10  6E2F               	movwf	?__div_to_l_+1,c
  4532  001E12  0E00               	movlw	0
  4533  001E14  6E30               	movwf	?__div_to_l_+2,c
  4534  001E16  0E00               	movlw	0
  4535  001E18  6E31               	movwf	?__div_to_l_+3,c
  4536  001E1A  0012               	return	
  4537  001E1C  90D8               	bcf	status,0,c
  4538  001E1E  3636               	rlcf	__div_to_l_@quot,f,c
  4539  001E20  3637               	rlcf	__div_to_l_@quot+1,f,c
  4540  001E22  3638               	rlcf	__div_to_l_@quot+2,f,c
  4541  001E24  3639               	rlcf	__div_to_l_@quot+3,f,c
  4542  001E26  063B               	decf	__div_to_l_@exp1,f,c
  4543  001E28                     l465:
  4544  001E28  503B               	movf	__div_to_l_@exp1,w,c
  4545  001E2A  A4D8               	btfss	status,2,c
  4546  001E2C  D7F7               	goto	l466
  4547  001E2E                     u2610:
  4548  001E2E  C036  F02E         	movff	__div_to_l_@quot,?__div_to_l_
  4549  001E32  C037  F02F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4550  001E36  C038  F030         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4551  001E3A  C039  F031         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4552  001E3E  0012               	return		;funcret
  4553  001E40                     __end_of__div_to_l_:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon	equ	0xFF2
  4562                           postinc0	equ	0xFEE
  4563                           wreg	equ	0xFE8
  4564                           indf2	equ	0xFDF
  4565                           postinc2	equ	0xFDE
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function ___xxtofl *****************
  4571 ;; Defined at:
  4572 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  sign            1    wreg     unsigned char 
  4575 ;;  val             4   45[COMRAM] long 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  sign            1   53[COMRAM] unsigned char 
  4578 ;;  arg             4   55[COMRAM] unsigned long 
  4579 ;;  exp             1   54[COMRAM] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  4   45[COMRAM] unsigned char 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4589 ;;      Params:         4       0       0       0       0       0       0
  4590 ;;      Locals:         6       0       0       0       0       0       0
  4591 ;;      Temps:          4       0       0       0       0       0       0
  4592 ;;      Totals:        14       0       0       0       0       0       0
  4593 ;;Total ram usage:       14 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    4
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_Mode2
  4600 ;;		_sprintf
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text15
  4605  001A96                     __ptext15:
  4606                           	opt stack 0
  4607  001A96                     ___xxtofl:
  4608                           	opt stack 24
  4609                           
  4610                           ;incstack = 0
  4611                           ;___xxtofl@sign stored from wreg
  4612  001A96  6E36               	movwf	___xxtofl@sign,c
  4613  001A98  5036               	movf	___xxtofl@sign,w,c
  4614  001A9A  A4D8               	btfss	status,2,c
  4615  001A9C  AE31               	btfss	___xxtofl@val+3,7,c
  4616  001A9E  D01A               	goto	l839
  4617  001AA0  C02E  F032         	movff	___xxtofl@val,??___xxtofl
  4618  001AA4  C02F  F033         	movff	___xxtofl@val+1,??___xxtofl+1
  4619  001AA8  C030  F034         	movff	___xxtofl@val+2,??___xxtofl+2
  4620  001AAC  C031  F035         	movff	___xxtofl@val+3,??___xxtofl+3
  4621  001AB0  1E32               	comf	??___xxtofl,f,c
  4622  001AB2  1E33               	comf	??___xxtofl+1,f,c
  4623  001AB4  1E34               	comf	??___xxtofl+2,f,c
  4624  001AB6  1E35               	comf	??___xxtofl+3,f,c
  4625  001AB8  2A32               	incf	??___xxtofl,f,c
  4626  001ABA  0E00               	movlw	0
  4627  001ABC  2233               	addwfc	??___xxtofl+1,f,c
  4628  001ABE  2234               	addwfc	??___xxtofl+2,f,c
  4629  001AC0  2235               	addwfc	??___xxtofl+3,f,c
  4630  001AC2  C032  F038         	movff	??___xxtofl,___xxtofl@arg
  4631  001AC6  C033  F039         	movff	??___xxtofl+1,___xxtofl@arg+1
  4632  001ACA  C034  F03A         	movff	??___xxtofl+2,___xxtofl@arg+2
  4633  001ACE  C035  F03B         	movff	??___xxtofl+3,___xxtofl@arg+3
  4634  001AD2  D008               	goto	l840
  4635  001AD4                     l839:
  4636  001AD4  C02E  F038         	movff	___xxtofl@val,___xxtofl@arg
  4637  001AD8  C02F  F039         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4638  001ADC  C030  F03A         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4639  001AE0  C031  F03B         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4640  001AE4                     l840:
  4641  001AE4  502E               	movf	___xxtofl@val,w,c
  4642  001AE6  102F               	iorwf	___xxtofl@val+1,w,c
  4643  001AE8  1030               	iorwf	___xxtofl@val+2,w,c
  4644  001AEA  1031               	iorwf	___xxtofl@val+3,w,c
  4645  001AEC  A4D8               	btfss	status,2,c
  4646  001AEE  D009               	goto	l841
  4647  001AF0  0E00               	movlw	0
  4648  001AF2  6E2E               	movwf	?___xxtofl,c
  4649  001AF4  0E00               	movlw	0
  4650  001AF6  6E2F               	movwf	?___xxtofl+1,c
  4651  001AF8  0E00               	movlw	0
  4652  001AFA  6E30               	movwf	?___xxtofl+2,c
  4653  001AFC  0E00               	movlw	0
  4654  001AFE  6E31               	movwf	?___xxtofl+3,c
  4655  001B00  0012               	return	
  4656  001B02                     l841:
  4657  001B02  0E96               	movlw	150
  4658  001B04  6E37               	movwf	___xxtofl@exp,c
  4659  001B06  D006               	goto	l843
  4660  001B08  2A37               	incf	___xxtofl@exp,f,c
  4661  001B0A  90D8               	bcf	status,0,c
  4662  001B0C  323B               	rrcf	___xxtofl@arg+3,f,c
  4663  001B0E  323A               	rrcf	___xxtofl@arg+2,f,c
  4664  001B10  3239               	rrcf	___xxtofl@arg+1,f,c
  4665  001B12  3238               	rrcf	___xxtofl@arg,f,c
  4666  001B14                     l843:
  4667  001B14  0E00               	movlw	0
  4668  001B16  1438               	andwf	___xxtofl@arg,w,c
  4669  001B18  6E32               	movwf	??___xxtofl& (0+255),c
  4670  001B1A  0E00               	movlw	0
  4671  001B1C  1439               	andwf	___xxtofl@arg+1,w,c
  4672  001B1E  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  4673  001B20  0E00               	movlw	0
  4674  001B22  143A               	andwf	___xxtofl@arg+2,w,c
  4675  001B24  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  4676  001B26  0EFE               	movlw	254
  4677  001B28  143B               	andwf	___xxtofl@arg+3,w,c
  4678  001B2A  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  4679  001B2C  5032               	movf	??___xxtofl,w,c
  4680  001B2E  1033               	iorwf	??___xxtofl+1,w,c
  4681  001B30  1034               	iorwf	??___xxtofl+2,w,c
  4682  001B32  1035               	iorwf	??___xxtofl+3,w,c
  4683  001B34  B4D8               	btfsc	status,2,c
  4684  001B36  D00D               	goto	l846
  4685  001B38  D7E7               	goto	l844
  4686  001B3A  2A37               	incf	___xxtofl@exp,f,c
  4687  001B3C  0E01               	movlw	1
  4688  001B3E  2638               	addwf	___xxtofl@arg,f,c
  4689  001B40  0E00               	movlw	0
  4690  001B42  2239               	addwfc	___xxtofl@arg+1,f,c
  4691  001B44  223A               	addwfc	___xxtofl@arg+2,f,c
  4692  001B46  223B               	addwfc	___xxtofl@arg+3,f,c
  4693  001B48  90D8               	bcf	status,0,c
  4694  001B4A  323B               	rrcf	___xxtofl@arg+3,f,c
  4695  001B4C  323A               	rrcf	___xxtofl@arg+2,f,c
  4696  001B4E  3239               	rrcf	___xxtofl@arg+1,f,c
  4697  001B50  3238               	rrcf	___xxtofl@arg,f,c
  4698  001B52                     l846:
  4699  001B52  0E00               	movlw	0
  4700  001B54  1438               	andwf	___xxtofl@arg,w,c
  4701  001B56  6E32               	movwf	??___xxtofl& (0+255),c
  4702  001B58  0E00               	movlw	0
  4703  001B5A  1439               	andwf	___xxtofl@arg+1,w,c
  4704  001B5C  6E33               	movwf	(??___xxtofl+1)& (0+255),c
  4705  001B5E  0E00               	movlw	0
  4706  001B60  143A               	andwf	___xxtofl@arg+2,w,c
  4707  001B62  6E34               	movwf	(??___xxtofl+2)& (0+255),c
  4708  001B64  0EFF               	movlw	255
  4709  001B66  143B               	andwf	___xxtofl@arg+3,w,c
  4710  001B68  6E35               	movwf	(??___xxtofl+3)& (0+255),c
  4711  001B6A  5032               	movf	??___xxtofl,w,c
  4712  001B6C  1033               	iorwf	??___xxtofl+1,w,c
  4713  001B6E  1034               	iorwf	??___xxtofl+2,w,c
  4714  001B70  1035               	iorwf	??___xxtofl+3,w,c
  4715  001B72  B4D8               	btfsc	status,2,c
  4716  001B74  D007               	goto	l849
  4717  001B76  D7E1               	goto	l847
  4718  001B78  0637               	decf	___xxtofl@exp,f,c
  4719  001B7A  90D8               	bcf	status,0,c
  4720  001B7C  3638               	rlcf	___xxtofl@arg,f,c
  4721  001B7E  3639               	rlcf	___xxtofl@arg+1,f,c
  4722  001B80  363A               	rlcf	___xxtofl@arg+2,f,c
  4723  001B82  363B               	rlcf	___xxtofl@arg+3,f,c
  4724  001B84                     l849:
  4725  001B84  BE3A               	btfsc	___xxtofl@arg+2,7,c
  4726  001B86  D003               	goto	u2870
  4727  001B88  0E02               	movlw	2
  4728  001B8A  6037               	cpfslt	___xxtofl@exp,c
  4729  001B8C  D7F5               	goto	l850
  4730  001B8E                     u2870:
  4731  001B8E  B037               	btfsc	___xxtofl@exp,0,c
  4732  001B90  D008               	goto	l854
  4733  001B92  0EFF               	movlw	255
  4734  001B94  1638               	andwf	___xxtofl@arg,f,c
  4735  001B96  0EFF               	movlw	255
  4736  001B98  1639               	andwf	___xxtofl@arg+1,f,c
  4737  001B9A  0E7F               	movlw	127
  4738  001B9C  163A               	andwf	___xxtofl@arg+2,f,c
  4739  001B9E  0EFF               	movlw	255
  4740  001BA0  163B               	andwf	___xxtofl@arg+3,f,c
  4741  001BA2                     l854:
  4742  001BA2  90D8               	bcf	status,0,c
  4743  001BA4  3237               	rrcf	___xxtofl@exp,f,c
  4744  001BA6  C037  F032         	movff	___xxtofl@exp,??___xxtofl
  4745  001BAA  6A33               	clrf	(??___xxtofl+1)& (0+255),c
  4746  001BAC  6A34               	clrf	(??___xxtofl+2)& (0+255),c
  4747  001BAE  6A35               	clrf	(??___xxtofl+3)& (0+255),c
  4748  001BB0  C032  F035         	movff	??___xxtofl,??___xxtofl+3
  4749  001BB4  6A34               	clrf	??___xxtofl+2,c
  4750  001BB6  6A33               	clrf	??___xxtofl+1,c
  4751  001BB8  6A32               	clrf	??___xxtofl,c
  4752  001BBA  5032               	movf	??___xxtofl,w,c
  4753  001BBC  1238               	iorwf	___xxtofl@arg,f,c
  4754  001BBE  5033               	movf	??___xxtofl+1,w,c
  4755  001BC0  1239               	iorwf	___xxtofl@arg+1,f,c
  4756  001BC2  5034               	movf	??___xxtofl+2,w,c
  4757  001BC4  123A               	iorwf	___xxtofl@arg+2,f,c
  4758  001BC6  5035               	movf	??___xxtofl+3,w,c
  4759  001BC8  123B               	iorwf	___xxtofl@arg+3,f,c
  4760  001BCA  5036               	movf	___xxtofl@sign,w,c
  4761  001BCC  A4D8               	btfss	status,2,c
  4762  001BCE  AE31               	btfss	___xxtofl@val+3,7,c
  4763  001BD0  D001               	goto	l855
  4764  001BD2  8E3B               	bsf	___xxtofl@arg+3,7,c
  4765  001BD4                     l855:
  4766  001BD4  C038  F02E         	movff	___xxtofl@arg,?___xxtofl
  4767  001BD8  C039  F02F         	movff	___xxtofl@arg+1,?___xxtofl+1
  4768  001BDC  C03A  F030         	movff	___xxtofl@arg+2,?___xxtofl+2
  4769  001BE0  C03B  F031         	movff	___xxtofl@arg+3,?___xxtofl+3
  4770  001BE4  0012               	return	
  4771  001BE6                     __end_of___xxtofl:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           postinc0	equ	0xFEE
  4781                           wreg	equ	0xFE8
  4782                           indf2	equ	0xFDF
  4783                           postinc2	equ	0xFDE
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function ___wmul *****************
  4789 ;; Defined at:
  4790 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  multiplier      2   45[COMRAM] unsigned int 
  4793 ;;  multiplicand    2   47[COMRAM] unsigned int 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  product         2   49[COMRAM] unsigned int 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  2   45[COMRAM] unsigned int 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, prodl, prodh
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4805 ;;      Params:         4       0       0       0       0       0       0
  4806 ;;      Locals:         2       0       0       0       0       0       0
  4807 ;;      Temps:          0       0       0       0       0       0       0
  4808 ;;      Totals:         6       0       0       0       0       0       0
  4809 ;;Total ram usage:        6 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    4
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		_sprintf
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text16
  4820  0025C4                     __ptext16:
  4821                           	opt stack 0
  4822  0025C4                     ___wmul:
  4823                           	opt stack 24
  4824                           
  4825                           ;incstack = 0
  4826  0025C4  502E               	movf	___wmul@multiplier,w,c
  4827  0025C6  0230               	mulwf	___wmul@multiplicand,c
  4828  0025C8  CFF3 F032          	movff	prodl,___wmul@product
  4829  0025CC  CFF4 F033          	movff	prodh,___wmul@product+1
  4830  0025D0  502E               	movf	___wmul@multiplier,w,c
  4831  0025D2  0231               	mulwf	___wmul@multiplicand+1,c
  4832  0025D4  50F3               	movf	prodl,w,c
  4833  0025D6  2633               	addwf	___wmul@product+1,f,c
  4834  0025D8  502F               	movf	___wmul@multiplier+1,w,c
  4835  0025DA  0230               	mulwf	___wmul@multiplicand,c
  4836  0025DC  50F3               	movf	prodl,w,c
  4837  0025DE  2633               	addwf	___wmul@product+1,f,c
  4838  0025E0  C032  F02E         	movff	___wmul@product,?___wmul
  4839  0025E4  C033  F02F         	movff	___wmul@product+1,?___wmul+1
  4840  0025E8  0012               	return	
  4841  0025EA                     __end_of___wmul:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           fsr2h	equ	0xFDA
  4855                           fsr2l	equ	0xFD9
  4856                           status	equ	0xFD8
  4857                           
  4858 ;; *************** function ___llmod *****************
  4859 ;; Defined at:
  4860 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;  dividend        4   45[COMRAM] unsigned long 
  4863 ;;  divisor         4   49[COMRAM] unsigned long 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;  counter         1   53[COMRAM] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  4   45[COMRAM] unsigned long 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4875 ;;      Params:         8       0       0       0       0       0       0
  4876 ;;      Locals:         1       0       0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0
  4878 ;;      Totals:         9       0       0       0       0       0       0
  4879 ;;Total ram usage:        9 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    4
  4882 ;; This function calls:
  4883 ;;		Nothing
  4884 ;; This function is called by:
  4885 ;;		_sprintf
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text17
  4890  0023F4                     __ptext17:
  4891                           	opt stack 0
  4892  0023F4                     ___llmod:
  4893                           	opt stack 24
  4894                           
  4895                           ;incstack = 0
  4896  0023F4  5032               	movf	___llmod@divisor,w,c
  4897  0023F6  1033               	iorwf	___llmod@divisor+1,w,c
  4898  0023F8  1034               	iorwf	___llmod@divisor+2,w,c
  4899  0023FA  1035               	iorwf	___llmod@divisor+3,w,c
  4900  0023FC  B4D8               	btfsc	status,2,c
  4901  0023FE  D024               	goto	l653
  4902  002400  0E01               	movlw	1
  4903  002402  6E36               	movwf	___llmod@counter,c
  4904  002404  D006               	goto	l648
  4905  002406  90D8               	bcf	status,0,c
  4906  002408  3632               	rlcf	___llmod@divisor,f,c
  4907  00240A  3633               	rlcf	___llmod@divisor+1,f,c
  4908  00240C  3634               	rlcf	___llmod@divisor+2,f,c
  4909  00240E  3635               	rlcf	___llmod@divisor+3,f,c
  4910  002410  2A36               	incf	___llmod@counter,f,c
  4911  002412                     l648:
  4912  002412  AE35               	btfss	___llmod@divisor+3,7,c
  4913  002414  D7F8               	goto	l649
  4914  002416                     u2790:
  4915  002416  5032               	movf	___llmod@divisor,w,c
  4916  002418  5C2E               	subwf	___llmod@dividend,w,c
  4917  00241A  5033               	movf	___llmod@divisor+1,w,c
  4918  00241C  582F               	subwfb	___llmod@dividend+1,w,c
  4919  00241E  5034               	movf	___llmod@divisor+2,w,c
  4920  002420  5830               	subwfb	___llmod@dividend+2,w,c
  4921  002422  5035               	movf	___llmod@divisor+3,w,c
  4922  002424  5831               	subwfb	___llmod@dividend+3,w,c
  4923  002426  A0D8               	btfss	status,0,c
  4924  002428  D008               	goto	l652
  4925  00242A  5032               	movf	___llmod@divisor,w,c
  4926  00242C  5E2E               	subwf	___llmod@dividend,f,c
  4927  00242E  5033               	movf	___llmod@divisor+1,w,c
  4928  002430  5A2F               	subwfb	___llmod@dividend+1,f,c
  4929  002432  5034               	movf	___llmod@divisor+2,w,c
  4930  002434  5A30               	subwfb	___llmod@dividend+2,f,c
  4931  002436  5035               	movf	___llmod@divisor+3,w,c
  4932  002438  5A31               	subwfb	___llmod@dividend+3,f,c
  4933  00243A                     l652:
  4934  00243A  90D8               	bcf	status,0,c
  4935  00243C  3235               	rrcf	___llmod@divisor+3,f,c
  4936  00243E  3234               	rrcf	___llmod@divisor+2,f,c
  4937  002440  3233               	rrcf	___llmod@divisor+1,f,c
  4938  002442  3232               	rrcf	___llmod@divisor,f,c
  4939  002444  2E36               	decfsz	___llmod@counter,f,c
  4940  002446  D7E7               	goto	u2790
  4941  002448                     l653:
  4942  002448  C02E  F02E         	movff	___llmod@dividend,?___llmod
  4943  00244C  C02F  F02F         	movff	___llmod@dividend+1,?___llmod+1
  4944  002450  C030  F030         	movff	___llmod@dividend+2,?___llmod+2
  4945  002454  C031  F031         	movff	___llmod@dividend+3,?___llmod+3
  4946  002458  0012               	return		;funcret
  4947  00245A                     __end_of___llmod:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function ___lldiv *****************
  4965 ;; Defined at:
  4966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  dividend        4   45[COMRAM] unsigned long 
  4969 ;;  divisor         4   49[COMRAM] unsigned long 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  quotient        4   53[COMRAM] unsigned long 
  4972 ;;  counter         1   57[COMRAM] unsigned char 
  4973 ;; Return value:  Size  Location     Type
  4974 ;;                  4   45[COMRAM] unsigned long 
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4982 ;;      Params:         8       0       0       0       0       0       0
  4983 ;;      Locals:         5       0       0       0       0       0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0
  4985 ;;      Totals:        13       0       0       0       0       0       0
  4986 ;;Total ram usage:       13 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    4
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_sprintf
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text18
  4997  002220                     __ptext18:
  4998                           	opt stack 0
  4999  002220                     ___lldiv:
  5000                           	opt stack 24
  5001                           
  5002                           ;incstack = 0
  5003  002220  0E00               	movlw	0
  5004  002222  6E36               	movwf	___lldiv@quotient,c
  5005  002224  0E00               	movlw	0
  5006  002226  6E37               	movwf	___lldiv@quotient+1,c
  5007  002228  0E00               	movlw	0
  5008  00222A  6E38               	movwf	___lldiv@quotient+2,c
  5009  00222C  0E00               	movlw	0
  5010  00222E  6E39               	movwf	___lldiv@quotient+3,c
  5011  002230  5032               	movf	___lldiv@divisor,w,c
  5012  002232  1033               	iorwf	___lldiv@divisor+1,w,c
  5013  002234  1034               	iorwf	___lldiv@divisor+2,w,c
  5014  002236  1035               	iorwf	___lldiv@divisor+3,w,c
  5015  002238  B4D8               	btfsc	status,2,c
  5016  00223A  D02A               	goto	l643
  5017  00223C  0E01               	movlw	1
  5018  00223E  6E3A               	movwf	___lldiv@counter,c
  5019  002240  D006               	goto	l638
  5020  002242  90D8               	bcf	status,0,c
  5021  002244  3632               	rlcf	___lldiv@divisor,f,c
  5022  002246  3633               	rlcf	___lldiv@divisor+1,f,c
  5023  002248  3634               	rlcf	___lldiv@divisor+2,f,c
  5024  00224A  3635               	rlcf	___lldiv@divisor+3,f,c
  5025  00224C  2A3A               	incf	___lldiv@counter,f,c
  5026  00224E                     l638:
  5027  00224E  AE35               	btfss	___lldiv@divisor+3,7,c
  5028  002250  D7F8               	goto	l639
  5029  002252                     u2760:
  5030  002252  90D8               	bcf	status,0,c
  5031  002254  3636               	rlcf	___lldiv@quotient,f,c
  5032  002256  3637               	rlcf	___lldiv@quotient+1,f,c
  5033  002258  3638               	rlcf	___lldiv@quotient+2,f,c
  5034  00225A  3639               	rlcf	___lldiv@quotient+3,f,c
  5035  00225C  5032               	movf	___lldiv@divisor,w,c
  5036  00225E  5C2E               	subwf	___lldiv@dividend,w,c
  5037  002260  5033               	movf	___lldiv@divisor+1,w,c
  5038  002262  582F               	subwfb	___lldiv@dividend+1,w,c
  5039  002264  5034               	movf	___lldiv@divisor+2,w,c
  5040  002266  5830               	subwfb	___lldiv@dividend+2,w,c
  5041  002268  5035               	movf	___lldiv@divisor+3,w,c
  5042  00226A  5831               	subwfb	___lldiv@dividend+3,w,c
  5043  00226C  A0D8               	btfss	status,0,c
  5044  00226E  D009               	goto	l642
  5045  002270  5032               	movf	___lldiv@divisor,w,c
  5046  002272  5E2E               	subwf	___lldiv@dividend,f,c
  5047  002274  5033               	movf	___lldiv@divisor+1,w,c
  5048  002276  5A2F               	subwfb	___lldiv@dividend+1,f,c
  5049  002278  5034               	movf	___lldiv@divisor+2,w,c
  5050  00227A  5A30               	subwfb	___lldiv@dividend+2,f,c
  5051  00227C  5035               	movf	___lldiv@divisor+3,w,c
  5052  00227E  5A31               	subwfb	___lldiv@dividend+3,f,c
  5053  002280  8036               	bsf	___lldiv@quotient,0,c
  5054  002282                     l642:
  5055  002282  90D8               	bcf	status,0,c
  5056  002284  3235               	rrcf	___lldiv@divisor+3,f,c
  5057  002286  3234               	rrcf	___lldiv@divisor+2,f,c
  5058  002288  3233               	rrcf	___lldiv@divisor+1,f,c
  5059  00228A  3232               	rrcf	___lldiv@divisor,f,c
  5060  00228C  2E3A               	decfsz	___lldiv@counter,f,c
  5061  00228E  D7E1               	goto	u2760
  5062  002290                     l643:
  5063  002290  C036  F02E         	movff	___lldiv@quotient,?___lldiv
  5064  002294  C037  F02F         	movff	___lldiv@quotient+1,?___lldiv+1
  5065  002298  C038  F030         	movff	___lldiv@quotient+2,?___lldiv+2
  5066  00229C  C039  F031         	movff	___lldiv@quotient+3,?___lldiv+3
  5067  0022A0  0012               	return		;funcret
  5068  0022A2                     __end_of___lldiv:
  5069                           	opt stack 0
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           intcon	equ	0xFF2
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           fsr2h	equ	0xFDA
  5082                           fsr2l	equ	0xFD9
  5083                           status	equ	0xFD8
  5084                           
  5085 ;; *************** function ___fltol *****************
  5086 ;; Defined at:
  5087 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  f1              4   26[BANK0 ] unsigned long 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  exp1            1   68[COMRAM] unsigned char 
  5092 ;;  sign1           1   67[COMRAM] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  4   26[BANK0 ] long 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5102 ;;      Params:         0       4       0       0       0       0       0
  5103 ;;      Locals:         2       0       0       0       0       0       0
  5104 ;;      Temps:          0       4       0       0       0       0       0
  5105 ;;      Totals:         2       8       0       0       0       0       0
  5106 ;;Total ram usage:       10 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    4
  5109 ;; This function calls:
  5110 ;;		Nothing
  5111 ;; This function is called by:
  5112 ;;		_sprintf
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text19
  5117  001F60                     __ptext19:
  5118                           	opt stack 0
  5119  001F60                     ___fltol:
  5120                           	opt stack 24
  5121                           
  5122                           ;incstack = 0
  5123  001F60  0100               	movlb	0	; () banked
  5124  001F62  359C               	rlcf	(___fltol@f1+2)& (0+255),w,b
  5125  001F64  359D               	rlcf	(___fltol@f1+3)& (0+255),w,b
  5126  001F66  6E45               	movwf	___fltol@exp1,c
  5127  001F68  5045               	movf	___fltol@exp1,w,c
  5128  001F6A  A4D8               	btfss	status,2,c
  5129  001F6C  D009               	goto	l500
  5130                           
  5131                           ; BSR set to: 0
  5132  001F6E  0E00               	movlw	0
  5133  001F70  6F9A               	movwf	?___fltol& (0+255),b
  5134  001F72  0E00               	movlw	0
  5135  001F74  6F9B               	movwf	(?___fltol+1)& (0+255),b
  5136  001F76  0E00               	movlw	0
  5137  001F78  6F9C               	movwf	(?___fltol+2)& (0+255),b
  5138  001F7A  0E00               	movlw	0
  5139  001F7C  6F9D               	movwf	(?___fltol+3)& (0+255),b
  5140                           
  5141                           ; BSR set to: 0
  5142  001F7E  0012               	return	
  5143  001F80                     l500:
  5144                           
  5145                           ; BSR set to: 0
  5146                           
  5147                           ; BSR set to: 0
  5148  001F80  C09A  F09E         	movff	___fltol@f1,??___fltol
  5149  001F84  C09B  F09F         	movff	___fltol@f1+1,??___fltol+1
  5150  001F88  C09C  F0A0         	movff	___fltol@f1+2,??___fltol+2
  5151  001F8C  C09D  F0A1         	movff	___fltol@f1+3,??___fltol+3
  5152  001F90  0E20               	movlw	32
  5153  001F92  D005               	goto	u4120
  5154  001F94                     u4125:
  5155  001F94  90D8               	bcf	status,0,c
  5156  001F96  33A1               	rrcf	(??___fltol+3)& (0+255),f,b
  5157  001F98  33A0               	rrcf	(??___fltol+2)& (0+255),f,b
  5158  001F9A  339F               	rrcf	(??___fltol+1)& (0+255),f,b
  5159  001F9C  339E               	rrcf	??___fltol& (0+255),f,b
  5160  001F9E                     u4120:
  5161  001F9E  2EE8               	decfsz	wreg,f,c
  5162  001FA0  D7F9               	goto	u4125
  5163  001FA2  519E               	movf	??___fltol& (0+255),w,b
  5164  001FA4  6E44               	movwf	___fltol@sign1,c
  5165                           
  5166                           ; BSR set to: 0
  5167  001FA6  8F9C               	bsf	(___fltol@f1+2)& (0+255),7,b
  5168                           
  5169                           ; BSR set to: 0
  5170  001FA8  0EFF               	movlw	255
  5171  001FAA  179A               	andwf	___fltol@f1& (0+255),f,b
  5172  001FAC  0EFF               	movlw	255
  5173  001FAE  179B               	andwf	(___fltol@f1+1)& (0+255),f,b
  5174  001FB0  0EFF               	movlw	255
  5175  001FB2  179C               	andwf	(___fltol@f1+2)& (0+255),f,b
  5176  001FB4  0E00               	movlw	0
  5177  001FB6  179D               	andwf	(___fltol@f1+3)& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180  001FB8  0E96               	movlw	150
  5181  001FBA  5E45               	subwf	___fltol@exp1,f,c
  5182                           
  5183                           ; BSR set to: 0
  5184  001FBC  AE45               	btfss	___fltol@exp1,7,c
  5185  001FBE  D016               	goto	l502
  5186                           
  5187                           ; BSR set to: 0
  5188  001FC0  5045               	movf	___fltol@exp1,w,c
  5189  001FC2  0A80               	xorlw	128
  5190  001FC4  0F97               	addlw	151
  5191  001FC6  B0D8               	btfsc	status,0,c
  5192  001FC8  D009               	goto	l503
  5193                           
  5194                           ; BSR set to: 0
  5195  001FCA  0E00               	movlw	0
  5196  001FCC  6F9A               	movwf	?___fltol& (0+255),b
  5197  001FCE  0E00               	movlw	0
  5198  001FD0  6F9B               	movwf	(?___fltol+1)& (0+255),b
  5199  001FD2  0E00               	movlw	0
  5200  001FD4  6F9C               	movwf	(?___fltol+2)& (0+255),b
  5201  001FD6  0E00               	movlw	0
  5202  001FD8  6F9D               	movwf	(?___fltol+3)& (0+255),b
  5203                           
  5204                           ; BSR set to: 0
  5205  001FDA  0012               	return	
  5206  001FDC                     l503:
  5207                           
  5208                           ; BSR set to: 0
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213  001FDC  90D8               	bcf	status,0,c
  5214  001FDE  339D               	rrcf	(___fltol@f1+3)& (0+255),f,b
  5215  001FE0  339C               	rrcf	(___fltol@f1+2)& (0+255),f,b
  5216  001FE2  339B               	rrcf	(___fltol@f1+1)& (0+255),f,b
  5217  001FE4  339A               	rrcf	___fltol@f1& (0+255),f,b
  5218                           
  5219                           ; BSR set to: 0
  5220  001FE6  3E45               	incfsz	___fltol@exp1,f,c
  5221  001FE8  D7F9               	goto	l503
  5222                           
  5223                           ; BSR set to: 0
  5224  001FEA  D015               	goto	u4160
  5225  001FEC                     l502:
  5226                           
  5227                           ; BSR set to: 0
  5228                           
  5229                           ; BSR set to: 0
  5230  001FEC  0E1F               	movlw	31
  5231  001FEE  6445               	cpfsgt	___fltol@exp1,c
  5232  001FF0  D00F               	goto	l508
  5233                           
  5234                           ; BSR set to: 0
  5235  001FF2  0E00               	movlw	0
  5236  001FF4  6F9A               	movwf	?___fltol& (0+255),b
  5237  001FF6  0E00               	movlw	0
  5238  001FF8  6F9B               	movwf	(?___fltol+1)& (0+255),b
  5239  001FFA  0E00               	movlw	0
  5240  001FFC  6F9C               	movwf	(?___fltol+2)& (0+255),b
  5241  001FFE  0E00               	movlw	0
  5242  002000  6F9D               	movwf	(?___fltol+3)& (0+255),b
  5243                           
  5244                           ; BSR set to: 0
  5245  002002  0012               	return	
  5246  002004                     
  5247                           ; BSR set to: 0
  5248                           
  5249                           ; BSR set to: 0
  5250  002004  90D8               	bcf	status,0,c
  5251  002006  379A               	rlcf	___fltol@f1& (0+255),f,b
  5252  002008  379B               	rlcf	(___fltol@f1+1)& (0+255),f,b
  5253  00200A  379C               	rlcf	(___fltol@f1+2)& (0+255),f,b
  5254  00200C  379D               	rlcf	(___fltol@f1+3)& (0+255),f,b
  5255  00200E  0645               	decf	___fltol@exp1,f,c
  5256  002010                     l508:
  5257                           
  5258                           ; BSR set to: 0
  5259                           
  5260                           ; BSR set to: 0
  5261  002010  5045               	movf	___fltol@exp1,w,c
  5262  002012  A4D8               	btfss	status,2,c
  5263  002014  D7F7               	goto	l509
  5264  002016                     u4160:
  5265                           
  5266                           ; BSR set to: 0
  5267                           
  5268                           ; BSR set to: 0
  5269                           
  5270                           ; BSR set to: 0
  5271  002016  5044               	movf	___fltol@sign1,w,c
  5272  002018  B4D8               	btfsc	status,2,c
  5273  00201A  D008               	goto	l511
  5274                           
  5275                           ; BSR set to: 0
  5276  00201C  1F9D               	comf	(___fltol@f1+3)& (0+255),f,b
  5277  00201E  1F9C               	comf	(___fltol@f1+2)& (0+255),f,b
  5278  002020  1F9B               	comf	(___fltol@f1+1)& (0+255),f,b
  5279  002022  6D9A               	negf	___fltol@f1& (0+255),b
  5280  002024  0E00               	movlw	0
  5281  002026  239B               	addwfc	(___fltol@f1+1)& (0+255),f,b
  5282  002028  239C               	addwfc	(___fltol@f1+2)& (0+255),f,b
  5283  00202A  239D               	addwfc	(___fltol@f1+3)& (0+255),f,b
  5284  00202C                     l511:
  5285                           
  5286                           ; BSR set to: 0
  5287                           
  5288                           ; BSR set to: 0
  5289  00202C  C09A  F09A         	movff	___fltol@f1,?___fltol
  5290  002030  C09B  F09B         	movff	___fltol@f1+1,?___fltol+1
  5291  002034  C09C  F09C         	movff	___fltol@f1+2,?___fltol+2
  5292  002038  C09D  F09D         	movff	___fltol@f1+3,?___fltol+3
  5293  00203C  0012               	return	
  5294  00203E                     __end_of___fltol:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           postinc0	equ	0xFEE
  5304                           wreg	equ	0xFE8
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311 ;; *************** function ___flsub *****************
  5312 ;; Defined at:
  5313 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;  b               4   50[BANK0 ] long 
  5316 ;;  a               4   54[BANK0 ] long 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  4   50[BANK0 ] long 
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5328 ;;      Params:         0       8       0       0       0       0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0
  5331 ;;      Totals:         0       8       0       0       0       0       0
  5332 ;;Total ram usage:        8 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    5
  5335 ;; This function calls:
  5336 ;;		___fladd
  5337 ;; This function is called by:
  5338 ;;		_sprintf
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text20
  5343  0024A2                     __ptext20:
  5344                           	opt stack 0
  5345  0024A2                     ___flsub:
  5346                           	opt stack 23
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;incstack = 0
  5350  0024A2  0E00               	movlw	0
  5351  0024A4  0100               	movlb	0	; () banked
  5352  0024A6  1BB6               	xorwf	___flsub@a& (0+255),f,b
  5353  0024A8  0E00               	movlw	0
  5354  0024AA  1BB7               	xorwf	(___flsub@a+1)& (0+255),f,b
  5355  0024AC  0E00               	movlw	0
  5356  0024AE  1BB8               	xorwf	(___flsub@a+2)& (0+255),f,b
  5357  0024B0  0E80               	movlw	128
  5358  0024B2  1BB9               	xorwf	(___flsub@a+3)& (0+255),f,b
  5359                           
  5360                           ; BSR set to: 0
  5361  0024B4  C0B2  F09E         	movff	___flsub@b,___fladd@b
  5362  0024B8  C0B3  F09F         	movff	___flsub@b+1,___fladd@b+1
  5363  0024BC  C0B4  F0A0         	movff	___flsub@b+2,___fladd@b+2
  5364  0024C0  C0B5  F0A1         	movff	___flsub@b+3,___fladd@b+3
  5365  0024C4  C0B6  F0A2         	movff	___flsub@a,___fladd@a
  5366  0024C8  C0B7  F0A3         	movff	___flsub@a+1,___fladd@a+1
  5367  0024CC  C0B8  F0A4         	movff	___flsub@a+2,___fladd@a+2
  5368  0024D0  C0B9  F0A5         	movff	___flsub@a+3,___fladd@a+3
  5369  0024D4  EC63  F00A         	call	___fladd	;wreg free
  5370  0024D8  C09E  F0B2         	movff	?___fladd,?___flsub
  5371  0024DC  C09F  F0B3         	movff	?___fladd+1,?___flsub+1
  5372  0024E0  C0A0  F0B4         	movff	?___fladd+2,?___flsub+2
  5373  0024E4  C0A1  F0B5         	movff	?___fladd+3,?___flsub+3
  5374  0024E8  0012               	return	
  5375  0024EA                     __end_of___flsub:
  5376                           	opt stack 0
  5377                           tblptru	equ	0xFF8
  5378                           tblptrh	equ	0xFF7
  5379                           tblptrl	equ	0xFF6
  5380                           tablat	equ	0xFF5
  5381                           prodh	equ	0xFF4
  5382                           prodl	equ	0xFF3
  5383                           intcon	equ	0xFF2
  5384                           postinc0	equ	0xFEE
  5385                           wreg	equ	0xFE8
  5386                           indf2	equ	0xFDF
  5387                           postinc2	equ	0xFDE
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function ___fladd *****************
  5393 ;; Defined at:
  5394 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  b               4   30[BANK0 ] long 
  5397 ;;  a               4   34[BANK0 ] long 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  grs             1   49[BANK0 ] unsigned char 
  5400 ;;  bexp            1   48[BANK0 ] unsigned char 
  5401 ;;  aexp            1   47[BANK0 ] unsigned char 
  5402 ;;  signs           1   46[BANK0 ] unsigned char 
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  4   30[BANK0 ] unsigned char 
  5405 ;; Registers used:
  5406 ;;		wreg, status,2, status,0
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5412 ;;      Params:         0       8       0       0       0       0       0
  5413 ;;      Locals:         0       4       0       0       0       0       0
  5414 ;;      Temps:          0       8       0       0       0       0       0
  5415 ;;      Totals:         0      20       0       0       0       0       0
  5416 ;;Total ram usage:       20 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    4
  5419 ;; This function calls:
  5420 ;;		Nothing
  5421 ;; This function is called by:
  5422 ;;		_sprintf
  5423 ;;		___flsub
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text21
  5428  0014C6                     __ptext21:
  5429                           	opt stack 0
  5430  0014C6                     ___fladd:
  5431                           	opt stack 23
  5432                           
  5433                           ;incstack = 0
  5434  0014C6  0100               	movlb	0	; () banked
  5435  0014C8  51A1               	movf	(___fladd@b+3)& (0+255),w,b
  5436  0014CA  0B80               	andlw	128
  5437  0014CC  6FAE               	movwf	___fladd@signs& (0+255),b
  5438  0014CE  51A1               	movf	(___fladd@b+3)& (0+255),w,b
  5439  0014D0  25A1               	addwf	(___fladd@b+3)& (0+255),w,b
  5440  0014D2  6FB0               	movwf	___fladd@bexp& (0+255),b
  5441                           
  5442                           ; BSR set to: 0
  5443  0014D4  BFA0               	btfsc	(___fladd@b+2)& (0+255),7,b
  5444                           
  5445                           ; BSR set to: 0
  5446  0014D6  81B0               	bsf	___fladd@bexp& (0+255),0,b
  5447                           
  5448                           ; BSR set to: 0
  5449                           
  5450                           ; BSR set to: 0
  5451  0014D8  51B0               	movf	___fladd@bexp& (0+255),w,b
  5452  0014DA  B4D8               	btfsc	status,2,c
  5453  0014DC  D00D               	goto	l720
  5454                           
  5455                           ; BSR set to: 0
  5456  0014DE  29B0               	incf	___fladd@bexp& (0+255),w,b
  5457  0014E0  A4D8               	btfss	status,2,c
  5458  0014E2  D008               	goto	l721
  5459                           
  5460                           ; BSR set to: 0
  5461  0014E4  0E00               	movlw	0
  5462  0014E6  6F9E               	movwf	___fladd@b& (0+255),b
  5463  0014E8  0E00               	movlw	0
  5464  0014EA  6F9F               	movwf	(___fladd@b+1)& (0+255),b
  5465  0014EC  0E00               	movlw	0
  5466  0014EE  6FA0               	movwf	(___fladd@b+2)& (0+255),b
  5467  0014F0  0E00               	movlw	0
  5468  0014F2  6FA1               	movwf	(___fladd@b+3)& (0+255),b
  5469  0014F4                     l721:
  5470                           
  5471                           ; BSR set to: 0
  5472                           
  5473                           ; BSR set to: 0
  5474  0014F4  8FA0               	bsf	(___fladd@b+2)& (0+255),7,b
  5475  0014F6  D006               	goto	L4
  5476  0014F8                     l720:
  5477                           
  5478                           ; BSR set to: 0
  5479                           
  5480                           ; BSR set to: 0
  5481  0014F8  0E00               	movlw	0
  5482  0014FA  6F9E               	movwf	___fladd@b& (0+255),b
  5483  0014FC  0E00               	movlw	0
  5484  0014FE  6F9F               	movwf	(___fladd@b+1)& (0+255),b
  5485  001500  0E00               	movlw	0
  5486  001502  6FA0               	movwf	(___fladd@b+2)& (0+255),b
  5487  001504                     L4:
  5488  001504  0E00               	movlw	0
  5489  001506  6FA1               	movwf	(___fladd@b+3)& (0+255),b
  5490                           
  5491                           ; BSR set to: 0
  5492                           
  5493                           ; BSR set to: 0
  5494  001508  51A5               	movf	(___fladd@a+3)& (0+255),w,b
  5495  00150A  0B80               	andlw	128
  5496  00150C  6FAF               	movwf	___fladd@aexp& (0+255),b
  5497                           
  5498                           ; BSR set to: 0
  5499  00150E  51AE               	movf	___fladd@signs& (0+255),w,b
  5500  001510  19AF               	xorwf	___fladd@aexp& (0+255),w,b
  5501  001512  A4D8               	btfss	status,2,c
  5502                           
  5503                           ; BSR set to: 0
  5504  001514  8DAE               	bsf	___fladd@signs& (0+255),6,b
  5505                           
  5506                           ; BSR set to: 0
  5507                           
  5508                           ; BSR set to: 0
  5509  001516  51A5               	movf	(___fladd@a+3)& (0+255),w,b
  5510  001518  25A5               	addwf	(___fladd@a+3)& (0+255),w,b
  5511  00151A  6FAF               	movwf	___fladd@aexp& (0+255),b
  5512                           
  5513                           ; BSR set to: 0
  5514  00151C  BFA4               	btfsc	(___fladd@a+2)& (0+255),7,b
  5515                           
  5516                           ; BSR set to: 0
  5517  00151E  81AF               	bsf	___fladd@aexp& (0+255),0,b
  5518                           
  5519                           ; BSR set to: 0
  5520                           
  5521                           ; BSR set to: 0
  5522  001520  51AF               	movf	___fladd@aexp& (0+255),w,b
  5523  001522  B4D8               	btfsc	status,2,c
  5524  001524  D00D               	goto	l725
  5525                           
  5526                           ; BSR set to: 0
  5527  001526  29AF               	incf	___fladd@aexp& (0+255),w,b
  5528  001528  A4D8               	btfss	status,2,c
  5529  00152A  D008               	goto	l726
  5530                           
  5531                           ; BSR set to: 0
  5532  00152C  0E00               	movlw	0
  5533  00152E  6FA2               	movwf	___fladd@a& (0+255),b
  5534  001530  0E00               	movlw	0
  5535  001532  6FA3               	movwf	(___fladd@a+1)& (0+255),b
  5536  001534  0E00               	movlw	0
  5537  001536  6FA4               	movwf	(___fladd@a+2)& (0+255),b
  5538  001538  0E00               	movlw	0
  5539  00153A  6FA5               	movwf	(___fladd@a+3)& (0+255),b
  5540  00153C                     l726:
  5541                           
  5542                           ; BSR set to: 0
  5543                           
  5544                           ; BSR set to: 0
  5545  00153C  8FA4               	bsf	(___fladd@a+2)& (0+255),7,b
  5546  00153E  D006               	goto	L5
  5547  001540                     l725:
  5548                           
  5549                           ; BSR set to: 0
  5550                           
  5551                           ; BSR set to: 0
  5552  001540  0E00               	movlw	0
  5553  001542  6FA2               	movwf	___fladd@a& (0+255),b
  5554  001544  0E00               	movlw	0
  5555  001546  6FA3               	movwf	(___fladd@a+1)& (0+255),b
  5556  001548  0E00               	movlw	0
  5557  00154A  6FA4               	movwf	(___fladd@a+2)& (0+255),b
  5558  00154C                     L5:
  5559  00154C  0E00               	movlw	0
  5560  00154E  6FA5               	movwf	(___fladd@a+3)& (0+255),b
  5561                           
  5562                           ; BSR set to: 0
  5563                           
  5564                           ; BSR set to: 0
  5565  001550  51B0               	movf	___fladd@bexp& (0+255),w,b
  5566  001552  5DAF               	subwf	___fladd@aexp& (0+255),w,b
  5567  001554  B0D8               	btfsc	status,0,c
  5568  001556  D022               	goto	l728
  5569                           
  5570                           ; BSR set to: 0
  5571  001558  ADAE               	btfss	___fladd@signs& (0+255),6,b
  5572  00155A  D002               	goto	l729
  5573                           
  5574                           ; BSR set to: 0
  5575  00155C  0E80               	movlw	128
  5576  00155E  1BAE               	xorwf	___fladd@signs& (0+255),f,b
  5577  001560                     l729:
  5578                           
  5579                           ; BSR set to: 0
  5580                           
  5581                           ; BSR set to: 0
  5582  001560  C0B0  F0B1         	movff	___fladd@bexp,___fladd@grs
  5583                           
  5584                           ; BSR set to: 0
  5585  001564  C0AF  F0B0         	movff	___fladd@aexp,___fladd@bexp
  5586                           
  5587                           ; BSR set to: 0
  5588  001568  C0B1  F0AF         	movff	___fladd@grs,___fladd@aexp
  5589                           
  5590                           ; BSR set to: 0
  5591  00156C  C09E  F0B1         	movff	___fladd@b,___fladd@grs
  5592                           
  5593                           ; BSR set to: 0
  5594  001570  C0A2  F09E         	movff	___fladd@a,___fladd@b
  5595                           
  5596                           ; BSR set to: 0
  5597  001574  C0B1  F0A2         	movff	___fladd@grs,___fladd@a
  5598                           
  5599                           ; BSR set to: 0
  5600  001578  C09F  F0B1         	movff	___fladd@b+1,___fladd@grs
  5601                           
  5602                           ; BSR set to: 0
  5603  00157C  C0A3  F09F         	movff	___fladd@a+1,___fladd@b+1
  5604                           
  5605                           ; BSR set to: 0
  5606  001580  C0B1  F0A3         	movff	___fladd@grs,___fladd@a+1
  5607                           
  5608                           ; BSR set to: 0
  5609  001584  C0A0  F0B1         	movff	___fladd@b+2,___fladd@grs
  5610                           
  5611                           ; BSR set to: 0
  5612  001588  C0A4  F0A0         	movff	___fladd@a+2,___fladd@b+2
  5613                           
  5614                           ; BSR set to: 0
  5615  00158C  C0B1  F0A4         	movff	___fladd@grs,___fladd@a+2
  5616                           
  5617                           ; BSR set to: 0
  5618  001590  C0A1  F0B1         	movff	___fladd@b+3,___fladd@grs
  5619                           
  5620                           ; BSR set to: 0
  5621  001594  C0A5  F0A1         	movff	___fladd@a+3,___fladd@b+3
  5622                           
  5623                           ; BSR set to: 0
  5624  001598  C0B1  F0A5         	movff	___fladd@grs,___fladd@a+3
  5625  00159C                     l728:
  5626                           
  5627                           ; BSR set to: 0
  5628                           
  5629                           ; BSR set to: 0
  5630  00159C  0E00               	movlw	0
  5631  00159E  6FB1               	movwf	___fladd@grs& (0+255),b
  5632                           
  5633                           ; BSR set to: 0
  5634  0015A0  51B0               	movf	___fladd@bexp& (0+255),w,b
  5635  0015A2  6FA6               	movwf	??___fladd& (0+255),b
  5636  0015A4  6BA7               	clrf	(??___fladd+1)& (0+255),b
  5637  0015A6  1FA6               	comf	??___fladd& (0+255),f,b
  5638  0015A8  1FA7               	comf	(??___fladd+1)& (0+255),f,b
  5639  0015AA  4BA6               	infsnz	??___fladd& (0+255),f,b
  5640  0015AC  2BA7               	incf	(??___fladd+1)& (0+255),f,b
  5641  0015AE  51AF               	movf	___fladd@aexp& (0+255),w,b
  5642  0015B0  6FA8               	movwf	(??___fladd+2)& (0+255),b
  5643  0015B2  6BA9               	clrf	(??___fladd+3)& (0+255),b
  5644  0015B4  51A6               	movf	??___fladd& (0+255),w,b
  5645  0015B6  27A8               	addwf	(??___fladd+2)& (0+255),f,b
  5646  0015B8  51A7               	movf	(??___fladd+1)& (0+255),w,b
  5647  0015BA  23A9               	addwfc	(??___fladd+3)& (0+255),f,b
  5648  0015BC  BFA9               	btfsc	(??___fladd+3)& (0+255),7,b
  5649  0015BE  D02C               	goto	l732
  5650  0015C0  51A9               	movf	(??___fladd+3)& (0+255),w,b
  5651  0015C2  E104               	bnz	u3430
  5652  0015C4  0E1A               	movlw	26
  5653  0015C6  5DA8               	subwf	(??___fladd+2)& (0+255),w,b
  5654  0015C8  A0D8               	btfss	status,0,c
  5655  0015CA  D026               	goto	l732
  5656  0015CC                     u3430:
  5657                           
  5658                           ; BSR set to: 0
  5659  0015CC  519E               	movf	___fladd@b& (0+255),w,b
  5660  0015CE  119F               	iorwf	(___fladd@b+1)& (0+255),w,b
  5661  0015D0  11A0               	iorwf	(___fladd@b+2)& (0+255),w,b
  5662  0015D2  11A1               	iorwf	(___fladd@b+3)& (0+255),w,b
  5663  0015D4  B4D8               	btfsc	status,2,c
  5664  0015D6  D002               	goto	u3440
  5665  0015D8  0E01               	movlw	1
  5666  0015DA  D001               	goto	u3450
  5667  0015DC                     u3440:
  5668  0015DC  0E00               	movlw	0
  5669  0015DE                     u3450:
  5670  0015DE  6FB1               	movwf	___fladd@grs& (0+255),b
  5671                           
  5672                           ; BSR set to: 0
  5673  0015E0  0E00               	movlw	0
  5674  0015E2  6F9E               	movwf	___fladd@b& (0+255),b
  5675  0015E4  0E00               	movlw	0
  5676  0015E6  6F9F               	movwf	(___fladd@b+1)& (0+255),b
  5677  0015E8  0E00               	movlw	0
  5678  0015EA  6FA0               	movwf	(___fladd@b+2)& (0+255),b
  5679  0015EC  0E00               	movlw	0
  5680  0015EE  6FA1               	movwf	(___fladd@b+3)& (0+255),b
  5681                           
  5682                           ; BSR set to: 0
  5683  0015F0  C0AF  F0B0         	movff	___fladd@aexp,___fladd@bexp
  5684  0015F4  D015               	goto	u3480
  5685  0015F6                     l733:
  5686                           
  5687                           ; BSR set to: 0
  5688  0015F6  A1B1               	btfss	___fladd@grs& (0+255),0,b
  5689  0015F8  D005               	goto	l734
  5690                           
  5691                           ; BSR set to: 0
  5692  0015FA  90D8               	bcf	status,0,c
  5693  0015FC  31B1               	rrcf	___fladd@grs& (0+255),w,b
  5694  0015FE  0901               	iorlw	1
  5695  001600  6FB1               	movwf	___fladd@grs& (0+255),b
  5696  001602  D002               	goto	l735
  5697  001604                     l734:
  5698                           
  5699                           ; BSR set to: 0
  5700                           
  5701                           ; BSR set to: 0
  5702  001604  90D8               	bcf	status,0,c
  5703  001606  33B1               	rrcf	___fladd@grs& (0+255),f,b
  5704  001608                     l735:
  5705                           
  5706                           ; BSR set to: 0
  5707                           
  5708                           ; BSR set to: 0
  5709  001608  B19E               	btfsc	___fladd@b& (0+255),0,b
  5710                           
  5711                           ; BSR set to: 0
  5712  00160A  8FB1               	bsf	___fladd@grs& (0+255),7,b
  5713                           
  5714                           ; BSR set to: 0
  5715                           
  5716                           ; BSR set to: 0
  5717  00160C  35A1               	rlcf	(___fladd@b+3)& (0+255),w,b
  5718  00160E  33A1               	rrcf	(___fladd@b+3)& (0+255),f,b
  5719  001610  33A0               	rrcf	(___fladd@b+2)& (0+255),f,b
  5720  001612  339F               	rrcf	(___fladd@b+1)& (0+255),f,b
  5721  001614  339E               	rrcf	___fladd@b& (0+255),f,b
  5722                           
  5723                           ; BSR set to: 0
  5724  001616  2BB0               	incf	___fladd@bexp& (0+255),f,b
  5725  001618                     l732:
  5726                           
  5727                           ; BSR set to: 0
  5728  001618  51AF               	movf	___fladd@aexp& (0+255),w,b
  5729  00161A  5DB0               	subwf	___fladd@bexp& (0+255),w,b
  5730  00161C  A0D8               	btfss	status,0,c
  5731  00161E  D7EB               	goto	l733
  5732  001620                     u3480:
  5733                           
  5734                           ; BSR set to: 0
  5735                           
  5736                           ; BSR set to: 0
  5737  001620  BDAE               	btfsc	___fladd@signs& (0+255),6,b
  5738  001622  D029               	goto	l738
  5739                           
  5740                           ; BSR set to: 0
  5741  001624  51B0               	movf	___fladd@bexp& (0+255),w,b
  5742  001626  A4D8               	btfss	status,2,c
  5743  001628  D009               	goto	l739
  5744                           
  5745                           ; BSR set to: 0
  5746  00162A  0E00               	movlw	0
  5747  00162C  6F9E               	movwf	?___fladd& (0+255),b
  5748  00162E  0E00               	movlw	0
  5749  001630  6F9F               	movwf	(?___fladd+1)& (0+255),b
  5750  001632  0E00               	movlw	0
  5751  001634  6FA0               	movwf	(?___fladd+2)& (0+255),b
  5752  001636  0E00               	movlw	0
  5753  001638  6FA1               	movwf	(?___fladd+3)& (0+255),b
  5754                           
  5755                           ; BSR set to: 0
  5756  00163A  0012               	return	
  5757  00163C                     l739:
  5758                           
  5759                           ; BSR set to: 0
  5760                           
  5761                           ; BSR set to: 0
  5762  00163C  51A2               	movf	___fladd@a& (0+255),w,b
  5763  00163E  279E               	addwf	___fladd@b& (0+255),f,b
  5764  001640  51A3               	movf	(___fladd@a+1)& (0+255),w,b
  5765  001642  239F               	addwfc	(___fladd@b+1)& (0+255),f,b
  5766  001644  51A4               	movf	(___fladd@a+2)& (0+255),w,b
  5767  001646  23A0               	addwfc	(___fladd@b+2)& (0+255),f,b
  5768  001648  51A5               	movf	(___fladd@a+3)& (0+255),w,b
  5769  00164A  23A1               	addwfc	(___fladd@b+3)& (0+255),f,b
  5770                           
  5771                           ; BSR set to: 0
  5772  00164C  A1A1               	btfss	(___fladd@b+3)& (0+255),0,b
  5773  00164E  D083               	goto	u3610
  5774                           
  5775                           ; BSR set to: 0
  5776  001650  A1B1               	btfss	___fladd@grs& (0+255),0,b
  5777  001652  D006               	goto	l742
  5778                           
  5779                           ; BSR set to: 0
  5780  001654  90D8               	bcf	status,0,c
  5781  001656  33B1               	rrcf	___fladd@grs& (0+255),f,b
  5782  001658  51B1               	movf	___fladd@grs& (0+255),w,b
  5783  00165A  0901               	iorlw	1
  5784  00165C  6FB1               	movwf	___fladd@grs& (0+255),b
  5785  00165E  D002               	goto	l743
  5786  001660                     l742:
  5787                           
  5788                           ; BSR set to: 0
  5789                           
  5790                           ; BSR set to: 0
  5791  001660  90D8               	bcf	status,0,c
  5792  001662  33B1               	rrcf	___fladd@grs& (0+255),f,b
  5793  001664                     l743:
  5794                           
  5795                           ; BSR set to: 0
  5796                           
  5797                           ; BSR set to: 0
  5798  001664  B19E               	btfsc	___fladd@b& (0+255),0,b
  5799                           
  5800                           ; BSR set to: 0
  5801  001666  8FB1               	bsf	___fladd@grs& (0+255),7,b
  5802                           
  5803                           ; BSR set to: 0
  5804                           
  5805                           ; BSR set to: 0
  5806  001668  35A1               	rlcf	(___fladd@b+3)& (0+255),w,b
  5807  00166A  33A1               	rrcf	(___fladd@b+3)& (0+255),f,b
  5808  00166C  33A0               	rrcf	(___fladd@b+2)& (0+255),f,b
  5809  00166E  339F               	rrcf	(___fladd@b+1)& (0+255),f,b
  5810  001670  339E               	rrcf	___fladd@b& (0+255),f,b
  5811                           
  5812                           ; BSR set to: 0
  5813  001672  2BB0               	incf	___fladd@bexp& (0+255),f,b
  5814                           
  5815                           ; BSR set to: 0
  5816  001674  D070               	goto	u3610
  5817  001676                     l738:
  5818                           
  5819                           ; BSR set to: 0
  5820                           
  5821                           ; BSR set to: 0
  5822  001676  51A2               	movf	___fladd@a& (0+255),w,b
  5823  001678  5D9E               	subwf	___fladd@b& (0+255),w,b
  5824  00167A  51A3               	movf	(___fladd@a+1)& (0+255),w,b
  5825  00167C  599F               	subwfb	(___fladd@b+1)& (0+255),w,b
  5826  00167E  51A4               	movf	(___fladd@a+2)& (0+255),w,b
  5827  001680  59A0               	subwfb	(___fladd@b+2)& (0+255),w,b
  5828  001682  51A1               	movf	(___fladd@b+3)& (0+255),w,b
  5829  001684  0A80               	xorlw	128
  5830  001686  6FA6               	movwf	??___fladd& (0+255),b
  5831  001688  51A5               	movf	(___fladd@a+3)& (0+255),w,b
  5832  00168A  0A80               	xorlw	128
  5833  00168C  59A6               	subwfb	??___fladd& (0+255),w,b
  5834  00168E  B0D8               	btfsc	status,0,c
  5835  001690  D036               	goto	l746
  5836                           
  5837                           ; BSR set to: 0
  5838  001692  C09E  F0A6         	movff	___fladd@b,??___fladd
  5839  001696  C09F  F0A7         	movff	___fladd@b+1,??___fladd+1
  5840  00169A  C0A0  F0A8         	movff	___fladd@b+2,??___fladd+2
  5841  00169E  C0A1  F0A9         	movff	___fladd@b+3,??___fladd+3
  5842  0016A2  1FA6               	comf	??___fladd& (0+255),f,b
  5843  0016A4  1FA7               	comf	(??___fladd+1)& (0+255),f,b
  5844  0016A6  1FA8               	comf	(??___fladd+2)& (0+255),f,b
  5845  0016A8  1FA9               	comf	(??___fladd+3)& (0+255),f,b
  5846  0016AA  2BA6               	incf	??___fladd& (0+255),f,b
  5847  0016AC  0E00               	movlw	0
  5848  0016AE  23A7               	addwfc	(??___fladd+1)& (0+255),f,b
  5849  0016B0  23A8               	addwfc	(??___fladd+2)& (0+255),f,b
  5850  0016B2  23A9               	addwfc	(??___fladd+3)& (0+255),f,b
  5851  0016B4  51A2               	movf	___fladd@a& (0+255),w,b
  5852  0016B6  25A6               	addwf	??___fladd& (0+255),w,b
  5853  0016B8  6FAA               	movwf	(??___fladd+4)& (0+255),b
  5854  0016BA  51A3               	movf	(___fladd@a+1)& (0+255),w,b
  5855  0016BC  21A7               	addwfc	(??___fladd+1)& (0+255),w,b
  5856  0016BE  6FAB               	movwf	(??___fladd+5)& (0+255),b
  5857  0016C0  51A4               	movf	(___fladd@a+2)& (0+255),w,b
  5858  0016C2  21A8               	addwfc	(??___fladd+2)& (0+255),w,b
  5859  0016C4  6FAC               	movwf	(??___fladd+6)& (0+255),b
  5860  0016C6  51A5               	movf	(___fladd@a+3)& (0+255),w,b
  5861  0016C8  21A9               	addwfc	(??___fladd+3)& (0+255),w,b
  5862  0016CA  6FAD               	movwf	(??___fladd+7)& (0+255),b
  5863  0016CC  0EFF               	movlw	255
  5864  0016CE  25AA               	addwf	(??___fladd+4)& (0+255),w,b
  5865  0016D0  6F9E               	movwf	___fladd@b& (0+255),b
  5866  0016D2  0EFF               	movlw	255
  5867  0016D4  21AB               	addwfc	(??___fladd+5)& (0+255),w,b
  5868  0016D6  6F9F               	movwf	(___fladd@b+1)& (0+255),b
  5869  0016D8  0EFF               	movlw	255
  5870  0016DA  21AC               	addwfc	(??___fladd+6)& (0+255),w,b
  5871  0016DC  6FA0               	movwf	(___fladd@b+2)& (0+255),b
  5872  0016DE  0EFF               	movlw	255
  5873  0016E0  21AD               	addwfc	(??___fladd+7)& (0+255),w,b
  5874  0016E2  6FA1               	movwf	(___fladd@b+3)& (0+255),b
  5875  0016E4  0E80               	movlw	128
  5876  0016E6  1BAE               	xorwf	___fladd@signs& (0+255),f,b
  5877                           
  5878                           ; BSR set to: 0
  5879  0016E8  6DB1               	negf	___fladd@grs& (0+255),b
  5880                           
  5881                           ; BSR set to: 0
  5882  0016EA  51B1               	movf	___fladd@grs& (0+255),w,b
  5883  0016EC  A4D8               	btfss	status,2,c
  5884  0016EE  D00F               	goto	l748
  5885                           
  5886                           ; BSR set to: 0
  5887  0016F0  0E01               	movlw	1
  5888  0016F2  279E               	addwf	___fladd@b& (0+255),f,b
  5889  0016F4  0E00               	movlw	0
  5890  0016F6  239F               	addwfc	(___fladd@b+1)& (0+255),f,b
  5891  0016F8  23A0               	addwfc	(___fladd@b+2)& (0+255),f,b
  5892  0016FA  23A1               	addwfc	(___fladd@b+3)& (0+255),f,b
  5893                           
  5894                           ; BSR set to: 0
  5895  0016FC  D008               	goto	l748
  5896  0016FE                     l746:
  5897                           
  5898                           ; BSR set to: 0
  5899                           
  5900                           ; BSR set to: 0
  5901  0016FE  51A2               	movf	___fladd@a& (0+255),w,b
  5902  001700  5F9E               	subwf	___fladd@b& (0+255),f,b
  5903  001702  51A3               	movf	(___fladd@a+1)& (0+255),w,b
  5904  001704  5B9F               	subwfb	(___fladd@b+1)& (0+255),f,b
  5905  001706  51A4               	movf	(___fladd@a+2)& (0+255),w,b
  5906  001708  5BA0               	subwfb	(___fladd@b+2)& (0+255),f,b
  5907  00170A  51A5               	movf	(___fladd@a+3)& (0+255),w,b
  5908  00170C  5BA1               	subwfb	(___fladd@b+3)& (0+255),f,b
  5909  00170E                     l748:
  5910                           
  5911                           ; BSR set to: 0
  5912  00170E  519E               	movf	___fladd@b& (0+255),w,b
  5913  001710  119F               	iorwf	(___fladd@b+1)& (0+255),w,b
  5914  001712  11A0               	iorwf	(___fladd@b+2)& (0+255),w,b
  5915  001714  11A1               	iorwf	(___fladd@b+3)& (0+255),w,b
  5916  001716  A4D8               	btfss	status,2,c
  5917  001718  D01C               	goto	l755
  5918                           
  5919                           ; BSR set to: 0
  5920  00171A  51B1               	movf	___fladd@grs& (0+255),w,b
  5921  00171C  A4D8               	btfss	status,2,c
  5922  00171E  D019               	goto	l755
  5923                           
  5924                           ; BSR set to: 0
  5925  001720  0E00               	movlw	0
  5926  001722  6F9E               	movwf	?___fladd& (0+255),b
  5927  001724  0E00               	movlw	0
  5928  001726  6F9F               	movwf	(?___fladd+1)& (0+255),b
  5929  001728  0E00               	movlw	0
  5930  00172A  6FA0               	movwf	(?___fladd+2)& (0+255),b
  5931  00172C  0E00               	movlw	0
  5932  00172E  6FA1               	movwf	(?___fladd+3)& (0+255),b
  5933                           
  5934                           ; BSR set to: 0
  5935  001730  0012               	return	
  5936  001732                     
  5937                           ; BSR set to: 0
  5938                           
  5939                           ; BSR set to: 0
  5940  001732  90D8               	bcf	status,0,c
  5941  001734  379E               	rlcf	___fladd@b& (0+255),f,b
  5942  001736  379F               	rlcf	(___fladd@b+1)& (0+255),f,b
  5943  001738  37A0               	rlcf	(___fladd@b+2)& (0+255),f,b
  5944  00173A  37A1               	rlcf	(___fladd@b+3)& (0+255),f,b
  5945                           
  5946                           ; BSR set to: 0
  5947  00173C  BFB1               	btfsc	___fladd@grs& (0+255),7,b
  5948                           
  5949                           ; BSR set to: 0
  5950  00173E  819E               	bsf	___fladd@b& (0+255),0,b
  5951                           
  5952                           ; BSR set to: 0
  5953                           
  5954                           ; BSR set to: 0
  5955  001740  A1B1               	btfss	___fladd@grs& (0+255),0,b
  5956  001742  D002               	goto	l753
  5957                           
  5958                           ; BSR set to: 0
  5959  001744  80D8               	bsf	status,0,c
  5960  001746  D001               	goto	L6
  5961  001748                     l753:
  5962                           
  5963                           ; BSR set to: 0
  5964                           
  5965                           ; BSR set to: 0
  5966  001748  90D8               	bcf	status,0,c
  5967  00174A                     L6:
  5968  00174A  37B1               	rlcf	___fladd@grs& (0+255),f,b
  5969                           
  5970                           ; BSR set to: 0
  5971                           
  5972                           ; BSR set to: 0
  5973  00174C  51B0               	movf	___fladd@bexp& (0+255),w,b
  5974  00174E  A4D8               	btfss	status,2,c
  5975                           
  5976                           ; BSR set to: 0
  5977  001750  07B0               	decf	___fladd@bexp& (0+255),f,b
  5978  001752                     l755:
  5979                           
  5980                           ; BSR set to: 0
  5981                           
  5982                           ; BSR set to: 0
  5983                           
  5984                           ; BSR set to: 0
  5985  001752  AFA0               	btfss	(___fladd@b+2)& (0+255),7,b
  5986  001754  D7EE               	goto	l751
  5987  001756                     u3610:
  5988                           
  5989                           ; BSR set to: 0
  5990                           
  5991                           ; BSR set to: 0
  5992                           
  5993                           ; BSR set to: 0
  5994  001756  0E00               	movlw	0
  5995  001758  6FAF               	movwf	___fladd@aexp& (0+255),b
  5996                           
  5997                           ; BSR set to: 0
  5998  00175A  AFB1               	btfss	___fladd@grs& (0+255),7,b
  5999  00175C  D00A               	goto	l760
  6000                           
  6001                           ; BSR set to: 0
  6002  00175E  C0B1  F0A6         	movff	___fladd@grs,??___fladd
  6003  001762  0E7F               	movlw	127
  6004  001764  17A6               	andwf	??___fladd& (0+255),f,b
  6005  001766  A4D8               	btfss	status,2,c
  6006  001768  D002               	goto	u3640
  6007                           
  6008                           ; BSR set to: 0
  6009                           
  6010                           ; BSR set to: 0
  6011  00176A  A19E               	btfss	___fladd@b& (0+255),0,b
  6012  00176C  D002               	goto	l760
  6013  00176E                     u3640:
  6014                           
  6015                           ; BSR set to: 0
  6016  00176E  0E01               	movlw	1
  6017  001770  6FAF               	movwf	___fladd@aexp& (0+255),b
  6018  001772                     l760:
  6019                           
  6020                           ; BSR set to: 0
  6021                           
  6022                           ; BSR set to: 0
  6023                           
  6024                           ; BSR set to: 0
  6025  001772  51AF               	movf	___fladd@aexp& (0+255),w,b
  6026  001774  B4D8               	btfsc	status,2,c
  6027  001776  D020               	goto	l763
  6028                           
  6029                           ; BSR set to: 0
  6030  001778  0E01               	movlw	1
  6031  00177A  279E               	addwf	___fladd@b& (0+255),f,b
  6032  00177C  0E00               	movlw	0
  6033  00177E  239F               	addwfc	(___fladd@b+1)& (0+255),f,b
  6034  001780  23A0               	addwfc	(___fladd@b+2)& (0+255),f,b
  6035  001782  23A1               	addwfc	(___fladd@b+3)& (0+255),f,b
  6036                           
  6037                           ; BSR set to: 0
  6038  001784  A1A1               	btfss	(___fladd@b+3)& (0+255),0,b
  6039  001786  D018               	goto	l763
  6040                           
  6041                           ; BSR set to: 0
  6042  001788  C09E  F0A6         	movff	___fladd@b,??___fladd
  6043  00178C  C09F  F0A7         	movff	___fladd@b+1,??___fladd+1
  6044  001790  C0A0  F0A8         	movff	___fladd@b+2,??___fladd+2
  6045  001794  C0A1  F0A9         	movff	___fladd@b+3,??___fladd+3
  6046  001798  35A9               	rlcf	(??___fladd+3)& (0+255),w,b
  6047  00179A  33A9               	rrcf	(??___fladd+3)& (0+255),f,b
  6048  00179C  33A8               	rrcf	(??___fladd+2)& (0+255),f,b
  6049  00179E  33A7               	rrcf	(??___fladd+1)& (0+255),f,b
  6050  0017A0  33A6               	rrcf	??___fladd& (0+255),f,b
  6051  0017A2  C0A6  F09E         	movff	??___fladd,___fladd@b
  6052  0017A6  C0A7  F09F         	movff	??___fladd+1,___fladd@b+1
  6053  0017AA  C0A8  F0A0         	movff	??___fladd+2,___fladd@b+2
  6054  0017AE  C0A9  F0A1         	movff	??___fladd+3,___fladd@b+3
  6055  0017B2  29B0               	incf	___fladd@bexp& (0+255),w,b
  6056  0017B4  A4D8               	btfss	status,2,c
  6057                           
  6058                           ; BSR set to: 0
  6059  0017B6  2BB0               	incf	___fladd@bexp& (0+255),f,b
  6060  0017B8                     l763:
  6061                           
  6062                           ; BSR set to: 0
  6063                           
  6064                           ; BSR set to: 0
  6065                           
  6066                           ; BSR set to: 0
  6067                           
  6068                           ; BSR set to: 0
  6069  0017B8  29B0               	incf	___fladd@bexp& (0+255),w,b
  6070  0017BA  B4D8               	btfsc	status,2,c
  6071  0017BC  D003               	goto	u3690
  6072                           
  6073                           ; BSR set to: 0
  6074  0017BE  51B0               	movf	___fladd@bexp& (0+255),w,b
  6075  0017C0  A4D8               	btfss	status,2,c
  6076  0017C2  D00D               	goto	l767
  6077  0017C4                     u3690:
  6078                           
  6079                           ; BSR set to: 0
  6080                           
  6081                           ; BSR set to: 0
  6082  0017C4  0E00               	movlw	0
  6083  0017C6  6F9E               	movwf	___fladd@b& (0+255),b
  6084  0017C8  0E00               	movlw	0
  6085  0017CA  6F9F               	movwf	(___fladd@b+1)& (0+255),b
  6086  0017CC  0E00               	movlw	0
  6087  0017CE  6FA0               	movwf	(___fladd@b+2)& (0+255),b
  6088  0017D0  0E00               	movlw	0
  6089  0017D2  6FA1               	movwf	(___fladd@b+3)& (0+255),b
  6090  0017D4  51B0               	movf	___fladd@bexp& (0+255),w,b
  6091  0017D6  A4D8               	btfss	status,2,c
  6092  0017D8  D002               	goto	l767
  6093                           
  6094                           ; BSR set to: 0
  6095  0017DA  0E00               	movlw	0
  6096  0017DC  6FAE               	movwf	___fladd@signs& (0+255),b
  6097  0017DE                     l767:
  6098                           
  6099                           ; BSR set to: 0
  6100                           
  6101                           ; BSR set to: 0
  6102                           
  6103                           ; BSR set to: 0
  6104  0017DE  A1B0               	btfss	___fladd@bexp& (0+255),0,b
  6105  0017E0  D002               	goto	l768
  6106                           
  6107                           ; BSR set to: 0
  6108  0017E2  8FA0               	bsf	(___fladd@b+2)& (0+255),7,b
  6109  0017E4  D001               	goto	l769
  6110  0017E6                     l768:
  6111                           
  6112                           ; BSR set to: 0
  6113                           
  6114                           ; BSR set to: 0
  6115  0017E6  9FA0               	bcf	(___fladd@b+2)& (0+255),7,b
  6116  0017E8                     l769:
  6117                           
  6118                           ; BSR set to: 0
  6119                           
  6120                           ; BSR set to: 0
  6121  0017E8  90D8               	bcf	status,0,c
  6122  0017EA  31B0               	rrcf	___fladd@bexp& (0+255),w,b
  6123  0017EC  6FA1               	movwf	(___fladd@b+3)& (0+255),b
  6124                           
  6125                           ; BSR set to: 0
  6126  0017EE  BFAE               	btfsc	___fladd@signs& (0+255),7,b
  6127                           
  6128                           ; BSR set to: 0
  6129  0017F0  8FA1               	bsf	(___fladd@b+3)& (0+255),7,b
  6130                           
  6131                           ; BSR set to: 0
  6132                           
  6133                           ; BSR set to: 0
  6134  0017F2  C09E  F09E         	movff	___fladd@b,?___fladd
  6135  0017F6  C09F  F09F         	movff	___fladd@b+1,?___fladd+1
  6136  0017FA  C0A0  F0A0         	movff	___fladd@b+2,?___fladd+2
  6137  0017FE  C0A1  F0A1         	movff	___fladd@b+3,?___fladd+3
  6138  001802  0012               	return	
  6139  001804                     __end_of___fladd:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           intcon	equ	0xFF2
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           indf2	equ	0xFDF
  6151                           postinc2	equ	0xFDE
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function ___flneg *****************
  6157 ;; Defined at:
  6158 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  f1              4   45[COMRAM] unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;		None
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  4   45[COMRAM] unsigned char 
  6165 ;; Registers used:
  6166 ;;		wreg, status,2, status,0
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6172 ;;      Params:         4       0       0       0       0       0       0
  6173 ;;      Locals:         0       0       0       0       0       0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0
  6175 ;;      Totals:         4       0       0       0       0       0       0
  6176 ;;Total ram usage:        4 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:    4
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_sprintf
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text22
  6187  002596                     __ptext22:
  6188                           	opt stack 0
  6189  002596                     ___flneg:
  6190                           	opt stack 24
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;incstack = 0
  6194  002596  502E               	movf	___flneg@f1,w,c
  6195  002598  102F               	iorwf	___flneg@f1+1,w,c
  6196  00259A  1030               	iorwf	___flneg@f1+2,w,c
  6197  00259C  1031               	iorwf	___flneg@f1+3,w,c
  6198  00259E  B4D8               	btfsc	status,2,c
  6199  0025A0  D008               	goto	l477
  6200  0025A2  0E00               	movlw	0
  6201  0025A4  1A2E               	xorwf	___flneg@f1,f,c
  6202  0025A6  0E00               	movlw	0
  6203  0025A8  1A2F               	xorwf	___flneg@f1+1,f,c
  6204  0025AA  0E00               	movlw	0
  6205  0025AC  1A30               	xorwf	___flneg@f1+2,f,c
  6206  0025AE  0E80               	movlw	128
  6207  0025B0  1A31               	xorwf	___flneg@f1+3,f,c
  6208  0025B2                     l477:
  6209  0025B2  C02E  F02E         	movff	___flneg@f1,?___flneg
  6210  0025B6  C02F  F02F         	movff	___flneg@f1+1,?___flneg+1
  6211  0025BA  C030  F030         	movff	___flneg@f1+2,?___flneg+2
  6212  0025BE  C031  F031         	movff	___flneg@f1+3,?___flneg+3
  6213  0025C2  0012               	return	
  6214  0025C4                     __end_of___flneg:
  6215                           	opt stack 0
  6216                           tblptru	equ	0xFF8
  6217                           tblptrh	equ	0xFF7
  6218                           tblptrl	equ	0xFF6
  6219                           tablat	equ	0xFF5
  6220                           prodh	equ	0xFF4
  6221                           prodl	equ	0xFF3
  6222                           intcon	equ	0xFF2
  6223                           postinc0	equ	0xFEE
  6224                           wreg	equ	0xFE8
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           fsr2h	equ	0xFDA
  6228                           fsr2l	equ	0xFD9
  6229                           status	equ	0xFD8
  6230                           
  6231 ;; *************** function ___flge *****************
  6232 ;; Defined at:
  6233 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  ff1             4   45[COMRAM] unsigned char 
  6236 ;;  ff2             4   49[COMRAM] unsigned char 
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;		None               void
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6248 ;;      Params:         8       0       0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0
  6250 ;;      Temps:          4       0       0       0       0       0       0
  6251 ;;      Totals:        12       0       0       0       0       0       0
  6252 ;;Total ram usage:       12 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    4
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_sprintf
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text23
  6263  001E40                     __ptext23:
  6264                           	opt stack 0
  6265  001E40                     ___flge:
  6266                           	opt stack 24
  6267                           
  6268                           ;incstack = 0
  6269  001E40  0E00               	movlw	0
  6270  001E42  142E               	andwf	___flge@ff1,w,c
  6271  001E44  6E36               	movwf	??___flge& (0+255),c
  6272  001E46  0E00               	movlw	0
  6273  001E48  142F               	andwf	___flge@ff1+1,w,c
  6274  001E4A  6E37               	movwf	(??___flge+1)& (0+255),c
  6275  001E4C  0E80               	movlw	128
  6276  001E4E  1430               	andwf	___flge@ff1+2,w,c
  6277  001E50  6E38               	movwf	(??___flge+2)& (0+255),c
  6278  001E52  0E7F               	movlw	127
  6279  001E54  1431               	andwf	___flge@ff1+3,w,c
  6280  001E56  6E39               	movwf	(??___flge+3)& (0+255),c
  6281  001E58  5036               	movf	??___flge,w,c
  6282  001E5A  1037               	iorwf	??___flge+1,w,c
  6283  001E5C  1038               	iorwf	??___flge+2,w,c
  6284  001E5E  1039               	iorwf	??___flge+3,w,c
  6285  001E60  A4D8               	btfss	status,2,c
  6286  001E62  D008               	goto	l470
  6287  001E64  0E00               	movlw	0
  6288  001E66  6E2E               	movwf	___flge@ff1,c
  6289  001E68  0E00               	movlw	0
  6290  001E6A  6E2F               	movwf	___flge@ff1+1,c
  6291  001E6C  0E00               	movlw	0
  6292  001E6E  6E30               	movwf	___flge@ff1+2,c
  6293  001E70  0E00               	movlw	0
  6294  001E72  6E31               	movwf	___flge@ff1+3,c
  6295  001E74                     l470:
  6296  001E74  0E00               	movlw	0
  6297  001E76  1432               	andwf	___flge@ff2,w,c
  6298  001E78  6E36               	movwf	??___flge& (0+255),c
  6299  001E7A  0E00               	movlw	0
  6300  001E7C  1433               	andwf	___flge@ff2+1,w,c
  6301  001E7E  6E37               	movwf	(??___flge+1)& (0+255),c
  6302  001E80  0E80               	movlw	128
  6303  001E82  1434               	andwf	___flge@ff2+2,w,c
  6304  001E84  6E38               	movwf	(??___flge+2)& (0+255),c
  6305  001E86  0E7F               	movlw	127
  6306  001E88  1435               	andwf	___flge@ff2+3,w,c
  6307  001E8A  6E39               	movwf	(??___flge+3)& (0+255),c
  6308  001E8C  5036               	movf	??___flge,w,c
  6309  001E8E  1037               	iorwf	??___flge+1,w,c
  6310  001E90  1038               	iorwf	??___flge+2,w,c
  6311  001E92  1039               	iorwf	??___flge+3,w,c
  6312  001E94  A4D8               	btfss	status,2,c
  6313  001E96  D008               	goto	l471
  6314  001E98  0E00               	movlw	0
  6315  001E9A  6E32               	movwf	___flge@ff2,c
  6316  001E9C  0E00               	movlw	0
  6317  001E9E  6E33               	movwf	___flge@ff2+1,c
  6318  001EA0  0E00               	movlw	0
  6319  001EA2  6E34               	movwf	___flge@ff2+2,c
  6320  001EA4  0E00               	movlw	0
  6321  001EA6  6E35               	movwf	___flge@ff2+3,c
  6322  001EA8                     l471:
  6323  001EA8  AE31               	btfss	___flge@ff1+3,7,c
  6324  001EAA  D01D               	goto	l472
  6325  001EAC  C02E  F036         	movff	___flge@ff1,??___flge
  6326  001EB0  C02F  F037         	movff	___flge@ff1+1,??___flge+1
  6327  001EB4  C030  F038         	movff	___flge@ff1+2,??___flge+2
  6328  001EB8  C031  F039         	movff	___flge@ff1+3,??___flge+3
  6329  001EBC  1E36               	comf	??___flge,f,c
  6330  001EBE  1E37               	comf	??___flge+1,f,c
  6331  001EC0  1E38               	comf	??___flge+2,f,c
  6332  001EC2  1E39               	comf	??___flge+3,f,c
  6333  001EC4  2A36               	incf	??___flge,f,c
  6334  001EC6  0E00               	movlw	0
  6335  001EC8  2237               	addwfc	??___flge+1,f,c
  6336  001ECA  2238               	addwfc	??___flge+2,f,c
  6337  001ECC  2239               	addwfc	??___flge+3,f,c
  6338  001ECE  0E00               	movlw	0
  6339  001ED0  2436               	addwf	??___flge,w,c
  6340  001ED2  6E2E               	movwf	___flge@ff1,c
  6341  001ED4  0E00               	movlw	0
  6342  001ED6  2037               	addwfc	??___flge+1,w,c
  6343  001ED8  6E2F               	movwf	___flge@ff1+1,c
  6344  001EDA  0E00               	movlw	0
  6345  001EDC  2038               	addwfc	??___flge+2,w,c
  6346  001EDE  6E30               	movwf	___flge@ff1+2,c
  6347  001EE0  0E80               	movlw	128
  6348  001EE2  2039               	addwfc	??___flge+3,w,c
  6349  001EE4  6E31               	movwf	___flge@ff1+3,c
  6350  001EE6                     l472:
  6351  001EE6  AE35               	btfss	___flge@ff2+3,7,c
  6352  001EE8  D01D               	goto	l473
  6353  001EEA  C032  F036         	movff	___flge@ff2,??___flge
  6354  001EEE  C033  F037         	movff	___flge@ff2+1,??___flge+1
  6355  001EF2  C034  F038         	movff	___flge@ff2+2,??___flge+2
  6356  001EF6  C035  F039         	movff	___flge@ff2+3,??___flge+3
  6357  001EFA  1E36               	comf	??___flge,f,c
  6358  001EFC  1E37               	comf	??___flge+1,f,c
  6359  001EFE  1E38               	comf	??___flge+2,f,c
  6360  001F00  1E39               	comf	??___flge+3,f,c
  6361  001F02  2A36               	incf	??___flge,f,c
  6362  001F04  0E00               	movlw	0
  6363  001F06  2237               	addwfc	??___flge+1,f,c
  6364  001F08  2238               	addwfc	??___flge+2,f,c
  6365  001F0A  2239               	addwfc	??___flge+3,f,c
  6366  001F0C  0E00               	movlw	0
  6367  001F0E  2436               	addwf	??___flge,w,c
  6368  001F10  6E32               	movwf	___flge@ff2,c
  6369  001F12  0E00               	movlw	0
  6370  001F14  2037               	addwfc	??___flge+1,w,c
  6371  001F16  6E33               	movwf	___flge@ff2+1,c
  6372  001F18  0E00               	movlw	0
  6373  001F1A  2038               	addwfc	??___flge+2,w,c
  6374  001F1C  6E34               	movwf	___flge@ff2+2,c
  6375  001F1E  0E80               	movlw	128
  6376  001F20  2039               	addwfc	??___flge+3,w,c
  6377  001F22  6E35               	movwf	___flge@ff2+3,c
  6378  001F24                     l473:
  6379  001F24  0E00               	movlw	0
  6380  001F26  1A2E               	xorwf	___flge@ff1,f,c
  6381  001F28  0E00               	movlw	0
  6382  001F2A  1A2F               	xorwf	___flge@ff1+1,f,c
  6383  001F2C  0E00               	movlw	0
  6384  001F2E  1A30               	xorwf	___flge@ff1+2,f,c
  6385  001F30  0E80               	movlw	128
  6386  001F32  1A31               	xorwf	___flge@ff1+3,f,c
  6387  001F34  0E00               	movlw	0
  6388  001F36  1A32               	xorwf	___flge@ff2,f,c
  6389  001F38  0E00               	movlw	0
  6390  001F3A  1A33               	xorwf	___flge@ff2+1,f,c
  6391  001F3C  0E00               	movlw	0
  6392  001F3E  1A34               	xorwf	___flge@ff2+2,f,c
  6393  001F40  0E80               	movlw	128
  6394  001F42  1A35               	xorwf	___flge@ff2+3,f,c
  6395  001F44  5032               	movf	___flge@ff2,w,c
  6396  001F46  5C2E               	subwf	___flge@ff1,w,c
  6397  001F48  5033               	movf	___flge@ff2+1,w,c
  6398  001F4A  582F               	subwfb	___flge@ff1+1,w,c
  6399  001F4C  5034               	movf	___flge@ff2+2,w,c
  6400  001F4E  5830               	subwfb	___flge@ff1+2,w,c
  6401  001F50  5035               	movf	___flge@ff2+3,w,c
  6402  001F52  5831               	subwfb	___flge@ff1+3,w,c
  6403  001F54  B0D8               	btfsc	status,0,c
  6404  001F56  D002               	goto	l2043
  6405  001F58  90D8               	bcf	status,0,c
  6406  001F5A  0012               	return	
  6407  001F5C                     l2043:
  6408  001F5C  80D8               	bsf	status,0,c
  6409  001F5E  0012               	return	
  6410  001F60                     __end_of___flge:
  6411                           	opt stack 0
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           intcon	equ	0xFF2
  6419                           postinc0	equ	0xFEE
  6420                           wreg	equ	0xFE8
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _ADC_Read *****************
  6428 ;; Defined at:
  6429 ;;		line 13 in file "setting_hardaware/adc.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  channel         2   45[COMRAM] int 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  digital         2   49[COMRAM] int 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  2   45[COMRAM] int 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6443 ;;      Params:         2       0       0       0       0       0       0
  6444 ;;      Locals:         2       0       0       0       0       0       0
  6445 ;;      Temps:          2       0       0       0       0       0       0
  6446 ;;      Totals:         6       0       0       0       0       0       0
  6447 ;;Total ram usage:        6 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    4
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_Mode2
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text24
  6458  002566                     __ptext24:
  6459                           	opt stack 0
  6460  002566                     _ADC_Read:
  6461                           	opt stack 25
  6462                           
  6463                           ;adc.c: 15: int digital;
  6464                           ;adc.c: 17: ADCON0bits.CHS = 0 ;
  6465                           
  6466                           ;incstack = 0
  6467  002566  94C2               	bcf	4034,2,c	;volatile
  6468  002568  96C2               	bcf	4034,3,c	;volatile
  6469  00256A  98C2               	bcf	4034,4,c	;volatile
  6470  00256C  9AC2               	bcf	4034,5,c	;volatile
  6471                           
  6472                           ;adc.c: 18: ADCON0bits.GO = 1;
  6473  00256E  82C2               	bsf	4034,1,c	;volatile
  6474                           
  6475                           ;adc.c: 19: ADCON0bits.ADON = 1;
  6476  002570  80C2               	bsf	4034,0,c	;volatile
  6477  002572  B2C2               	btfsc	4034,1,c	;volatile
  6478  002574  D7FE               	goto	l122
  6479                           
  6480                           ;adc.c: 23: digital = (ADRESH*256) | (ADRESL);
  6481  002576  50C3               	movf	4035,w,c	;volatile
  6482  002578  CFC4 F030          	movff	4036,??_ADC_Read	;volatile
  6483  00257C  6A31               	clrf	(??_ADC_Read+1)& (0+255),c
  6484  00257E  C030  F031         	movff	??_ADC_Read,??_ADC_Read+1
  6485  002582  6A30               	clrf	??_ADC_Read,c
  6486  002584  1030               	iorwf	??_ADC_Read,w,c
  6487  002586  6E32               	movwf	ADC_Read@digital,c
  6488  002588  5031               	movf	??_ADC_Read+1,w,c
  6489  00258A  6E33               	movwf	ADC_Read@digital+1,c
  6490                           
  6491                           ;adc.c: 24: return(digital);
  6492  00258C  C032  F02E         	movff	ADC_Read@digital,?_ADC_Read
  6493  002590  C033  F02F         	movff	ADC_Read@digital+1,?_ADC_Read+1
  6494  002594  0012               	return	
  6495  002596                     __end_of_ADC_Read:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           postinc0	equ	0xFEE
  6505                           wreg	equ	0xFE8
  6506                           indf2	equ	0xFDF
  6507                           postinc2	equ	0xFDE
  6508                           fsr2h	equ	0xFDA
  6509                           fsr2l	equ	0xFD9
  6510                           status	equ	0xFD8
  6511                           
  6512 ;; *************** function _Mode1 *****************
  6513 ;; Defined at:
  6514 ;;		line 15 in file "main.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;		None
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      void 
  6521 ;; Registers used:
  6522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6528 ;;      Params:         0       0       0       0       0       0       0
  6529 ;;      Locals:         0       0       0       0       0       0       0
  6530 ;;      Temps:          0       0       0       0       0       0       0
  6531 ;;      Totals:         0       0       0       0       0       0       0
  6532 ;;Total ram usage:        0 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    6
  6535 ;; This function calls:
  6536 ;;		_ClearBuffer
  6537 ;;		_UART_Write_Text
  6538 ;; This function is called by:
  6539 ;;		_main
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text25
  6544  002656                     __ptext25:
  6545                           	opt stack 0
  6546  002656                     _Mode1:
  6547                           	opt stack 24
  6548                           
  6549                           ;main.c: 20: UART_Write_Text("Hello world\n");
  6550                           
  6551                           ;incstack = 0
  6552  002656  0E91               	movlw	low STR_1
  6553  002658  6E2F               	movwf	UART_Write_Text@text,c
  6554  00265A  0E06               	movlw	high STR_1
  6555  00265C  6E30               	movwf	UART_Write_Text@text+1,c
  6556  00265E  EC51  F011         	call	_UART_Write_Text	;wreg free
  6557                           
  6558                           ;main.c: 21: ClearBuffer();
  6559  002662  EC97  F012         	call	_ClearBuffer	;wreg free
  6560  002666  0012               	return		;funcret
  6561  002668                     __end_of_Mode1:
  6562                           	opt stack 0
  6563                           tblptru	equ	0xFF8
  6564                           tblptrh	equ	0xFF7
  6565                           tblptrl	equ	0xFF6
  6566                           tablat	equ	0xFF5
  6567                           prodh	equ	0xFF4
  6568                           prodl	equ	0xFF3
  6569                           intcon	equ	0xFF2
  6570                           postinc0	equ	0xFEE
  6571                           wreg	equ	0xFE8
  6572                           indf2	equ	0xFDF
  6573                           postinc2	equ	0xFDE
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _UART_Write_Text *****************
  6579 ;; Defined at:
  6580 ;;		line 50 in file "setting_hardaware/uart.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  text            2   46[COMRAM] PTR unsigned char 
  6583 ;;		 -> Mode2@res(20), STR_1(13), 
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;  i               2   50[COMRAM] int 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      void 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6595 ;;      Params:         2       0       0       0       0       0       0
  6596 ;;      Locals:         2       0       0       0       0       0       0
  6597 ;;      Temps:          2       0       0       0       0       0       0
  6598 ;;      Totals:         6       0       0       0       0       0       0
  6599 ;;Total ram usage:        6 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    5
  6602 ;; This function calls:
  6603 ;;		_UART_Write
  6604 ;; This function is called by:
  6605 ;;		_Mode1
  6606 ;;		_Mode2
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text26
  6611  0022A2                     __ptext26:
  6612                           	opt stack 0
  6613  0022A2                     _UART_Write_Text:
  6614                           	opt stack 24
  6615                           
  6616                           ;uart.c: 51: for(int i=0;text[i]!='\0';i++)
  6617                           
  6618                           ;incstack = 0
  6619  0022A2  0E00               	movlw	0
  6620  0022A4  6E34               	movwf	UART_Write_Text@i+1,c
  6621  0022A6  0E00               	movlw	0
  6622  0022A8  6E33               	movwf	UART_Write_Text@i,c
  6623  0022AA  D01A               	goto	l65
  6624  0022AC                     
  6625                           ;uart.c: 52: UART_Write(text[i]);
  6626  0022AC  5033               	movf	UART_Write_Text@i,w,c
  6627  0022AE  242F               	addwf	UART_Write_Text@text,w,c
  6628  0022B0  6E31               	movwf	??_UART_Write_Text& (0+255),c
  6629  0022B2  5034               	movf	UART_Write_Text@i+1,w,c
  6630  0022B4  2030               	addwfc	UART_Write_Text@text+1,w,c
  6631  0022B6  6E32               	movwf	(??_UART_Write_Text+1)& (0+255),c
  6632  0022B8  C031  FFF6         	movff	??_UART_Write_Text,tblptrl
  6633  0022BC  C032  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  6634  0022C0  6AF8               	clrf	tblptru,c
  6635  0022C2  0E05               	movlw	(high __ramtop+-1)
  6636  0022C4  64F7               	cpfsgt	tblptrh,c
  6637  0022C6  D003               	bra	u2917
  6638  0022C8  0008               	tblrd		*
  6639  0022CA  50F5               	movf	tablat,w,c
  6640  0022CC  D005               	bra	u2910
  6641  0022CE                     u2917:
  6642  0022CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  6643  0022D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  6644  0022D6  50EF               	movf	indf0,w,c
  6645  0022D8                     u2910:
  6646  0022D8  EC3A  F013         	call	_UART_Write
  6647  0022DC  4A33               	infsnz	UART_Write_Text@i,f,c
  6648  0022DE  2A34               	incf	UART_Write_Text@i+1,f,c
  6649  0022E0                     l65:
  6650  0022E0  5033               	movf	UART_Write_Text@i,w,c
  6651  0022E2  242F               	addwf	UART_Write_Text@text,w,c
  6652  0022E4  6E31               	movwf	??_UART_Write_Text& (0+255),c
  6653  0022E6  5034               	movf	UART_Write_Text@i+1,w,c
  6654  0022E8  2030               	addwfc	UART_Write_Text@text+1,w,c
  6655  0022EA  6E32               	movwf	(??_UART_Write_Text+1)& (0+255),c
  6656  0022EC  C031  FFF6         	movff	??_UART_Write_Text,tblptrl
  6657  0022F0  C032  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  6658  0022F4  6AF8               	clrf	tblptru,c
  6659  0022F6  0E05               	movlw	(high __ramtop+-1)
  6660  0022F8  64F7               	cpfsgt	tblptrh,c
  6661  0022FA  D003               	bra	u2927
  6662  0022FC  0008               	tblrd		*
  6663  0022FE  50F5               	movf	tablat,w,c
  6664  002300  D005               	bra	u2920
  6665  002302                     u2927:
  6666  002302  CFF6 FFE9          	movff	tblptrl,fsr0l
  6667  002306  CFF7 FFEA          	movff	tblptrh,fsr0h
  6668  00230A  50EF               	movf	indf0,w,c
  6669  00230C                     u2920:
  6670  00230C  0900               	iorlw	0
  6671  00230E  B4D8               	btfsc	status,2,c
  6672  002310  0012               	return	
  6673  002312  D7CC               	goto	l66
  6674  002314                     __end_of_UART_Write_Text:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           prodh	equ	0xFF4
  6681                           prodl	equ	0xFF3
  6682                           intcon	equ	0xFF2
  6683                           indf0	equ	0xFEF
  6684                           postinc0	equ	0xFEE
  6685                           fsr0h	equ	0xFEA
  6686                           fsr0l	equ	0xFE9
  6687                           wreg	equ	0xFE8
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _UART_Write *****************
  6695 ;; Defined at:
  6696 ;;		line 40 in file "setting_hardaware/uart.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  data            1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  data            1   45[COMRAM] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6710 ;;      Params:         0       0       0       0       0       0       0
  6711 ;;      Locals:         1       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0
  6713 ;;      Totals:         1       0       0       0       0       0       0
  6714 ;;Total ram usage:        1 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    4
  6717 ;; This function calls:
  6718 ;;		Nothing
  6719 ;; This function is called by:
  6720 ;;		_UART_Write_Text
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text27
  6725  002674                     __ptext27:
  6726                           	opt stack 0
  6727  002674                     _UART_Write:
  6728                           	opt stack 24
  6729                           
  6730                           ;incstack = 0
  6731                           ;UART_Write@data stored from wreg
  6732  002674  6E2E               	movwf	UART_Write@data,c
  6733  002676                     
  6734                           ;uart.c: 42: while(!TXSTAbits.TRMT);
  6735  002676  A2AC               	btfss	4012,1,c	;volatile
  6736  002678  D7FE               	goto	l2459
  6737                           
  6738                           ;uart.c: 43: TXREG = data;
  6739  00267A  C02E  FFAD         	movff	UART_Write@data,4013	;volatile
  6740  00267E  0012               	return		;funcret
  6741  002680                     __end_of_UART_Write:
  6742                           	opt stack 0
  6743                           tblptru	equ	0xFF8
  6744                           tblptrh	equ	0xFF7
  6745                           tblptrl	equ	0xFF6
  6746                           tablat	equ	0xFF5
  6747                           prodh	equ	0xFF4
  6748                           prodl	equ	0xFF3
  6749                           intcon	equ	0xFF2
  6750                           indf0	equ	0xFEF
  6751                           postinc0	equ	0xFEE
  6752                           fsr0h	equ	0xFEA
  6753                           fsr0l	equ	0xFE9
  6754                           wreg	equ	0xFE8
  6755                           indf2	equ	0xFDF
  6756                           postinc2	equ	0xFDE
  6757                           fsr2h	equ	0xFDA
  6758                           fsr2l	equ	0xFD9
  6759                           status	equ	0xFD8
  6760                           
  6761 ;; *************** function _ClearBuffer *****************
  6762 ;; Defined at:
  6763 ;;		line 55 in file "setting_hardaware/uart.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;		None
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  i               2   45[COMRAM] int 
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  1    wreg      void 
  6770 ;; Registers used:
  6771 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6777 ;;      Params:         0       0       0       0       0       0       0
  6778 ;;      Locals:         2       0       0       0       0       0       0
  6779 ;;      Temps:          0       0       0       0       0       0       0
  6780 ;;      Totals:         2       0       0       0       0       0       0
  6781 ;;Total ram usage:        2 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    4
  6784 ;; This function calls:
  6785 ;;		Nothing
  6786 ;; This function is called by:
  6787 ;;		_Mode1
  6788 ;;		_Mode2
  6789 ;;		_main
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text28
  6794  00252E                     __ptext28:
  6795                           	opt stack 0
  6796  00252E                     _ClearBuffer:
  6797                           	opt stack 25
  6798                           
  6799                           ;uart.c: 56: for(int i = 0; i < 10 ; i++)
  6800                           
  6801                           ;incstack = 0
  6802  00252E  0E00               	movlw	0
  6803  002530  6E2F               	movwf	ClearBuffer@i+1,c
  6804  002532  0E00               	movlw	0
  6805  002534  6E2E               	movwf	ClearBuffer@i,c
  6806  002536                     l2855:
  6807  002536  BE2F               	btfsc	ClearBuffer@i+1,7,c
  6808  002538  D006               	goto	l71
  6809  00253A  502F               	movf	ClearBuffer@i+1,w,c
  6810  00253C  E10F               	bnz	l2865
  6811  00253E  0E0A               	movlw	10
  6812  002540  5C2E               	subwf	ClearBuffer@i,w,c
  6813  002542  B0D8               	btfsc	status,0,c
  6814  002544  D00B               	goto	u2950
  6815  002546                     l71:
  6816                           
  6817                           ;uart.c: 57: mystring[i] = '\0';
  6818  002546  0E48               	movlw	low _mystring
  6819  002548  242E               	addwf	ClearBuffer@i,w,c
  6820  00254A  6ED9               	movwf	fsr2l,c
  6821  00254C  0E00               	movlw	high _mystring
  6822  00254E  202F               	addwfc	ClearBuffer@i+1,w,c
  6823  002550  6EDA               	movwf	fsr2h,c
  6824  002552  0E00               	movlw	0
  6825  002554  6EDF               	movwf	indf2,c
  6826  002556  4A2E               	infsnz	ClearBuffer@i,f,c
  6827  002558  2A2F               	incf	ClearBuffer@i+1,f,c
  6828  00255A  D7ED               	goto	l2855
  6829  00255C                     u2950:
  6830  00255C                     l2865:
  6831                           
  6832                           ;uart.c: 58: lenStr = 0;
  6833  00255C  0E00               	movlw	0
  6834  00255E  6E47               	movwf	_lenStr+1,c
  6835  002560  0E00               	movlw	0
  6836  002562  6E46               	movwf	_lenStr,c
  6837  002564  0012               	return		;funcret
  6838  002566                     __end_of_ClearBuffer:
  6839                           	opt stack 0
  6840                           tblptru	equ	0xFF8
  6841                           tblptrh	equ	0xFF7
  6842                           tblptrl	equ	0xFF6
  6843                           tablat	equ	0xFF5
  6844                           prodh	equ	0xFF4
  6845                           prodl	equ	0xFF3
  6846                           intcon	equ	0xFF2
  6847                           indf0	equ	0xFEF
  6848                           postinc0	equ	0xFEE
  6849                           fsr0h	equ	0xFEA
  6850                           fsr0l	equ	0xFE9
  6851                           wreg	equ	0xFE8
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           fsr2h	equ	0xFDA
  6855                           fsr2l	equ	0xFD9
  6856                           status	equ	0xFD8
  6857                           
  6858 ;; *************** function _GetString *****************
  6859 ;; Defined at:
  6860 ;;		line 46 in file "setting_hardaware/uart.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;		None
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  2   45[COMRAM] PTR unsigned char 
  6867 ;; Registers used:
  6868 ;;		wreg, status,2, status,0
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6874 ;;      Params:         2       0       0       0       0       0       0
  6875 ;;      Locals:         0       0       0       0       0       0       0
  6876 ;;      Temps:          0       0       0       0       0       0       0
  6877 ;;      Totals:         2       0       0       0       0       0       0
  6878 ;;Total ram usage:        2 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    4
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_main
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text29
  6889  00268C                     __ptext29:
  6890                           	opt stack 0
  6891  00268C                     _GetString:
  6892                           	opt stack 26
  6893                           
  6894                           ;uart.c: 47: return mystring;
  6895                           
  6896                           ;incstack = 0
  6897  00268C  0E48               	movlw	low _mystring
  6898  00268E  6E2E               	movwf	?_GetString,c
  6899  002690  0E00               	movlw	high _mystring
  6900  002692  6E2F               	movwf	?_GetString+1,c
  6901  002694  0012               	return	
  6902  002696                     __end_of_GetString:
  6903                           	opt stack 0
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodh	equ	0xFF4
  6909                           prodl	equ	0xFF3
  6910                           intcon	equ	0xFF2
  6911                           indf0	equ	0xFEF
  6912                           postinc0	equ	0xFEE
  6913                           fsr0h	equ	0xFEA
  6914                           fsr0l	equ	0xFE9
  6915                           wreg	equ	0xFE8
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function _Lo_ISR *****************
  6923 ;; Defined at:
  6924 ;;		line 75 in file "setting_hardaware/uart.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6938 ;;      Params:         0       0       0       0       0       0       0
  6939 ;;      Locals:         0       0       0       0       0       0       0
  6940 ;;      Temps:         21       0       0       0       0       0       0
  6941 ;;      Totals:        21       0       0       0       0       0       0
  6942 ;;Total ram usage:       21 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    3
  6945 ;; This function calls:
  6946 ;;		_MyusartRead
  6947 ;; This function is called by:
  6948 ;;		Interrupt level 1
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	intcodelo
  6953  000018                     __pintcodelo:
  6954                           	opt stack 0
  6955  000018                     _Lo_ISR:
  6956                           	opt stack 23
  6957                           
  6958                           ;incstack = 0
  6959  000018  8052               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6960  00001A  CFD8 F019          	movff	status,??_Lo_ISR
  6961  00001E  CFE8 F01A          	movff	wreg,??_Lo_ISR+1
  6962  000022  CFE0 F01B          	movff	bsr,??_Lo_ISR+2
  6963  000026  CFFA F01C          	movff	pclath,??_Lo_ISR+3
  6964  00002A  CFFB F01D          	movff	pclatu,??_Lo_ISR+4
  6965  00002E  CFE9 F01E          	movff	fsr0l,??_Lo_ISR+5
  6966  000032  CFEA F01F          	movff	fsr0h,??_Lo_ISR+6
  6967  000036  CFE1 F020          	movff	fsr1l,??_Lo_ISR+7
  6968  00003A  CFE2 F021          	movff	fsr1h,??_Lo_ISR+8
  6969  00003E  CFD9 F022          	movff	fsr2l,??_Lo_ISR+9
  6970  000042  CFDA F023          	movff	fsr2h,??_Lo_ISR+10
  6971  000046  CFF3 F024          	movff	prodl,??_Lo_ISR+11
  6972  00004A  CFF4 F025          	movff	prodh,??_Lo_ISR+12
  6973  00004E  CFF6 F026          	movff	tblptrl,??_Lo_ISR+13
  6974  000052  CFF7 F027          	movff	tblptrh,??_Lo_ISR+14
  6975  000056  CFF8 F028          	movff	tblptru,??_Lo_ISR+15
  6976  00005A  CFF5 F029          	movff	tablat,??_Lo_ISR+16
  6977  00005E  C052  F02A         	movff	btemp,??_Lo_ISR+17
  6978  000062  C053  F02B         	movff	btemp+1,??_Lo_ISR+18
  6979  000066  C054  F02C         	movff	btemp+2,??_Lo_ISR+19
  6980  00006A  C055  F02D         	movff	btemp+3,??_Lo_ISR+20
  6981                           
  6982                           ;uart.c: 77: if(RCIF)
  6983  00006E  AA9E               	btfss	3998,5,c	;volatile
  6984  000070  D007               	goto	i1l81
  6985                           
  6986                           ;uart.c: 78: {
  6987                           ;uart.c: 79: if(RCSTAbits.OERR)
  6988  000072  A2AB               	btfss	4011,1,c	;volatile
  6989  000074  D003               	goto	i1l82
  6990                           
  6991                           ;uart.c: 80: {
  6992                           ;uart.c: 81: CREN = 0;
  6993  000076  98AB               	bcf	4011,4,c	;volatile
  6994                           
  6995                           ;uart.c: 82: __nop();
  6996  000078  F000               	nop	
  6997                           
  6998                           ;uart.c: 83: CREN = 1;
  6999  00007A  88AB               	bsf	4011,4,c	;volatile
  7000  00007C                     i1l82:
  7001                           
  7002                           ;uart.c: 84: }
  7003                           ;uart.c: 86: MyusartRead();
  7004  00007C  EC75  F012         	call	_MyusartRead	;wreg free
  7005  000080                     i1l81:
  7006                           
  7007                           ;uart.c: 87: }
  7008                           ;uart.c: 90: return;
  7009  000080  C02D  F055         	movff	??_Lo_ISR+20,btemp+3
  7010  000084  C02C  F054         	movff	??_Lo_ISR+19,btemp+2
  7011  000088  C02B  F053         	movff	??_Lo_ISR+18,btemp+1
  7012  00008C  C02A  F052         	movff	??_Lo_ISR+17,btemp
  7013  000090  C029  FFF5         	movff	??_Lo_ISR+16,tablat
  7014  000094  C028  FFF8         	movff	??_Lo_ISR+15,tblptru
  7015  000098  C027  FFF7         	movff	??_Lo_ISR+14,tblptrh
  7016  00009C  C026  FFF6         	movff	??_Lo_ISR+13,tblptrl
  7017  0000A0  C025  FFF4         	movff	??_Lo_ISR+12,prodh
  7018  0000A4  C024  FFF3         	movff	??_Lo_ISR+11,prodl
  7019  0000A8  C023  FFDA         	movff	??_Lo_ISR+10,fsr2h
  7020  0000AC  C022  FFD9         	movff	??_Lo_ISR+9,fsr2l
  7021  0000B0  C021  FFE2         	movff	??_Lo_ISR+8,fsr1h
  7022  0000B4  C020  FFE1         	movff	??_Lo_ISR+7,fsr1l
  7023  0000B8  C01F  FFEA         	movff	??_Lo_ISR+6,fsr0h
  7024  0000BC  C01E  FFE9         	movff	??_Lo_ISR+5,fsr0l
  7025  0000C0  C01D  FFFB         	movff	??_Lo_ISR+4,pclatu
  7026  0000C4  C01C  FFFA         	movff	??_Lo_ISR+3,pclath
  7027  0000C8  C01B  FFE0         	movff	??_Lo_ISR+2,bsr
  7028  0000CC  C01A  FFE8         	movff	??_Lo_ISR+1,wreg
  7029  0000D0  C019  FFD8         	movff	??_Lo_ISR,status
  7030  0000D4  9052               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7031  0000D6  0010               	retfie	
  7032  0000D8                     __end_of_Lo_ISR:
  7033                           	opt stack 0
  7034                           pclatu	equ	0xFFB
  7035                           pclath	equ	0xFFA
  7036                           tblptru	equ	0xFF8
  7037                           tblptrh	equ	0xFF7
  7038                           tblptrl	equ	0xFF6
  7039                           tablat	equ	0xFF5
  7040                           prodh	equ	0xFF4
  7041                           prodl	equ	0xFF3
  7042                           intcon	equ	0xFF2
  7043                           indf0	equ	0xFEF
  7044                           postinc0	equ	0xFEE
  7045                           fsr0h	equ	0xFEA
  7046                           fsr0l	equ	0xFE9
  7047                           wreg	equ	0xFE8
  7048                           fsr1h	equ	0xFE2
  7049                           fsr1l	equ	0xFE1
  7050                           bsr	equ	0xFE0
  7051                           indf2	equ	0xFDF
  7052                           postinc2	equ	0xFDE
  7053                           fsr2h	equ	0xFDA
  7054                           fsr2l	equ	0xFD9
  7055                           status	equ	0xFD8
  7056                           
  7057 ;; *************** function _MyusartRead *****************
  7058 ;; Defined at:
  7059 ;;		line 61 in file "setting_hardaware/uart.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;		None
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      void 
  7066 ;; Registers used:
  7067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7073 ;;      Params:         0       0       0       0       0       0       0
  7074 ;;      Locals:         0       0       0       0       0       0       0
  7075 ;;      Temps:          0       0       0       0       0       0       0
  7076 ;;      Totals:         0       0       0       0       0       0       0
  7077 ;;Total ram usage:        0 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    2
  7080 ;; This function calls:
  7081 ;;		i1_UART_Write
  7082 ;;		i1___awmod
  7083 ;; This function is called by:
  7084 ;;		_Lo_ISR
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           	psect	text31
  7089  0024EA                     __ptext31:
  7090                           	opt stack 0
  7091  0024EA                     _MyusartRead:
  7092                           	opt stack 23
  7093                           
  7094                           ;uart.c: 63: mystring[lenStr] = RCREG;
  7095                           
  7096                           ;incstack = 0
  7097  0024EA  0E48               	movlw	low _mystring
  7098  0024EC  2446               	addwf	_lenStr,w,c
  7099  0024EE  6ED9               	movwf	fsr2l,c
  7100  0024F0  0E00               	movlw	high _mystring
  7101  0024F2  2047               	addwfc	_lenStr+1,w,c
  7102  0024F4  6EDA               	movwf	fsr2h,c
  7103  0024F6  CFAE FFDF          	movff	4014,indf2	;volatile
  7104                           
  7105                           ;uart.c: 64: UART_Write(mystring[lenStr]);
  7106  0024FA  0E48               	movlw	low _mystring
  7107  0024FC  2446               	addwf	_lenStr,w,c
  7108  0024FE  6ED9               	movwf	fsr2l,c
  7109  002500  0E00               	movlw	high _mystring
  7110  002502  2047               	addwfc	_lenStr+1,w,c
  7111  002504  6EDA               	movwf	fsr2h,c
  7112  002506  50DF               	movf	indf2,w,c
  7113  002508  EC40  F013         	call	i1_UART_Write
  7114                           
  7115                           ;uart.c: 65: lenStr++;
  7116  00250C  4A46               	infsnz	_lenStr,f,c
  7117  00250E  2A47               	incf	_lenStr+1,f,c
  7118                           
  7119                           ;uart.c: 66: lenStr %= 10;
  7120  002510  C046  F013         	movff	_lenStr,i1___awmod@dividend
  7121  002514  C047  F014         	movff	_lenStr+1,i1___awmod@dividend+1
  7122  002518  0E00               	movlw	0
  7123  00251A  6E16               	movwf	i1___awmod@divisor+1,c
  7124  00251C  0E0A               	movlw	10
  7125  00251E  6E15               	movwf	i1___awmod@divisor,c
  7126  002520  ECC2  F011         	call	i1___awmod	;wreg free
  7127  002524  C013  F046         	movff	?i1___awmod,_lenStr
  7128  002528  C014  F047         	movff	?i1___awmod+1,_lenStr+1
  7129  00252C  0012               	return	
  7130  00252E                     __end_of_MyusartRead:
  7131                           	opt stack 0
  7132                           pclatu	equ	0xFFB
  7133                           pclath	equ	0xFFA
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           indf0	equ	0xFEF
  7142                           postinc0	equ	0xFEE
  7143                           fsr0h	equ	0xFEA
  7144                           fsr0l	equ	0xFE9
  7145                           wreg	equ	0xFE8
  7146                           fsr1h	equ	0xFE2
  7147                           fsr1l	equ	0xFE1
  7148                           bsr	equ	0xFE0
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           fsr2h	equ	0xFDA
  7152                           fsr2l	equ	0xFD9
  7153                           status	equ	0xFD8
  7154                           
  7155 ;; *************** function i1___awmod *****************
  7156 ;; Defined at:
  7157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  dividend        2   18[COMRAM] int 
  7160 ;;  divisor         2   20[COMRAM] int 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;  __awmod         1   23[COMRAM] unsigned char 
  7163 ;;  __awmod         1   22[COMRAM] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  2   18[COMRAM] int 
  7166 ;; Registers used:
  7167 ;;		wreg, status,2, status,0
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7173 ;;      Params:         4       0       0       0       0       0       0
  7174 ;;      Locals:         2       0       0       0       0       0       0
  7175 ;;      Temps:          0       0       0       0       0       0       0
  7176 ;;      Totals:         6       0       0       0       0       0       0
  7177 ;;Total ram usage:        6 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    1
  7180 ;; This function calls:
  7181 ;;		Nothing
  7182 ;; This function is called by:
  7183 ;;		_MyusartRead
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text32
  7188  002384                     __ptext32:
  7189                           	opt stack 0
  7190  002384                     i1___awmod:
  7191                           	opt stack 23
  7192                           
  7193                           ;incstack = 0
  7194  002384  0E00               	movlw	0
  7195  002386  6E18               	movwf	i1___awmod@sign,c
  7196  002388  AE14               	btfss	i1___awmod@dividend+1,7,c
  7197  00238A  D006               	goto	i1l434
  7198  00238C  6C13               	negf	i1___awmod@dividend,c
  7199  00238E  1E14               	comf	i1___awmod@dividend+1,f,c
  7200  002390  B0D8               	btfsc	status,0,c
  7201  002392  2A14               	incf	i1___awmod@dividend+1,f,c
  7202  002394  0E01               	movlw	1
  7203  002396  6E18               	movwf	i1___awmod@sign,c
  7204  002398                     i1l434:
  7205  002398  AE16               	btfss	i1___awmod@divisor+1,7,c
  7206  00239A  D004               	goto	i1l435
  7207  00239C  6C15               	negf	i1___awmod@divisor,c
  7208  00239E  1E16               	comf	i1___awmod@divisor+1,f,c
  7209  0023A0  B0D8               	btfsc	status,0,c
  7210  0023A2  2A16               	incf	i1___awmod@divisor+1,f,c
  7211  0023A4                     i1l435:
  7212  0023A4  5015               	movf	i1___awmod@divisor,w,c
  7213  0023A6  1016               	iorwf	i1___awmod@divisor+1,w,c
  7214  0023A8  B4D8               	btfsc	status,2,c
  7215  0023AA  D018               	goto	i1l442
  7216  0023AC  0E01               	movlw	1
  7217  0023AE  6E17               	movwf	i1___awmod@counter,c
  7218  0023B0  D004               	goto	i1l437
  7219  0023B2  90D8               	bcf	status,0,c
  7220  0023B4  3615               	rlcf	i1___awmod@divisor,f,c
  7221  0023B6  3616               	rlcf	i1___awmod@divisor+1,f,c
  7222  0023B8  2A17               	incf	i1___awmod@counter,f,c
  7223  0023BA                     i1l437:
  7224  0023BA  AE16               	btfss	i1___awmod@divisor+1,7,c
  7225  0023BC  D7FA               	goto	i1l438
  7226  0023BE                     i1u326_20:
  7227  0023BE  5015               	movf	i1___awmod@divisor,w,c
  7228  0023C0  5C13               	subwf	i1___awmod@dividend,w,c
  7229  0023C2  5016               	movf	i1___awmod@divisor+1,w,c
  7230  0023C4  5814               	subwfb	i1___awmod@dividend+1,w,c
  7231  0023C6  A0D8               	btfss	status,0,c
  7232  0023C8  D004               	goto	i1l441
  7233  0023CA  5015               	movf	i1___awmod@divisor,w,c
  7234  0023CC  5E13               	subwf	i1___awmod@dividend,f,c
  7235  0023CE  5016               	movf	i1___awmod@divisor+1,w,c
  7236  0023D0  5A14               	subwfb	i1___awmod@dividend+1,f,c
  7237  0023D2                     i1l441:
  7238  0023D2  90D8               	bcf	status,0,c
  7239  0023D4  3216               	rrcf	i1___awmod@divisor+1,f,c
  7240  0023D6  3215               	rrcf	i1___awmod@divisor,f,c
  7241  0023D8  2E17               	decfsz	i1___awmod@counter,f,c
  7242  0023DA  D7F1               	goto	i1u326_20
  7243  0023DC                     i1l442:
  7244  0023DC  5018               	movf	i1___awmod@sign,w,c
  7245  0023DE  B4D8               	btfsc	status,2,c
  7246  0023E0  D004               	goto	i1l443
  7247  0023E2  6C13               	negf	i1___awmod@dividend,c
  7248  0023E4  1E14               	comf	i1___awmod@dividend+1,f,c
  7249  0023E6  B0D8               	btfsc	status,0,c
  7250  0023E8  2A14               	incf	i1___awmod@dividend+1,f,c
  7251  0023EA                     i1l443:
  7252  0023EA  C013  F013         	movff	i1___awmod@dividend,?i1___awmod
  7253  0023EE  C014  F014         	movff	i1___awmod@dividend+1,?i1___awmod+1
  7254  0023F2  0012               	return	
  7255  0023F4                     __end_ofi1___awmod:
  7256                           	opt stack 0
  7257                           pclatu	equ	0xFFB
  7258                           pclath	equ	0xFFA
  7259                           tblptru	equ	0xFF8
  7260                           tblptrh	equ	0xFF7
  7261                           tblptrl	equ	0xFF6
  7262                           tablat	equ	0xFF5
  7263                           prodh	equ	0xFF4
  7264                           prodl	equ	0xFF3
  7265                           intcon	equ	0xFF2
  7266                           indf0	equ	0xFEF
  7267                           postinc0	equ	0xFEE
  7268                           fsr0h	equ	0xFEA
  7269                           fsr0l	equ	0xFE9
  7270                           wreg	equ	0xFE8
  7271                           fsr1h	equ	0xFE2
  7272                           fsr1l	equ	0xFE1
  7273                           bsr	equ	0xFE0
  7274                           indf2	equ	0xFDF
  7275                           postinc2	equ	0xFDE
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           
  7280 ;; *************** function i1_UART_Write *****************
  7281 ;; Defined at:
  7282 ;;		line 40 in file "setting_hardaware/uart.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;  data            1    wreg     unsigned char 
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;  data            1   18[COMRAM] unsigned char 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  1    wreg      void 
  7289 ;; Registers used:
  7290 ;;		wreg
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7296 ;;      Params:         0       0       0       0       0       0       0
  7297 ;;      Locals:         1       0       0       0       0       0       0
  7298 ;;      Temps:          0       0       0       0       0       0       0
  7299 ;;      Totals:         1       0       0       0       0       0       0
  7300 ;;Total ram usage:        1 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    1
  7303 ;; This function calls:
  7304 ;;		Nothing
  7305 ;; This function is called by:
  7306 ;;		_MyusartRead
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text33
  7311  002680                     __ptext33:
  7312                           	opt stack 0
  7313  002680                     i1_UART_Write:
  7314                           	opt stack 23
  7315                           
  7316                           ;incstack = 0
  7317                           ;i1UART_Write@data stored from wreg
  7318  002680  6E13               	movwf	i1UART_Write@data,c
  7319  002682                     
  7320                           ;uart.c: 42: while(!TXSTAbits.TRMT);
  7321  002682  A2AC               	btfss	4012,1,c	;volatile
  7322  002684  D7FE               	goto	i1l3049
  7323                           
  7324                           ;uart.c: 43: TXREG = data;
  7325  002686  C013  FFAD         	movff	i1UART_Write@data,4013	;volatile
  7326  00268A  0012               	return		;funcret
  7327  00268C                     __end_ofi1_UART_Write:
  7328                           	opt stack 0
  7329                           pclatu	equ	0xFFB
  7330                           pclath	equ	0xFFA
  7331                           tblptru	equ	0xFF8
  7332                           tblptrh	equ	0xFF7
  7333                           tblptrl	equ	0xFF6
  7334                           tablat	equ	0xFF5
  7335                           prodh	equ	0xFF4
  7336                           prodl	equ	0xFF3
  7337                           intcon	equ	0xFF2
  7338                           indf0	equ	0xFEF
  7339                           postinc0	equ	0xFEE
  7340                           fsr0h	equ	0xFEA
  7341                           fsr0l	equ	0xFE9
  7342                           wreg	equ	0xFE8
  7343                           fsr1h	equ	0xFE2
  7344                           fsr1l	equ	0xFE1
  7345                           bsr	equ	0xFE0
  7346                           indf2	equ	0xFDF
  7347                           postinc2	equ	0xFDE
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _Hi_ISR *****************
  7353 ;; Defined at:
  7354 ;;		line 75 in file "main.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;		None
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      void 
  7361 ;; Registers used:
  7362 ;;		wreg, status,2
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7368 ;;      Params:         0       0       0       0       0       0       0
  7369 ;;      Locals:         0       0       0       0       0       0       0
  7370 ;;      Temps:         18       0       0       0       0       0       0
  7371 ;;      Totals:        18       0       0       0       0       0       0
  7372 ;;Total ram usage:       18 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		Interrupt level 2
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	intcode
  7382  000008                     __pintcode:
  7383                           	opt stack 0
  7384  000008                     _Hi_ISR:
  7385                           	opt stack 23
  7386                           
  7387                           ;incstack = 0
  7388  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7389  00000A  ED7B  F010         	call	int_func,f	;refresh shadow registers
  7390                           pclatu	equ	0xFFB
  7391                           pclath	equ	0xFFA
  7392                           tblptru	equ	0xFF8
  7393                           tblptrh	equ	0xFF7
  7394                           tblptrl	equ	0xFF6
  7395                           tablat	equ	0xFF5
  7396                           prodh	equ	0xFF4
  7397                           prodl	equ	0xFF3
  7398                           intcon	equ	0xFF2
  7399                           indf0	equ	0xFEF
  7400                           postinc0	equ	0xFEE
  7401                           fsr0h	equ	0xFEA
  7402                           fsr0l	equ	0xFE9
  7403                           wreg	equ	0xFE8
  7404                           fsr1h	equ	0xFE2
  7405                           fsr1l	equ	0xFE1
  7406                           bsr	equ	0xFE0
  7407                           indf2	equ	0xFDF
  7408                           postinc2	equ	0xFDE
  7409                           fsr2h	equ	0xFDA
  7410                           fsr2l	equ	0xFD9
  7411                           status	equ	0xFD8
  7412                           
  7413                           	psect	intcode_body
  7414  0020F6                     __pintcode_body:
  7415                           	opt stack 23
  7416  0020F6                     int_func:
  7417                           	opt stack 23
  7418  0020F6  0006               	pop		; remove dummy address from shadow register refresh
  7419  0020F8  CFFA F001          	movff	pclath,??_Hi_ISR
  7420  0020FC  CFFB F002          	movff	pclatu,??_Hi_ISR+1
  7421  002100  CFE9 F003          	movff	fsr0l,??_Hi_ISR+2
  7422  002104  CFEA F004          	movff	fsr0h,??_Hi_ISR+3
  7423  002108  CFE1 F005          	movff	fsr1l,??_Hi_ISR+4
  7424  00210C  CFE2 F006          	movff	fsr1h,??_Hi_ISR+5
  7425  002110  CFD9 F007          	movff	fsr2l,??_Hi_ISR+6
  7426  002114  CFDA F008          	movff	fsr2h,??_Hi_ISR+7
  7427  002118  CFF3 F009          	movff	prodl,??_Hi_ISR+8
  7428  00211C  CFF4 F00A          	movff	prodh,??_Hi_ISR+9
  7429  002120  CFF6 F00B          	movff	tblptrl,??_Hi_ISR+10
  7430  002124  CFF7 F00C          	movff	tblptrh,??_Hi_ISR+11
  7431  002128  CFF8 F00D          	movff	tblptru,??_Hi_ISR+12
  7432  00212C  CFF5 F00E          	movff	tablat,??_Hi_ISR+13
  7433  002130  C052  F00F         	movff	btemp,??_Hi_ISR+14
  7434  002134  C053  F010         	movff	btemp+1,??_Hi_ISR+15
  7435  002138  C054  F011         	movff	btemp+2,??_Hi_ISR+16
  7436  00213C  C055  F012         	movff	btemp+3,??_Hi_ISR+17
  7437                           
  7438                           ;main.c: 77: if(PIR1bits.CCP1IF == 1) {
  7439  002140  A49E               	btfss	3998,2,c	;volatile
  7440  002142  D006               	goto	i2l171
  7441                           
  7442                           ;main.c: 78: RC2 ^= 1;
  7443  002144  7482               	btg	3970,2,c	;volatile
  7444                           
  7445                           ;main.c: 79: PIR1bits.CCP1IF = 0;
  7446  002146  949E               	bcf	3998,2,c	;volatile
  7447                           
  7448                           ;main.c: 80: TMR3 = 0;
  7449  002148  0E00               	movlw	0
  7450  00214A  6EB3               	movwf	4019,c	;volatile
  7451  00214C  0E00               	movlw	0
  7452  00214E  6EB2               	movwf	4018,c	;volatile
  7453  002150                     i2l171:
  7454                           
  7455                           ;main.c: 81: }
  7456                           ;main.c: 82: return ;
  7457  002150  C012  F055         	movff	??_Hi_ISR+17,btemp+3
  7458  002154  C011  F054         	movff	??_Hi_ISR+16,btemp+2
  7459  002158  C010  F053         	movff	??_Hi_ISR+15,btemp+1
  7460  00215C  C00F  F052         	movff	??_Hi_ISR+14,btemp
  7461  002160  C00E  FFF5         	movff	??_Hi_ISR+13,tablat
  7462  002164  C00D  FFF8         	movff	??_Hi_ISR+12,tblptru
  7463  002168  C00C  FFF7         	movff	??_Hi_ISR+11,tblptrh
  7464  00216C  C00B  FFF6         	movff	??_Hi_ISR+10,tblptrl
  7465  002170  C00A  FFF4         	movff	??_Hi_ISR+9,prodh
  7466  002174  C009  FFF3         	movff	??_Hi_ISR+8,prodl
  7467  002178  C008  FFDA         	movff	??_Hi_ISR+7,fsr2h
  7468  00217C  C007  FFD9         	movff	??_Hi_ISR+6,fsr2l
  7469  002180  C006  FFE2         	movff	??_Hi_ISR+5,fsr1h
  7470  002184  C005  FFE1         	movff	??_Hi_ISR+4,fsr1l
  7471  002188  C004  FFEA         	movff	??_Hi_ISR+3,fsr0h
  7472  00218C  C003  FFE9         	movff	??_Hi_ISR+2,fsr0l
  7473  002190  C002  FFFB         	movff	??_Hi_ISR+1,pclatu
  7474  002194  C001  FFFA         	movff	??_Hi_ISR,pclath
  7475  002198  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7476  00219A  0011               	retfie		f
  7477  00219C                     __end_of_Hi_ISR:
  7478                           	opt stack 0
  7479                           pclatu	equ	0xFFB
  7480                           pclath	equ	0xFFA
  7481                           tblptru	equ	0xFF8
  7482                           tblptrh	equ	0xFF7
  7483                           tblptrl	equ	0xFF6
  7484                           tablat	equ	0xFF5
  7485                           prodh	equ	0xFF4
  7486                           prodl	equ	0xFF3
  7487                           intcon	equ	0xFF2
  7488                           indf0	equ	0xFEF
  7489                           postinc0	equ	0xFEE
  7490                           fsr0h	equ	0xFEA
  7491                           fsr0l	equ	0xFE9
  7492                           wreg	equ	0xFE8
  7493                           fsr1h	equ	0xFE2
  7494                           fsr1l	equ	0xFE1
  7495                           bsr	equ	0xFE0
  7496                           indf2	equ	0xFDF
  7497                           postinc2	equ	0xFDE
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           pclatu	equ	0xFFB
  7502                           pclath	equ	0xFFA
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           intcon	equ	0xFF2
  7510                           indf0	equ	0xFEF
  7511                           postinc0	equ	0xFEE
  7512                           fsr0h	equ	0xFEA
  7513                           fsr0l	equ	0xFE9
  7514                           wreg	equ	0xFE8
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           bsr	equ	0xFE0
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524                           	psect	rparam
  7525  0000                     pclatu	equ	0xFFB
  7526                           pclath	equ	0xFFA
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           indf0	equ	0xFEF
  7535                           postinc0	equ	0xFEE
  7536                           fsr0h	equ	0xFEA
  7537                           fsr0l	equ	0xFE9
  7538                           wreg	equ	0xFE8
  7539                           fsr1h	equ	0xFE2
  7540                           fsr1l	equ	0xFE1
  7541                           bsr	equ	0xFE0
  7542                           indf2	equ	0xFDF
  7543                           postinc2	equ	0xFDE
  7544                           fsr2h	equ	0xFDA
  7545                           fsr2l	equ	0xFD9
  7546                           status	equ	0xFD8
  7547                           
  7548                           	psect	temp
  7549  000052                     btemp:
  7550                           	opt stack 0
  7551  000052                     	ds	1
  7552  0000                     int$flags	set	btemp
  7553  0000                     wtemp6	set	btemp+1
  7554                           pclatu	equ	0xFFB
  7555                           pclath	equ	0xFFA
  7556                           tblptru	equ	0xFF8
  7557                           tblptrh	equ	0xFF7
  7558                           tblptrl	equ	0xFF6
  7559                           tablat	equ	0xFF5
  7560                           prodh	equ	0xFF4
  7561                           prodl	equ	0xFF3
  7562                           intcon	equ	0xFF2
  7563                           indf0	equ	0xFEF
  7564                           postinc0	equ	0xFEE
  7565                           fsr0h	equ	0xFEA
  7566                           fsr0l	equ	0xFE9
  7567                           wreg	equ	0xFE8
  7568                           fsr1h	equ	0xFE2
  7569                           fsr1l	equ	0xFE1
  7570                           bsr	equ	0xFE0
  7571                           indf2	equ	0xFDF
  7572                           postinc2	equ	0xFDE
  7573                           fsr2h	equ	0xFDA
  7574                           fsr2l	equ	0xFD9
  7575                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    144
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      81
    BANK0           128    120     122
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Mode2@res(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    main@input	PTR unsigned char  size(2) Largest target is 10
		 -> mystring(COMRAM[10]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 20
		 -> Mode2@res(BANK0[20]), STR_1(CODE[13]), 

    sp__GetString	PTR unsigned char  size(2) Largest target is 10
		 -> mystring(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _sprintf->___fltol
    _scale->___flmul
    _fround->___flmul
    ___flmul->___awdiv
    ___flmul->___xxtofl
    ___awdiv->___awmod
    ___fltol->___flmul
    _Mode1->_UART_Write_Text
    _UART_Write_Text->_UART_Write

Critical Paths under _Lo_ISR in COMRAM

    _MyusartRead->i1___awmod

Critical Paths under _Hi_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_Mode2
    _Mode2->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround

Critical Paths under _Lo_ISR in BANK0

    None.

Critical Paths under _Hi_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Lo_ISR in BANK1

    None.

Critical Paths under _Hi_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Lo_ISR in BANK2

    None.

Critical Paths under _Hi_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Lo_ISR in BANK3

    None.

Critical Paths under _Hi_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Lo_ISR in BANK4

    None.

Critical Paths under _Hi_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Lo_ISR in BANK5

    None.

Critical Paths under _Hi_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   47556
                                            117 BANK0      3     3      0
                        _ClearBuffer
                          _GetString
                              _Mode1
                              _Mode2
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                    _CCP1_Initialize
               _INTERRUPT_Initialize
                    _UART_Initialize
 ---------------------------------------------------------------------------------
 (2) _UART_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode2                                               24    24      0   47153
                                             93 BANK0     24    24      0
                           _ADC_Read
                        _ClearBuffer
                    _UART_Write_Text
                            ___flmul
                           ___xxtofl
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             43    35      8   41056
                                             58 BANK0     35    27      8
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     5      4   10070
                                             17 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              13     9      4    9791
                                             17 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    5033
                                             59 COMRAM     8     0      8
                                              0 BANK0     17    17      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2163
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             51 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17     9      8     455
                                             45 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          14     6      8     455
                                             45 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     474
                                             45 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                             45 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     615
                                             45 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                             45 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     607
                                             67 COMRAM     2     2      0
                                             26 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3827
                                             50 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    3442
                                             30 BANK0     20    12      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     121
                                             45 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     638
                                             45 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             6     4      2      99
                                             45 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Mode1                                                0     0      0     332
                        _ClearBuffer
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text                                      6     4      2     264
                                             46 COMRAM     6     4      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           1     1      0      22
                                             45 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearBuffer                                          2     2      0      68
                                             45 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GetString                                            2     0      2       0
                                             45 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Lo_ISR                                              21    21      0     370
                                             24 COMRAM    21    21      0
                        _MyusartRead
 ---------------------------------------------------------------------------------
 (6) _MyusartRead                                          0     0      0     370
                       i1_UART_Write
                          i1___awmod
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            6     2      4     348
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1_UART_Write                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Hi_ISR                                              18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearBuffer
   _GetString
   _Mode1
     _ClearBuffer
     _UART_Write_Text
       _UART_Write
   _Mode2
     _ADC_Read
     _ClearBuffer
     _UART_Write_Text
       _UART_Write
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
       ___flneg
       ___flsub
         ___fladd
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
       ___lldiv
       ___llmod
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP1_Initialize
     _INTERRUPT_Initialize
     _UART_Initialize

 _Lo_ISR (ROOT)
   _MyusartRead
     i1_UART_Write
     i1___awmod

 _Hi_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     78      7A       4       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      51       1       64.3%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CB      14        0.0%
DATA                 0      0      CB      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 22 13:22:43 2018

                           l71 2546                             l65 22E0                             l66 22AC  
                 ___awdiv@sign 0039                             bsr 000FE0            ___wmul@multiplicand 0030  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
      __end_of_CCP1_Initialize 2674                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                          l200 1090                            l122 2572                            l202 1148  
                          l211 06CE                            l220 086A                            l212 06F4  
                          l221 08B6                            l214 0CDA                            l222 099A  
                          l206 06AE                            l231 0A12                            l215 0752  
                          l207 06C4                            l240 0B0C                            l208 06D2  
                          l160 245E                            l225 0932                            l217 07BE  
                          l161 2488                            l242 0B46                            l218 083C  
                          l154 20F0                            l251 0CFE                            l243 0B4A  
                          l500 1F80                            l244 0B6C                            l236 0B02  
                          l421 21B0                            l245 0CAE                            l237 0A6E  
                          l502 1FEC                            l430 2216                            l422 21C0  
                          l246 0BCC                            l511 202C                            l503 1FDC  
                          l239 0B22                            l424 21DE                            l192 1A46  
                          l248 0CD0                            l425 21D6                            l441 2362  
                          l249 0CBA                            l442 236C                            l434 2328  
                          l443 237A                            l435 2334                            l195 0F52  
                          l508 2010                            l460 1DF4                            l428 21FE  
                          l196 0E6E                            l509 2004                            l453 1D36  
                          l429 2208                            l437 234A                            l189 1968  
                          l470 1E74                            l438 2342                            l471 1EA8  
                          l455 1D54                            l199 0F26                            l472 1EE6  
                          l720 14F8                            l456 1D96                            l560 1C78  
                          l473 1F24                            l721 14F4                            l465 1E28  
                          l457 1DC6                            l561 1CA0                            l642 2282  
                          l466 1E1C                            l570 1CF4                            l643 2290  
                          l459 1E04                            l563 1CDC                            l811 11A6  
                          l732 1618                            l652 243A                            l564 1CCC  
                          l812 11A2                            l477 25B2                            l733 15F6  
                          l725 1540                            l653 2448                            l557 1C12  
                          l813 11B6                            l742 1660                            l734 1604  
                          l726 153C                            l638 224E                            l822 13D4  
                          l751 1732                            l743 1664                            l735 1608  
                          l639 2242                            l559 1C3E                            l831 1450  
                          l823 13B6                            l815 11E6                            l760 1772  
                          l728 159C                            l648 2412                            l840 1AE4  
                          l832 146E                            l816 11E2                            l753 1748  
                          l729 1560                            l649 2406                            l841 1B02  
                          l569 1D00                            l817 11F6                            l746 16FE  
                          l738 1676                            l850 1B78                            l834 1492  
                          l818 1214                            l763 17B8                            l755 1752  
                          l739 163C                            l843 1B14                            l835 14B0  
                          l748 170E                            l844 1B08                            l829 140C  
                          l854 1BA2                            l846 1B52                            l767 17DE  
                          l855 1BD4                            l847 1B3A                            l839 1AD4  
                          l768 17E6                            l769 17E8                            l849 1B84  
                 __CFG_CPB$OFF 000000                            _RC2 007C12                   __CFG_CPD$OFF 000000  
                 ___awmod@sign 0033                            wreg 000FE8                   __CFG_IESO$ON 000000  
                 ___flmul@aexp 0085                   ___flmul@bexp 008A                   ___flmul@sign 0084  
                 ___flmul@temp 008F                   ___flmul@prod 008B                   __CFG_LVP$OFF 000000  
                 ___fltol@exp1 0045                   __CFG_WDT$OFF 000000                           l2043 1F5C  
                         l2459 2676                           l2855 2536                           l2865 255C  
                         l3843 0CFA                           l3747 0904                           l3739 08B6  
                         l3767 0A16                           l3795 0B0C                           _ADFM 007E07  
                         STR_1 0691                           STR_2 069E                           _CREN 007D5C  
                         u4010 234E                           u4120 1F9E                           u2610 1E2E  
                         u2540 1D06                           u4125 1F94                           u2461 1BF6  
                         u3430 15CC                           u3440 15DC                           u4160 2016  
                         u2481 1C22                           u3610 1756                           u3450 15DE  
                         u4330 0A4E                           u4250 087C                           u4420 0D16  
                         u4260 08C8                           u2910 22D8                           u2920 230C  
                         u3640 176E                           u3480 1620                           u2760 2252  
                         u3800 1202                           u4360 0B30                           u3810 1378  
                         u4370 0B40                           u4290 0904                           u3900 147C  
                         u2917 22CE                           u2950 255C                           u2790 2416  
                         u2870 1B8E                           u2927 2302                           u3815 136E  
                         u3690 17C4                           u3860 1408                           _RCIF 007CF5  
                         u3950 21E2                           i1l81 0080                           i1l82 007C  
                         u3890 145E                           _TMR3 000FB2                   __CFG_WDTPS$1 000000  
                         _main 245A                           fsr0h 000FEA                           fsr1h 000FE2  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0052               __end_of_ADC_Read 2596                           prodh 000FF4  
                         prodl 000FF3                           start 00D8                   _sprintf$1398 00C4  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000        __end_of_UART_Write_Text 2314  
             ?_UART_Initialize 0001                  ___fltol@sign1 0044                __end_of___fladd 1804  
                        ?_main 0001                __end_of___awdiv 2220                __end_of___flneg 25C4  
              __end_of___awmod 2384                __end_of___flmul 14C6                __end_of___flsub 24EA  
              __end_of___fltol 203E                __end_of___lldiv 22A2                ___awdiv@divisor 0036  
              __end_of___llmod 245A                          _IRCF0 007E9C                          _IRCF1 007E9D  
                        _IRCF2 007E9E                          i1l441 23D2                          i1l442 23DC  
                        i1l434 2398                          i1l443 23EA                          i1l435 23A4  
                        i1l437 23BA                          i1l438 23B2                          i2l171 2150  
              ___awdiv@counter 0038                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _TRISA 000F92                          _TXREG 000FAD                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
                __CFG_WRT3$OFF 000000                          _Mode1 2656                          _Mode2 203E  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                    ?_UART_Write 0001  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               i1___awmod@sign 0018                 __CFG_EBTRB$OFF 000000                __end_of_dpowers 0691  
                 Mode2@voltage 00F1                          _scale 0D24                    _ClearBuffer 252E  
                        pclath 000FFA                          tablat 000FF5                          status 000FD8  
                        wtemp6 0053                __end_of_sprintf 0D24             __size_ofi1___awmod 0070  
               __CFG_PBADEN$ON 000000                __initialization 260C                   __end_of_main 24A2  
                       ??_main 00F5               ?_CCP1_Initialize 0001                  __activetblptr 000002  
         __size_of__tdiv_to_l_ 0132             __size_of_GetString 000A                         ?_Mode1 0001  
                       ?_Mode2 0001                         _ADCON1 000FC1               ___llmod@dividend 002E  
                       ?_scale 0091                         _ADRESH 000FC4                         _ADRESL 000FC3  
             ___awdiv@dividend 0034                         i1l3049 2682               __end_of___xxtofl 1BE6  
                       _Hi_ISR 0008                         _Lo_ISR 0018                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 0635                         ___flge 1E40            __size_of_UART_Write 000C  
                    ??___fladd 00A6                         ___wmul 25C4                      ??___awdiv 0038  
                    ??___flneg 0032                 __CFG_STVREN$ON 000000                      ??___awmod 0032  
                    ??___flmul 0080               ?_UART_Write_Text 002F                      ??___flsub 0044  
                    ??___fltol 009E                      ??___lldiv 0036                      ??___llmod 0036  
              ADC_Read@channel 002E                         _lenStr 0046                         _fround 1804  
              ADC_Read@digital 0032                         clear_0 2618               ___awdiv@quotient 003A  
              ___awmod@divisor 0030                ___awmod@counter 0032              __end_ofi1___awmod 23F4  
                    ?_ADC_Read 002E                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                      ??_sprintf 00C2  
__size_of_INTERRUPT_Initialize 0008                     ___flge@ff1 002E                     ___flge@ff2 0032  
                 ___xxtofl@arg 0038                   ___xxtofl@exp 0037              _SYSTEM_Initialize 2644  
                 ___xxtofl@val 002E                     __accesstop 0080        __end_of__initialization 261E  
                   ___flneg@f1 002E             ?_SYSTEM_Initialize 0001                  ___rparam_used 000001  
                   ___fltol@f1 009A              __end_of_GetString 2696                  ?i1_UART_Write 0001  
                __end_of_Mode1 2668                  __end_of_Mode2 20F6                 __pcstackCOMRAM 0001  
          ??_SYSTEM_Initialize 002E                  __end_of_scale 1174                     __div_to_l_ 1D18  
                   ??_ADC_Read 0030                  ??_MyusartRead 0019                        ??_Mode1 0035  
                      ??_Mode2 0046                __div_to_l_@exp1 003B                __div_to_l_@cntr 003A  
                      ??_scale 0044      __end_of_SYSTEM_Initialize 2656                __div_to_l_@quot 0036  
                   __pbssBANK0 00F8                        ?_Hi_ISR 0001                  __div_to_l_@f1 002E  
                __div_to_l_@f2 0032                        ?_Lo_ISR 0001                 ??i1_UART_Write 0013  
                      ?___flge 002E                        ?___wmul 002E                        _CCP1CON 000FBD  
                      ?_fround 0091        __size_of_ADC_Initialize 0018                      ?___xxtofl 002E  
                 ??_UART_Write 002E                   ?_ClearBuffer 0001            __end_of_MyusartRead 252E  
              __size_of_Hi_ISR 2194                __size_of_Lo_ISR 00C0              __end_of__npowers_ 0669  
                      __Hparam 0000                     _scale$1397 0095                        __Lparam 0000  
              __size_of___flge 0120                        ___fladd 14C6                        ___awdiv 219C  
                      ___flneg 2596                        ___awmod 2314                        ___flmul 1174  
                      ___flsub 24A2                        ___fltol 1F60                        ___lldiv 2220  
              __size_of___wmul 0026             __end_of_UART_Write 2680                        ___llmod 23F4  
                 __psmallconst 0600                        __pcinit 260C                __size_of_fround 0292  
                      __ramtop 0600                        _digital 00F8                        __ptext0 245A  
                      __ptext1 2644                        __ptext2 25EA                        __ptext3 2696  
                      __ptext4 2668                        __ptext5 262C                        __ptext6 203E  
                      __ptext7 06A2                        __ptext8 0D24                        __ptext9 1804  
                  ?__div_to_l_ 002E                        _dpowers 0669                     ??___xxtofl 0032  
             ___awmod@dividend 002E       __size_of_UART_Initialize 0022     __size_of_SYSTEM_Initialize 0012  
                      _sprintf 06A2                 __pintcode_body 20F6           end_of_initialization 261E  
                __Lmediumconst 0000                        int_func 20F6                ___lldiv@divisor 0032  
              ___lldiv@counter 003A                      _RCSTAbits 000FAB                        postinc0 000FEE  
                      postinc2 000FDE                 __tdiv_to_l_@f1 002E                 __tdiv_to_l_@f2 0032  
                ??__tdiv_to_l_ 0036                 UART_Write@data 002E                    ___fladd@grs 00B1  
                ___xxtofl@sign 0036                      _TRISCbits 000F94                    _MyusartRead 24EA  
         __end_ofi1_UART_Write 268C                      i1___awmod 2384              __size_of_ADC_Read 0030  
     __size_of_CCP1_Initialize 000C                    ___flmul@grs 0086                      _TXSTAbits 000FAC  
          __size_of__div_to_l_ 0128                 __end_of_Hi_ISR 219C                 __end_of_Lo_ISR 00D8  
 __end_of_INTERRUPT_Initialize 269E                 __end_of___flge 1F60                      _GetString 268C  
               __end_of___wmul 25EA                    _BAUDCONbits 000FB8                 _ADC_Initialize 262C  
               __end_of_fround 1A96       __size_of_UART_Write_Text 0072            start_initialization 260C  
          __end_of__tdiv_to_l_ 1D18                     ?i1___awmod 0013                   ClearBuffer@i 002E  
            ??_UART_Initialize 002E           __size_of_ClearBuffer 0038                ___llmod@divisor 0032  
             __CFG_OSC$INTIO67 000000                       ??_Hi_ISR 0001                ___llmod@counter 0036  
                     ??_Lo_ISR 0019                       ??___flge 0036                       ??___wmul 0032  
       __end_of_ADC_Initialize 2644                     ?_GetString 002E             i1___awmod@dividend 0013  
             __CFG_LPT1OSC$OFF 000000                       ??_fround 0044                  sprintf@tmpval 00D4  
                    ___fladd@a 00A2                      ___fladd@b 009E                     fround@prec 009D  
                    ___flmul@a 0040                      ___flmul@b 003C                    __pbssCOMRAM 0046  
                    ___flsub@a 00B6                      ___flsub@b 00B2                  __pcstackBANK0 0080  
            __size_of___xxtofl 0150                    sprintf@flag 00CA                    sprintf@fval 00D8  
                  sprintf@prec 00CC              ??_CCP1_Initialize 002E              __CFG_CCP2MX$PORTC 000000  
                    __pintcode 0008                       ?___fladd 009E                       ?___awdiv 0034  
                     ?___flneg 002E                       ?___awmod 002E                       ?___flmul 003C  
                     ?___flsub 00B2                       ?___fltol 009A                       ?___lldiv 002E  
                     ?___llmod 002E                      __npowers_ 0635                ?_ADC_Initialize 0001  
                  __pintcodelo 0018                    __tdiv_to_l_ 1BE6          __size_ofi1_UART_Write 000C  
                 ??__div_to_l_ 0036                    __smallconst 0600                       _ADC_Read 2566  
               __size_of_Mode1 0012                 __size_of_Mode2 00B8                    ??i1___awmod 0017  
                     ?_sprintf 00BA                 __size_of_scale 0450              ??_UART_Write_Text 0031  
         _INTERRUPT_Initialize 2696                 ___wmul@product 0032                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D                       i1u326_20 23BE                       _PIR1bits 000F9E  
           __end_of__div_to_l_ 1E40                   i1_UART_Write 2680                       _RCONbits 000FD0  
                  ??_GetString 0030                     _ADCON0bits 000FC2                     _ADCON2bits 000FC0  
            ___wmul@multiplier 002E                       Mode2@res 00DD                      main@input 00F6  
                 ?_MyusartRead 0001          ?_INTERRUPT_Initialize 0001               i1UART_Write@data 0013  
                     __Hrparam 0000                       __Lrparam 0000             __CFG_BOREN$SBORDIS 000000  
            i1___awmod@divisor 0015              i1___awmod@counter 0017               __size_of___fladd 033E  
             __size_of___awdiv 0084               __size_of___flneg 002E               __size_of___awmod 0070  
             __size_of___flmul 0352               __size_of___flsub 0048               __size_of___fltol 00DE  
             __size_of___lldiv 0082               __size_of___llmod 0066                    _fround$1395 0099  
                  _fround$1396 0095                _UART_Initialize 25EA                     sprintf@exp 00D2  
                   sprintf@val 00CE                       ___xxtofl 1A96                       __ptext10 1174  
                     __ptext11 2314                       __ptext20 24A2                       __ptext12 219C  
                     __ptext21 14C6                       __ptext13 1BE6                       __ptext22 2596  
                     __ptext14 1D18                       __ptext31 24EA                       __ptext23 1E40  
                     __ptext15 1A96                       __ptext32 2384                       __ptext24 2566  
                     __ptext16 25C4                       __ptext33 2680                       __ptext25 2656  
                     __ptext17 23F4                       __ptext26 22A2                       __ptext18 2220  
                     __ptext27 2674                       __ptext19 1F60                       __ptext28 252E  
                     __ptext29 268C                       __powers_ 0601               __size_of_sprintf 0682  
          UART_Write_Text@text 002F                  __size_of_main 0048                       int$flags 0052  
                     _mystring 0048                     _INTCONbits 000FF2                _CCP1_Initialize 2668  
       ??_INTERRUPT_Initialize 002E                       scale@scl 0099                  ??_ClearBuffer 002E  
                     intlevel1 0000                       intlevel2 0000                      sprintf@ap 00C8  
             __tdiv_to_l_@exp1 003E               __tdiv_to_l_@cntr 003D                      sprintf@sp 00BA  
             __tdiv_to_l_@quot 0039               ___lldiv@dividend 002E               ??_ADC_Initialize 002E  
      __end_of_UART_Initialize 260C                   ?__tdiv_to_l_ 002E                _UART_Write_Text 22A2  
                     sprintf@c 00DC                       sprintf@f 00BC               ___lldiv@quotient 0036  
                   _UART_Write 2674                  ___fladd@signs 00AE           __size_of_MyusartRead 0044  
             UART_Write_Text@i 0033                   ___fladd@aexp 00AF                   ___fladd@bexp 00B0  
          __end_of_ClearBuffer 2566  
